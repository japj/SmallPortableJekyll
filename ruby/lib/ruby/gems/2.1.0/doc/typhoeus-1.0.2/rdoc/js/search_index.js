var search_data = {"index":{"searchIndex":["faraday","adapter","typhoeus","rack","typhoeus","middleware","paramsdecoder","helper","rails","typhoeus","railtie","typhoeus","config","easyfactory","errors","nostub","typhoeuserror","expectation","hydra","addable","before","blockconnection","cacheable","memoizable","queueable","runnable","stubbable","pool","request","actions","before","blockconnection","cacheable","callbacks","types","marshal","memoizable","operations","responseable","streamable","stubbable","response","cacheable","header","informations","status","abort()","add()","add()","add()","add()","add()","add()","all()","and_return()","app_connect_time()","appconnect_time()","before()","blocked?()","body()","cache_key()","cache_ttl()","cacheable?()","cached?()","call()","call()","clear()","clear()","code()","configure()","configure_proxy()","configure_socket()","configure_ssl()","configure_timeout()","connect_time()","convert()","debug_info()","decode()","decode!()","decode_typhoeus_arrays()","delete()","dequeue()","dequeue_many()","easies()","easy()","effective_url()","encoded?()","encoded_body()","eql?()","execute_callbacks()","execute_headers_callbacks()","find_by()","finish()","fuzzy_hash_eql?()","get()","get()","get()","handled_response()","hash()","hashable_string_for()","head()","headers()","headers_hash()","http_version()","httpauth_avail()","hydra()","marshal_dump()","marshal_load()","matches?()","memoizable?()","memory()","mock()","mock?()","modified?()","name_lookup_time()","namelookup_time()","new()","new()","new()","new()","new()","new()","new()","new()","on_body()","options()","options_match?()","parallel?()","parse()","patch()","perform_request()","post()","pretransfer_time()","primary_ip()","process_line()","process_pair()","provide_help()","put()","queue()","queue_front()","queued_requests()","raw()","read_body()","redirect_count()","redirect_time()","redirections()","release()","request()","request_size()","response()","response()","response=()","response=()","response=()","response_body()","response_code()","response_for()","response_headers()","responses()","return_code()","return_message()","run()","run()","run()","run()","run()","run()","run()","sanitize()","sanitize_timeout!()","set_callback()","set_default_proc_on()","set_defaults()","set_value()","setup_parallel_manager()","start_transfer_time()","starttransfer_time()","status_message()","streaming?()","stub()","stubbed_from()","success?()","time()","timed_out?()","total_time()","update_params()","url()","url_match?()","with_connection()","with_easy()"],"longSearchIndex":["faraday","faraday::adapter","faraday::adapter::typhoeus","rack","rack::typhoeus","rack::typhoeus::middleware","rack::typhoeus::middleware::paramsdecoder","rack::typhoeus::middleware::paramsdecoder::helper","rails","rails::typhoeus","rails::typhoeus::railtie","typhoeus","typhoeus::config","typhoeus::easyfactory","typhoeus::errors","typhoeus::errors::nostub","typhoeus::errors::typhoeuserror","typhoeus::expectation","typhoeus::hydra","typhoeus::hydra::addable","typhoeus::hydra::before","typhoeus::hydra::blockconnection","typhoeus::hydra::cacheable","typhoeus::hydra::memoizable","typhoeus::hydra::queueable","typhoeus::hydra::runnable","typhoeus::hydra::stubbable","typhoeus::pool","typhoeus::request","typhoeus::request::actions","typhoeus::request::before","typhoeus::request::blockconnection","typhoeus::request::cacheable","typhoeus::request::callbacks","typhoeus::request::callbacks::types","typhoeus::request::marshal","typhoeus::request::memoizable","typhoeus::request::operations","typhoeus::request::responseable","typhoeus::request::streamable","typhoeus::request::stubbable","typhoeus::response","typhoeus::response::cacheable","typhoeus::response::header","typhoeus::response::informations","typhoeus::response::status","typhoeus::hydra::queueable#abort()","typhoeus::hydra::addable#add()","typhoeus::hydra::before#add()","typhoeus::hydra::blockconnection#add()","typhoeus::hydra::cacheable#add()","typhoeus::hydra::memoizable#add()","typhoeus::hydra::stubbable#add()","typhoeus::expectation#all()","typhoeus::expectation#and_return()","typhoeus::response::informations#app_connect_time()","typhoeus::response::informations#appconnect_time()","typhoeus::before()","typhoeus::request::blockconnection#blocked?()","typhoeus::response::informations#body()","typhoeus::request#cache_key()","typhoeus::request::cacheable#cache_ttl()","typhoeus::request::cacheable#cacheable?()","typhoeus::response::cacheable#cached?()","faraday::adapter::typhoeus#call()","rack::typhoeus::middleware::paramsdecoder#call()","typhoeus::expectation#clear()","typhoeus::pool::clear()","typhoeus::response::informations#code()","typhoeus::configure()","faraday::adapter::typhoeus#configure_proxy()","faraday::adapter::typhoeus#configure_socket()","faraday::adapter::typhoeus#configure_ssl()","faraday::adapter::typhoeus#configure_timeout()","typhoeus::response::informations#connect_time()","rack::typhoeus::middleware::paramsdecoder::helper#convert()","typhoeus::response::informations#debug_info()","rack::typhoeus::middleware::paramsdecoder::helper#decode()","rack::typhoeus::middleware::paramsdecoder::helper#decode!()","rack::typhoeus::middleware::paramsdecoder::helper#decode_typhoeus_arrays()","typhoeus::request::actions#delete()","typhoeus::hydra::queueable#dequeue()","typhoeus::hydra::queueable#dequeue_many()","typhoeus::pool::easies()","typhoeus::easyfactory#easy()","typhoeus::response::informations#effective_url()","rack::typhoeus::middleware::paramsdecoder::helper#encoded?()","typhoeus::request#encoded_body()","typhoeus::request#eql?()","typhoeus::request::callbacks#execute_callbacks()","typhoeus::request::callbacks#execute_headers_callbacks()","typhoeus::expectation#find_by()","typhoeus::request::operations#finish()","typhoeus::request#fuzzy_hash_eql?()","typhoeus::easyfactory#get()","typhoeus::pool::get()","typhoeus::request::actions#get()","typhoeus::response#handled_response()","typhoeus::request#hash()","typhoeus::request#hashable_string_for()","typhoeus::request::actions#head()","typhoeus::response::informations#headers()","typhoeus::response::informations#headers_hash()","typhoeus::response::status#http_version()","typhoeus::response::informations#httpauth_avail()","typhoeus::hydra#hydra()","typhoeus::request::marshal#marshal_dump()","typhoeus::request::marshal#marshal_load()","typhoeus::expectation#matches?()","typhoeus::request::memoizable#memoizable?()","typhoeus::hydra::memoizable#memory()","typhoeus::response#mock()","typhoeus::response#mock?()","typhoeus::response::status#modified?()","typhoeus::response::informations#name_lookup_time()","typhoeus::response::informations#namelookup_time()","rack::typhoeus::middleware::paramsdecoder::new()","typhoeus::easyfactory::new()","typhoeus::errors::nostub::new()","typhoeus::expectation::new()","typhoeus::hydra::new()","typhoeus::request::new()","typhoeus::response::new()","typhoeus::response::header::new()","typhoeus::request::streamable#on_body()","typhoeus::request::actions#options()","typhoeus::expectation#options_match?()","faraday::adapter::typhoeus#parallel?()","typhoeus::response::header#parse()","typhoeus::request::actions#patch()","faraday::adapter::typhoeus#perform_request()","typhoeus::request::actions#post()","typhoeus::response::informations#pretransfer_time()","typhoeus::response::informations#primary_ip()","typhoeus::response::header#process_line()","typhoeus::response::header#process_pair()","typhoeus::easyfactory#provide_help()","typhoeus::request::actions#put()","typhoeus::hydra::queueable#queue()","typhoeus::hydra::queueable#queue_front()","typhoeus::hydra::queueable#queued_requests()","typhoeus::response::header#raw()","faraday::adapter::typhoeus#read_body()","typhoeus::response::informations#redirect_count()","typhoeus::response::informations#redirect_time()","typhoeus::response::informations#redirections()","typhoeus::pool::release()","faraday::adapter::typhoeus#request()","typhoeus::response::informations#request_size()","typhoeus::expectation#response()","typhoeus::request::responseable#response()","typhoeus::request::cacheable#response=()","typhoeus::request::memoizable#response=()","typhoeus::request::responseable#response=()","typhoeus::response::informations#response_body()","typhoeus::response::informations#response_code()","typhoeus::expectation#response_for()","typhoeus::response::informations#response_headers()","typhoeus::expectation#responses()","typhoeus::response::informations#return_code()","typhoeus::response::informations#return_message()","typhoeus::hydra::memoizable#run()","typhoeus::hydra::runnable#run()","typhoeus::request::before#run()","typhoeus::request::blockconnection#run()","typhoeus::request::cacheable#run()","typhoeus::request::operations#run()","typhoeus::request::stubbable#run()","typhoeus::easyfactory#sanitize()","typhoeus::easyfactory#sanitize_timeout!()","typhoeus::easyfactory#set_callback()","typhoeus::response::header#set_default_proc_on()","typhoeus::request#set_defaults()","typhoeus::response::header#set_value()","faraday::adapter::typhoeus::setup_parallel_manager()","typhoeus::response::informations#start_transfer_time()","typhoeus::response::informations#starttransfer_time()","typhoeus::response::status#status_message()","typhoeus::request::streamable#streaming?()","typhoeus::stub()","typhoeus::expectation#stubbed_from()","typhoeus::response::status#success?()","typhoeus::response::informations#time()","typhoeus::response::status#timed_out?()","typhoeus::response::informations#total_time()","rack::typhoeus::middleware::paramsdecoder#update_params()","typhoeus::request#url()","typhoeus::expectation#url_match?()","typhoeus::with_connection()","typhoeus::pool::with_easy()"],"info":[["Faraday","","Faraday.html","",""],["Faraday::Adapter","","Faraday/Adapter.html","",""],["Faraday::Adapter::Typhoeus","","Faraday/Adapter/Typhoeus.html","","<p>Adapter to use Faraday with Typhoeus.\n<p>@example Use Typhoeus.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;faraday&#39;</span>\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;typhoeus&#39;</span>\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Rack","","Rack.html","",""],["Rack::Typhoeus","","Rack/Typhoeus.html","",""],["Rack::Typhoeus::Middleware","","Rack/Typhoeus/Middleware.html","",""],["Rack::Typhoeus::Middleware::ParamsDecoder","","Rack/Typhoeus/Middleware/ParamsDecoder.html","","<p>This Rack middleware takes care of the proper deserialization of the nested\nparams encoded by Typhoeus …\n"],["Rack::Typhoeus::Middleware::ParamsDecoder::Helper","","Rack/Typhoeus/Middleware/ParamsDecoder/Helper.html","",""],["Rails","","Rails.html","",""],["Rails::Typhoeus","","Rails/Typhoeus.html","",""],["Rails::Typhoeus::Railtie","","Rails/Typhoeus/Railtie.html","",""],["Typhoeus","","Typhoeus.html","","<p>Typhoeus is a HTTP client library based on Ethon which wraps libcurl.\nSitting on top of libcurl makes …\n"],["Typhoeus::Config","","Typhoeus/Config.html","","<p>The Typhoeus configuration used to set global options. @example Set the\nconfiguration options within …\n"],["Typhoeus::EasyFactory","","Typhoeus/EasyFactory.html","","<p>This is a Factory for easies to be used in the hydra. Before an easy is\nready to be added to a multi …\n"],["Typhoeus::Errors","","Typhoeus/Errors.html","","<p>This namespace contains all errors raised by Typhoeus.\n"],["Typhoeus::Errors::NoStub","","Typhoeus/Errors/NoStub.html","","<p>Raises when block connection is turned on and making a real request.\n"],["Typhoeus::Errors::TyphoeusError","","Typhoeus/Errors/TyphoeusError.html","","<p>Default typhoeus error class for all custom errors.\n"],["Typhoeus::Expectation","","Typhoeus/Expectation.html","","<p>This class represents an expectation. It is part of the stubbing mechanism.\nAn expectation contains a …\n"],["Typhoeus::Hydra","","Typhoeus/Hydra.html","","<p>Hydra manages making parallel HTTP requests. This is achieved by using\nlibcurls multi interface: curl.haxx.se/libcurl/c/libcurl-multi.html …\n"],["Typhoeus::Hydra::Addable","","Typhoeus/Hydra/Addable.html","","<p>This module handles the request adding on hydra.\n<p>@api private\n"],["Typhoeus::Hydra::Before","","Typhoeus/Hydra/Before.html","","<p>This module provides a way to hook into before a request gets queued in\nhydra. This is very powerful …\n"],["Typhoeus::Hydra::BlockConnection","","Typhoeus/Hydra/BlockConnection.html","","<p>This module handles the blocked connection request mode on the hydra side,\nwhere only stubbed requests …\n"],["Typhoeus::Hydra::Cacheable","","Typhoeus/Hydra/Cacheable.html","",""],["Typhoeus::Hydra::Memoizable","","Typhoeus/Hydra/Memoizable.html","","<p>This module handles the GET request memoization on the hydra side.\nMemoization needs to be turned on: …\n"],["Typhoeus::Hydra::Queueable","","Typhoeus/Hydra/Queueable.html","","<p>This module handles the request queueing on hydra.\n<p>@api private\n"],["Typhoeus::Hydra::Runnable","","Typhoeus/Hydra/Runnable.html","","<p>This module contains logic to run a hydra.\n"],["Typhoeus::Hydra::Stubbable","","Typhoeus/Hydra/Stubbable.html","","<p>This module handles stubbing on the hydra side. It plays well with the\nblock_connection configuration, …\n"],["Typhoeus::Pool","","Typhoeus/Pool.html","","<p>The easy pool stores already initialized easy handles for future use. This\nis useful because creating …\n"],["Typhoeus::Request","","Typhoeus/Request.html","","<p>This class represents a request.\n<p>@example (see #initialize)\n<p>@example Make a request with the shortcut. …\n"],["Typhoeus::Request::Actions","","Typhoeus/Request/Actions.html","","<p>Module containing logic about shortcuts to http methods. Like\n\n<pre>Typhoeus.get(&quot;www.example.com&quot;)</pre>\n"],["Typhoeus::Request::Before","","Typhoeus/Request/Before.html","","<p>This module provides a way to hook into before a request runs. This is very\npowerful and you should be …\n"],["Typhoeus::Request::BlockConnection","","Typhoeus/Request/BlockConnection.html","","<p>This module handles the blocked connection request mode on the request\nside, where only stubbed requests …\n"],["Typhoeus::Request::Cacheable","","Typhoeus/Request/Cacheable.html","",""],["Typhoeus::Request::Callbacks","","Typhoeus/Request/Callbacks.html","","<p>This module contains the logic for the response callbacks.\n<p>You can set multiple callbacks, which are then …\n"],["Typhoeus::Request::Callbacks::Types","","Typhoeus/Request/Callbacks/Types.html","",""],["Typhoeus::Request::Marshal","","Typhoeus/Request/Marshal.html","","<p>This module contains custom serializer.\n"],["Typhoeus::Request::Memoizable","","Typhoeus/Request/Memoizable.html","","<p>This module handles the GET request memoization on the request side.\nMemoization needs to be turned on: …\n"],["Typhoeus::Request::Operations","","Typhoeus/Request/Operations.html","","<p>This module contains everything what is necessary to make a single request.\n"],["Typhoeus::Request::Responseable","","Typhoeus/Request/Responseable.html","","<p>This module contains logic for having a reponse getter and setter.\n"],["Typhoeus::Request::Streamable","","Typhoeus/Request/Streamable.html","","<p>This module contians the logic for response streaming.\n"],["Typhoeus::Request::Stubbable","","Typhoeus/Request/Stubbable.html","","<p>This module handles stubbing on the request side. It plays well with the\nblock_connection configuration, …\n"],["Typhoeus::Response","","Typhoeus/Response.html","","<p>This class represents the response.\n"],["Typhoeus::Response::Cacheable","","Typhoeus/Response/Cacheable.html","",""],["Typhoeus::Response::Header","","Typhoeus/Response/Header.html","","<p>This class represents the response header. It can be accessed like a hash.\nValues can be strings (normal …\n"],["Typhoeus::Response::Informations","","Typhoeus/Response/Informations.html","","<p>This module contains logic about informations on a response.\n"],["Typhoeus::Response::Status","","Typhoeus/Response/Status.html","","<p>This module contains logic about the http status.\n"],["abort","Typhoeus::Hydra::Queueable","Typhoeus/Hydra/Queueable.html#method-i-abort","()","<p>Abort the current hydra run as good as possible. This means that it only\nclears the queued requests and …\n"],["add","Typhoeus::Hydra::Addable","Typhoeus/Hydra/Addable.html#method-i-add","(request)","<p>Adds request to multi.\n<p>@example Add request.\n\n<pre>hydra.add(request)</pre>\n"],["add","Typhoeus::Hydra::Before","Typhoeus/Hydra/Before.html#method-i-add","(request)","<p>Overrride add in order to execute callbacks in Typhoeus.before. Will break\nand return when a callback …\n"],["add","Typhoeus::Hydra::BlockConnection","Typhoeus/Hydra/BlockConnection.html#method-i-add","(request)","<p>Overrides add in order to check before if block connection is turned on. If\nthats the case a NoStub error …\n"],["add","Typhoeus::Hydra::Cacheable","Typhoeus/Hydra/Cacheable.html#method-i-add","(request)",""],["add","Typhoeus::Hydra::Memoizable","Typhoeus/Hydra/Memoizable.html#method-i-add","(request)","<p>Overrides add in order to check before if request is memoizable and already\nin memory. If thats the case, …\n"],["add","Typhoeus::Hydra::Stubbable","Typhoeus/Hydra/Stubbable.html#method-i-add","(request)","<p>Override add in order to check for matching expecations. When an expecation\nis found, super is not called. …\n"],["all","Typhoeus::Expectation","Typhoeus/Expectation.html#method-i-all","()","<p>Returns all expectations.\n<p>@example Return expectations.\n\n<pre>Typhoeus::Expectation.all</pre>\n"],["and_return","Typhoeus::Expectation","Typhoeus/Expectation.html#method-i-and_return","(response=nil, &block)","<p>Specify what should be returned, when this expectation is hit.\n<p>@example Add response.\n\n<pre>expectation.and_return(response)</pre>\n"],["app_connect_time","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-app_connect_time","()",""],["appconnect_time","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-appconnect_time","()","<p>Return the time, in seconds, it took from the start until the SSL/SSH\nconnect/handshake to the remote …\n"],["before","Typhoeus","Typhoeus.html#method-c-before","(&block)","<p>Add before callbacks.\n<p>@example Add before callback.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Typhoeus</span>.<span class=\"ruby-identifier\">before</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">request</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">p</span> <span class=\"ruby-identifier\">request</span>.<span class=\"ruby-identifier\">base_url</span> }\n</pre>\n"],["blocked?","Typhoeus::Request::BlockConnection","Typhoeus/Request/BlockConnection.html#method-i-blocked-3F","()","<p>Returns wether a request is blocked or not. Takes request.block_connection\nand Typhoeus::Config.block_connection …\n"],["body","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-body","()",""],["cache_key","Typhoeus::Request","Typhoeus/Request.html#method-i-cache_key","()","<p>Returns a cache key for use with caching methods that required a string for\na key. Will get used by  …\n"],["cache_ttl","Typhoeus::Request::Cacheable","Typhoeus/Request/Cacheable.html#method-i-cache_ttl","()",""],["cacheable?","Typhoeus::Request::Cacheable","Typhoeus/Request/Cacheable.html#method-i-cacheable-3F","()",""],["cached?","Typhoeus::Response::Cacheable","Typhoeus/Response/Cacheable.html#method-i-cached-3F","()",""],["call","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-call","(env)","<p>Hook into Faraday and perform the request with Typhoeus.\n<p>@param [ Hash ] env The environment.\n<p>@return [ …\n"],["call","Rack::Typhoeus::Middleware::ParamsDecoder","Rack/Typhoeus/Middleware/ParamsDecoder.html#method-i-call","(env)",""],["clear","Typhoeus::Expectation","Typhoeus/Expectation.html#method-i-clear","()","<p>Clears expectations. This is handy while testing, and you want to make sure\nthat you don&#39;t get canned …\n"],["clear","Typhoeus::Pool","Typhoeus/Pool.html#method-c-clear","()","<p>Clear the pool\n"],["code","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-code","()",""],["configure","Typhoeus","Typhoeus.html#method-c-configure","()","<p>Set the Typhoeus configuration options by passing a block.\n<p>@example (see Typhoeus::Config)\n<p>@yield [ Typhoeus::Config …\n"],["configure_proxy","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-configure_proxy","(req, env)",""],["configure_socket","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-configure_socket","(req, env)",""],["configure_ssl","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-configure_ssl","(req, env)",""],["configure_timeout","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-configure_timeout","(req, env)",""],["connect_time","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-connect_time","()","<p>Return the time, in seconds, it took from the start until the connect to\nthe remote host (or proxy) was …\n"],["convert","Rack::Typhoeus::Middleware::ParamsDecoder::Helper","Rack/Typhoeus/Middleware/ParamsDecoder/Helper.html#method-i-convert","(hash)","<p>If the Hash is an array encoded by typhoeus an array is returned else the\nself is returned\n<p>@param hash …\n"],["debug_info","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-debug_info","()",""],["decode","Rack::Typhoeus::Middleware::ParamsDecoder::Helper","Rack/Typhoeus/Middleware/ParamsDecoder/Helper.html#method-i-decode","(hash)",""],["decode!","Rack::Typhoeus::Middleware::ParamsDecoder::Helper","Rack/Typhoeus/Middleware/ParamsDecoder/Helper.html#method-i-decode-21","(hash)","<p>Recursively decodes Typhoeus encoded arrays in given Hash.\n<p>@param hash [Hash]. This Hash will be modified! …\n"],["decode_typhoeus_arrays","Rack::Typhoeus::Middleware::ParamsDecoder::Helper","Rack/Typhoeus/Middleware/ParamsDecoder/Helper.html#method-i-decode_typhoeus_arrays","()","<p>Recursively decodes Typhoeus encoded arrays in given Hash.\n<p>@example Use directly in a Rails controller. …\n"],["delete","Typhoeus::Request::Actions","Typhoeus/Request/Actions.html#method-i-delete","(base_url, options = {})","<p>Make a delete request.\n<p>@example Make delete request.\n\n<pre>Typhoeus.delete(&quot;www.example.com&quot;)</pre>\n"],["dequeue","Typhoeus::Hydra::Queueable","Typhoeus/Hydra/Queueable.html#method-i-dequeue","()","<p>Removes a request from queued_requests and adds it to the hydra in order to\nbe performed next.\n<p>@example …\n"],["dequeue_many","Typhoeus::Hydra::Queueable","Typhoeus/Hydra/Queueable.html#method-i-dequeue_many","()","<p>Removes requests from queued_requests and adds them to the hydra until\nmax_concurrency is reached.\n<p>@example …\n"],["easies","Typhoeus::Pool","Typhoeus/Pool.html#method-c-easies","()",""],["easy","Typhoeus::EasyFactory","Typhoeus/EasyFactory.html#method-i-easy","()","<p>Return the easy in question.\n<p>@example Return easy.\n\n<pre>easy_factory.easy</pre>\n"],["effective_url","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-effective_url","()","<p>Return the last used effective url.\n<p>@example Get effective_url.\n\n<pre>response.effective_url</pre>\n"],["encoded?","Rack::Typhoeus::Middleware::ParamsDecoder::Helper","Rack/Typhoeus/Middleware/ParamsDecoder/Helper.html#method-i-encoded-3F","(hash)","<p>Checks if Hash is an Array encoded as a Hash. Specifically will check for\nthe Hash to have this form: …\n"],["encoded_body","Typhoeus::Request","Typhoeus/Request.html#method-i-encoded_body","()","<p>Mimics libcurls POST body generation. This is not accurate, but good enough\nfor VCR.\n<p>@return [ String …\n"],["eql?","Typhoeus::Request","Typhoeus/Request.html#method-i-eql-3F","(other)","<p>Returns whether other is equal to self.\n<p>@example Are request equal?\n\n<pre>request.eql?(other_request)</pre>\n"],["execute_callbacks","Typhoeus::Request::Callbacks","Typhoeus/Request/Callbacks.html#method-i-execute_callbacks","()","<p>Execute necessary callback and yields response. This include in every case\non_complete, on_success if …\n"],["execute_headers_callbacks","Typhoeus::Request::Callbacks","Typhoeus/Request/Callbacks.html#method-i-execute_headers_callbacks","(response)","<p>Execute the headers callbacks and yields response.\n<p>@example Execute callbacks.\n\n<pre>request.execute_headers_callbacks</pre>\n"],["find_by","Typhoeus::Expectation","Typhoeus/Expectation.html#method-i-find_by","(request)","<p>@api private\n"],["finish","Typhoeus::Request::Operations","Typhoeus/Request/Operations.html#method-i-finish","(response, bypass_memoization = nil)","<p>Sets a response, the request on the response and executes the callbacks.\n<p>@param [Typhoeus::Response] response …\n"],["fuzzy_hash_eql?","Typhoeus::Request","Typhoeus/Request.html#method-i-fuzzy_hash_eql-3F","(left, right)","<p>Checks if two hashes are equal or not, discarding first-level hash order.\n<p>@param [ Hash ] left @param …\n"],["get","Typhoeus::EasyFactory","Typhoeus/EasyFactory.html#method-i-get","()","<p>Fabricated easy.\n<p>@example Prepared easy.\n\n<pre>easy_factory.get</pre>\n"],["get","Typhoeus::Pool","Typhoeus/Pool.html#method-c-get","()","<p>Return an easy from the pool.\n<p>@example Return easy.\n\n<pre>Typhoeus::Pool.get</pre>\n"],["get","Typhoeus::Request::Actions","Typhoeus/Request/Actions.html#method-i-get","(base_url, options = {})","<p>Make a get request.\n<p>@example Make get request.\n\n<pre>Typhoeus.get(&quot;www.example.com&quot;)</pre>\n"],["handled_response","Typhoeus::Response","Typhoeus/Response.html#method-i-handled_response","()","<p>Returns the handled_response if it has been defined; otherwise, returns the\nresponse\n<p>@return [ Object …\n"],["hash","Typhoeus::Request","Typhoeus/Request.html#method-i-hash","()","<p>Overrides Object#hash.\n<p>@return [ Integer ] The integer representing the request.\n<p>@api private\n"],["hashable_string_for","Typhoeus::Request","Typhoeus/Request.html#method-i-hashable_string_for","(obj)",""],["head","Typhoeus::Request::Actions","Typhoeus/Request/Actions.html#method-i-head","(base_url, options = {})","<p>Make a head request.\n<p>@example Make head request.\n\n<pre>Typhoeus.head(&quot;www.example.com&quot;)</pre>\n"],["headers","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-headers","()","<p>Returns the response header.\n<p>@example Return headers.\n\n<pre>response.headers</pre>\n"],["headers_hash","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-headers_hash","()",""],["http_version","Typhoeus::Response::Status","Typhoeus/Response/Status.html#method-i-http_version","()","<p>Return the http version.\n<p>@example Return http version.\n\n<pre>response.http_version</pre>\n"],["httpauth_avail","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-httpauth_avail","()","<p>Return the available http auth methods. Bitmask indicating the\nauthentication method(s) available.\n<p>@example …\n"],["hydra","Typhoeus::Hydra","Typhoeus/Hydra.html#method-i-hydra","()","<p>Returns a memoized hydra instance.\n<p>@example Get a hydra.\n\n<pre>Typhoeus::Hydra.hydra</pre>\n"],["marshal_dump","Typhoeus::Request::Marshal","Typhoeus/Request/Marshal.html#method-i-marshal_dump","()","<p>Return the important data needed to serialize this Request, except the\n`on_complete`, `on_success`, `on_failure`, …\n"],["marshal_load","Typhoeus::Request::Marshal","Typhoeus/Request/Marshal.html#method-i-marshal_load","(attributes)","<p>Load.\n"],["matches?","Typhoeus::Expectation","Typhoeus/Expectation.html#method-i-matches-3F","(request)","<p>Checks whether this expectation matches the provided request.\n<p>@example Check if request matches.\n\n<pre>expectation.matches? ...</pre>\n"],["memoizable?","Typhoeus::Request::Memoizable","Typhoeus/Request/Memoizable.html#method-i-memoizable-3F","()","<p>Return whether a request is memoizable.\n<p>@example Is request memoizable?\n\n<pre>request.memoizable?</pre>\n"],["memory","Typhoeus::Hydra::Memoizable","Typhoeus/Hydra/Memoizable.html#method-i-memory","()","<p>Return the memory.\n<p>@example Return the memory.\n\n<pre>hydra.memory</pre>\n"],["mock","Typhoeus::Response","Typhoeus/Response.html#method-i-mock","()","<p>Returns whether this request is mocked or not.\n<p>@api private\n"],["mock?","Typhoeus::Response","Typhoeus/Response.html#method-i-mock-3F","()",""],["modified?","Typhoeus::Response::Status","Typhoeus/Response/Status.html#method-i-modified-3F","()","<p>Return wether the response is modified.\n<p>@example Return if the response was modified.\n\n<pre>response.modified?</pre>\n"],["name_lookup_time","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-name_lookup_time","()",""],["namelookup_time","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-namelookup_time","()","<p>Return the time, in seconds, it took from the start until the name\nresolving was completed.\n<p>@example  …\n"],["new","Rack::Typhoeus::Middleware::ParamsDecoder","Rack/Typhoeus/Middleware/ParamsDecoder.html#method-c-new","(app)",""],["new","Typhoeus::EasyFactory","Typhoeus/EasyFactory.html#method-c-new","(request, hydra = nil)","<p>Create an easy factory.\n<p>@example Create easy factory.\n\n<pre>Typhoeus::Hydra::EasyFactory.new(request, hydra)</pre>\n"],["new","Typhoeus::Errors::NoStub","Typhoeus/Errors/NoStub.html#method-c-new","(request)",""],["new","Typhoeus::Expectation","Typhoeus/Expectation.html#method-c-new","(base_url, options = {})","<p>Creates an expectation.\n<p>@example Create expectation.\n\n<pre>Typhoeus::Expectation.new(base_url)</pre>\n"],["new","Typhoeus::Hydra","Typhoeus/Hydra.html#method-c-new","(options = {})","<p>Create a new hydra. All\n{rubydoc.info/github/typhoeus/ethon/Ethon/Multi#initialize-instance_method\nEthon::Multi#initialize …\n"],["new","Typhoeus::Request","Typhoeus/Request.html#method-c-new","(base_url, options = {})","<p>Creates a new request.\n<p>@example Simplest request.\n\n<pre>response = Typhoeus::Request.new(&quot;www.example.com&quot;).run</pre>\n"],["new","Typhoeus::Response","Typhoeus/Response.html#method-c-new","(options = {})","<p>Create a new response.\n<p>@example Create a response.\n\n<pre>Response.new</pre>\n"],["new","Typhoeus::Response::Header","Typhoeus/Response/Header.html#method-c-new","(raw)","<p>Create a new header.\n<p>@example Create new header.\n\n<pre>Header.new(raw)</pre>\n"],["on_body","Typhoeus::Request::Streamable","Typhoeus/Request/Streamable.html#method-i-on_body","(&block)","<p>Set on_body callback.\n<p>This callback will be called each time a portion of the body is read from\nthe socket. …\n"],["options","Typhoeus::Request::Actions","Typhoeus/Request/Actions.html#method-i-options","(base_url, options = {})","<p>Make a options request.\n<p>@example Make options request.\n\n<pre>Typhoeus.options(&quot;www.example.com&quot;)</pre>\n"],["options_match?","Typhoeus::Expectation","Typhoeus/Expectation.html#method-i-options_match-3F","(request)","<p>Check whether the options matches the request options. I checks options and\noriginal options.\n"],["parallel?","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-parallel-3F","(env)",""],["parse","Typhoeus::Response::Header","Typhoeus/Response/Header.html#method-i-parse","()","<p>Parses the raw header.\n<p>@example Parse header.\n\n<pre>header.parse</pre>\n"],["patch","Typhoeus::Request::Actions","Typhoeus/Request/Actions.html#method-i-patch","(base_url, options = {})","<p>Make a patch request.\n<p>@example Make patch request.\n\n<pre>Typhoeus.patch(&quot;www.example.com&quot;)</pre>\n"],["perform_request","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-perform_request","(env)",""],["post","Typhoeus::Request::Actions","Typhoeus/Request/Actions.html#method-i-post","(base_url, options = {})","<p>Make a post request.\n<p>@example Make post request.\n\n<pre>Typhoeus.post(&quot;www.example.com&quot;)</pre>\n"],["pretransfer_time","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-pretransfer_time","()","<p>Return the time, in seconds, it took from the start until the file transfer\nis just about to begin.  …\n"],["primary_ip","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-primary_ip","()","<p>Return the string holding the IP address of the most recent connection done\nwith this curl handle. This …\n"],["process_line","Typhoeus::Response::Header","Typhoeus/Response/Header.html#method-i-process_line","(header)","<p>Processes line and saves the result.\n<p>@return [ void ]\n"],["process_pair","Typhoeus::Response::Header","Typhoeus/Response/Header.html#method-i-process_pair","(key, value)","<p>Sets key value pair for self and @sanitized.\n<p>@return [ void ]\n"],["provide_help","Typhoeus::EasyFactory","Typhoeus/EasyFactory.html#method-i-provide_help","(option)",""],["put","Typhoeus::Request::Actions","Typhoeus/Request/Actions.html#method-i-put","(base_url, options = {})","<p>Make a put request.\n<p>@example Make put request.\n\n<pre>Typhoeus.put(&quot;www.example.com&quot;)</pre>\n"],["queue","Typhoeus::Hydra::Queueable","Typhoeus/Hydra/Queueable.html#method-i-queue","(request)","<p>Enqueues a request in order to be performed by the hydra. This can even be\ndone while the hydra is running. …\n"],["queue_front","Typhoeus::Hydra::Queueable","Typhoeus/Hydra/Queueable.html#method-i-queue_front","(request)","<p>Pushes a request to the front of the queue, to be performed by the hydra.\nAlso sets hydra on request …\n"],["queued_requests","Typhoeus::Hydra::Queueable","Typhoeus/Hydra/Queueable.html#method-i-queued_requests","()","<p>Return the queued requests.\n<p>@example Return queued requests.\n\n<pre>hydra.queued_requests</pre>\n"],["raw","Typhoeus::Response::Header","Typhoeus/Response/Header.html#method-i-raw","()","<p>Returns the raw header or empty string.\n<p>@example Return raw header.\n\n<pre>header.raw</pre>\n"],["read_body","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-read_body","(env)",""],["redirect_count","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-redirect_count","()","<p>Return the total number of redirections that were actually followed\n<p>@example Get redirect_count.\n\n<pre>response.redirect_count</pre>\n"],["redirect_time","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-redirect_time","()","<p>Return the time, in seconds, it took for all redirection steps include name\nlookup, connect, pretransfer …\n"],["redirections","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-redirections","()","<p>Return all redirections in between as multiple responses with header.\n<p>@example Return redirections.\n\n<pre>response.redirections</pre>\n"],["release","Typhoeus::Pool","Typhoeus/Pool.html#method-c-release","(easy)","<p>Releases easy into the pool. The easy handle is reset before it gets back\nin.\n<p>@example Release easy.\n\n<pre>Typhoeus::Pool.release(easy)</pre>\n"],["request","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-request","(env)",""],["request_size","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-request_size","()",""],["response","Typhoeus::Expectation","Typhoeus/Expectation.html#method-i-response","(request)","<p>Return the response. When there are multiple responses, they are returned\none by one.\n<p>@example Return …\n"],["response","Typhoeus::Request::Responseable","Typhoeus/Request/Responseable.html#method-i-response","()","<p>Return the response.\n<p>@example Return response.\n\n<pre>request.response</pre>\n"],["response=","Typhoeus::Request::Cacheable","Typhoeus/Request/Cacheable.html#method-i-response-3D","(response)",""],["response=","Typhoeus::Request::Memoizable","Typhoeus/Request/Memoizable.html#method-i-response-3D","(response)","<p>Override response setter and memoizes response if the request is\nmemoizable.\n<p>@param [ Response ] response …\n"],["response=","Typhoeus::Request::Responseable","Typhoeus/Request/Responseable.html#method-i-response-3D","(value)","<p>Set the response.\n<p>@example Set response.\n\n<pre>request.response = response</pre>\n"],["response_body","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-response_body","()","<p>Return the http response body.\n<p>@example Get response_body.\n\n<pre>response.response_body</pre>\n"],["response_code","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-response_code","()","<p>Return the last received HTTP, FTP or SMTP response code. The value will be\nzero if no server response …\n"],["response_for","Typhoeus::Expectation","Typhoeus/Expectation.html#method-i-response_for","(request)","<p>Returns stubbed response matching the provided request.\n<p>@example Find response\n\n<pre>Typhoeus::Expectation.response_for(request)</pre>\n"],["response_headers","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-response_headers","()","<p>Return the http response headers.\n<p>@example Get response_headers.\n\n<pre>response.response_headers</pre>\n"],["responses","Typhoeus::Expectation","Typhoeus/Expectation.html#method-i-responses","()","<p>Return canned responses.\n<p>@example Return responses.\n\n<pre>expectation.responses</pre>\n"],["return_code","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-return_code","()","<p>Return libcurls return value.\n<p>@example Get return_code.\n\n<pre>response.return_code</pre>\n"],["return_message","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-return_message","()","<p>Returns a string describing the return.\n<p>@example Get return_message.\n\n<pre>response.return_message</pre>\n"],["run","Typhoeus::Hydra::Memoizable","Typhoeus/Hydra/Memoizable.html#method-i-run","()","<p>Overrides run to make sure the memory is cleared after each run.\n<p>@example Run hydra.\n\n<pre>hydra.run</pre>\n"],["run","Typhoeus::Hydra::Runnable","Typhoeus/Hydra/Runnable.html#method-i-run","()","<p>Start the hydra run.\n<p>@example Start hydra run.\n\n<pre>hydra.run</pre>\n"],["run","Typhoeus::Request::Before","Typhoeus/Request/Before.html#method-i-run","()","<p>Overrride run in order to execute callbacks in Typhoeus.before. Will break\nand return when a callback …\n"],["run","Typhoeus::Request::BlockConnection","Typhoeus/Request/BlockConnection.html#method-i-run","()","<p>Overrides run in order to check before if block connection is turned on. If\nthats the case a NoStub error …\n"],["run","Typhoeus::Request::Cacheable","Typhoeus/Request/Cacheable.html#method-i-run","()",""],["run","Typhoeus::Request::Operations","Typhoeus/Request/Operations.html#method-i-run","()","<p>Run a request.\n<p>@example Run a request.\n\n<pre>Typhoeus::Request.new(&quot;www.example.com&quot;).run</pre>\n"],["run","Typhoeus::Request::Stubbable","Typhoeus/Request/Stubbable.html#method-i-run","()","<p>Override run in order to check for matching expectations. When an\nexpectation is found, super is not …\n"],["sanitize","Typhoeus::EasyFactory","Typhoeus/EasyFactory.html#method-i-sanitize","(options)",""],["sanitize_timeout!","Typhoeus::EasyFactory","Typhoeus/EasyFactory.html#method-i-sanitize_timeout-21","(options, timeout)",""],["set_callback","Typhoeus::EasyFactory","Typhoeus/EasyFactory.html#method-i-set_callback","()","<p>Sets on_complete callback on easy in order to be able to track progress.\n<p>@example Set callback.\n\n<pre>easy_factory.set_callback</pre>\n"],["set_default_proc_on","Typhoeus::Response::Header","Typhoeus/Response/Header.html#method-i-set_default_proc_on","(hash, default_proc)","<p>Sets the default proc for the specified hash independent of the Ruby\nversion.\n<p>@return [ void ]\n"],["set_defaults","Typhoeus::Request","Typhoeus/Request.html#method-i-set_defaults","()","<p>Sets default header and verbose when turned on.\n"],["set_value","Typhoeus::Response::Header","Typhoeus/Response/Header.html#method-i-set_value","(key, value, hash)","<p>Sets value for key in specified hash\n<p>@return [ void ]\n"],["setup_parallel_manager","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-c-setup_parallel_manager","(options = {})","<p>Setup Hydra with provided options.\n<p>@example Setup Hydra.\n\n<pre>Faraday::Adapter::Typhoeus.setup_parallel_manager ...</pre>\n"],["start_transfer_time","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-start_transfer_time","()",""],["starttransfer_time","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-starttransfer_time","()","<p>Return the time, in seconds, it took from the start until the first byte is\nreceived by libcurl. This …\n"],["status_message","Typhoeus::Response::Status","Typhoeus/Response/Status.html#method-i-status_message","()","<p>Return the status message if present.\n<p>@example Return status message.\n\n<pre>reesponse.status_message</pre>\n"],["streaming?","Typhoeus::Request::Streamable","Typhoeus/Request/Streamable.html#method-i-streaming-3F","()","<p>Is this request using streaming?\n<p>@return [ Boolean ] True if any on_body blocks have been set.\n"],["stub","Typhoeus","Typhoeus.html#method-c-stub","(base_url, options = {}, &block)","<p>Stub out a specific request.\n<p>@example (see Typhoeus::Expectation)\n<p>@param [ String ] base_url The url to …\n"],["stubbed_from","Typhoeus::Expectation","Typhoeus/Expectation.html#method-i-stubbed_from","(value)","<p>Set from value to mark an expectaion. Useful for other libraries, e.g.\nWebMock.\n<p>@example Mark expectation. …\n"],["success?","Typhoeus::Response::Status","Typhoeus/Response/Status.html#method-i-success-3F","()","<p>Return wether the response is a success.\n<p>@example Return if the response was successful.\n\n<pre>response.success?</pre>\n"],["time","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-time","()",""],["timed_out?","Typhoeus::Response::Status","Typhoeus/Response/Status.html#method-i-timed_out-3F","()","<p>Return whether the response is timed out.\n<p>@example Return if the response timed out.\n\n<pre>response.timed_out?</pre>\n"],["total_time","Typhoeus::Response::Informations","Typhoeus/Response/Informations.html#method-i-total_time","()","<p>Return the total time in seconds for the previous transfer, including name\nresolving, TCP connect etc. …\n"],["update_params","Rack::Typhoeus::Middleware::ParamsDecoder","Rack/Typhoeus/Middleware/ParamsDecoder.html#method-i-update_params","(req, k, v)","<p>Persist params change in environment. Extracted from:\ngithub.com/rack/rack/blob/master/lib/rack/request.rb#L243 …\n"],["url","Typhoeus::Request","Typhoeus/Request.html#method-i-url","()","<p>Return the url. In contrast to base_url which returns the value you\nspecified, url returns the full url …\n"],["url_match?","Typhoeus::Expectation","Typhoeus/Expectation.html#method-i-url_match-3F","(request_url)","<p>Check whether the base_url matches the request url. The base_url can be a\nstring, regex or nil. String …\n"],["with_connection","Typhoeus","Typhoeus.html#method-c-with_connection","()","<p>Execute given block as if block connection is turned off. The old block\nconnection state is restored …\n"],["with_easy","Typhoeus::Pool","Typhoeus/Pool.html#method-c-with_easy","(&block)","<p>Use yielded easy, will be released automatically afterwards.\n<p>@example Use easy.\n\n<pre>Typhoeus::Pool.with_easy ...</pre>\n"]]}}