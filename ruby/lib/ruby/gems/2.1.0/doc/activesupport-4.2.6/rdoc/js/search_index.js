var search_data = {"index":{"searchIndex":["activesupport","autoload","backtracecleaner","benchmarkable","cache","entry","filestore","memcachestore","localcachewithraw","memorystore","nullstore","store","strategy","localcache","localcacheregistry","localstore","middleware","cachingkeygenerator","callbacks","callback","callbackchain","callbacksequence","classmethods","conditionals","value","filters","after","around","before","end","concern","multipleincludedblocks","concurrency","latch","configurable","classmethods","configuration","dependencies","blamable","classcache","loadable","moduleconstmissing","watchstack","deprecation","behavior","deprecatedconstantproxy","deprecatedinstancevariableproxy","deprecatedobjectproxy","deprecationproxy","instancedelegator","classmethods","methodwrapper","reporting","deprecationexception","descendantstracker","duration","fileupdatechecker","gzip","stream","hashwithindifferentaccess","hashwithindifferentaccess","inflector","inflections","threadsafe","inheritableoptions","json","encoding","jsongemencoder","escapedstring","keygenerator","legacykeygenerator","logsubscriber","testhelper","mocklogger","logger","simpleformatter","messageencryptor","invalidmessage","nullserializer","messageverifier","invalidsignature","multibyte","chars","unicode","codepoint","unicodedatabase","notifications","event","fanout","subscribers","allmessages","evented","timed","instrumentationregistry","instrumenter","numberhelper","numberconverter","numbertocurrencyconverter","numbertodelimitedconverter","numbertohumanconverter","numbertohumansizeconverter","numbertopercentageconverter","numbertophoneconverter","numbertoroundedconverter","optionmerger","orderedhash","orderedoptions","perthreadregistry","proxyobject","railtie","rescuable","classmethods","safebuffer","safeconcaterror","securityutils","stringinquirer","subscriber","subscriberqueueregistry","taggedlogging","formatter","testcase","testing","assertions","constantlookup","classmethods","declarative","deprecation","isolation","forking","subprocess","setupandteardown","classmethods","simplestubs","taggedlogging","timehelpers","timewithzone","timezone","threadsafe","version","xmlconverter","disallowedtype","xmlmini","filelike","xmlmini_jdom","xmlmini_libxml","xmlmini_libxmlsax","hashbuilder","xmlmini_nokogiri","conversions","document","node","nokogiri","xml","xmlmini_nokogirisax","hashbuilder","xmlmini_rexml","array","benchmark","bigdecimal","class","date","dateandtime","calculations","zones","datetime","digest","uuid","erb","util","enumerable","falseclass","file","float","hash","i18n","railtie","integer","kernel","libxml","conversions","document","node","xml","loaderror","loggersilence","marshal","method","missingsourcefile","module","concerning","delegationerror","nameerror","nilclass","numeric","object","process","status","qualifiedconstutils","range","regexp","string","struct","symbol","thread","time","trueclass","uri","%()","+()","+()","+()","-()","-()","-()","<<()","<<()","<=>()","<=>()","<=>()","<=>()","<=>()","==()","===()","===()","=~()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","__run_callbacks__()","_dasherize()","_decrypt()","_deep_transform_keys_in_object()","_deep_transform_keys_in_object!()","_dump()","_dump_without_zone()","_encrypt()","_get()","_load()","_locals()","_original_to_s()","_parse_file()","_run_class_setup()","_stash_object_in_method()","_superclass_delegating_accessor()","accumulate_descendants()","acronym()","acts_like?()","acts_like_date?()","acts_like_date?()","acts_like_string?()","acts_like_time?()","acts_like_time?()","acts_like_time?()","add()","add_event_subscriber()","add_filter()","add_silencer()","advance()","advance()","advance()","advance()","after()","after_initialize()","ago()","ago()","ago()","ago()","ago()","alias_attribute()","alias_method_chain()","all()","all_day()","all_month()","all_quarter()","all_week()","all_year()","anonymous?()","append_features()","apply_inflections()","around()","as_json()","assert_difference()","assert_no_difference()","assert_not()","assert_nothing_raised()","assert_valid_keys()","at()","at()","at_beginning_of_day()","at_beginning_of_day()","at_beginning_of_day()","at_beginning_of_hour()","at_beginning_of_hour()","at_beginning_of_minute()","at_beginning_of_minute()","at_beginning_of_month()","at_beginning_of_quarter()","at_beginning_of_week()","at_beginning_of_year()","at_end_of_day()","at_end_of_day()","at_end_of_day()","at_end_of_hour()","at_end_of_hour()","at_end_of_minute()","at_end_of_minute()","at_end_of_month()","at_end_of_quarter()","at_end_of_week()","at_end_of_year()","at_midday()","at_midday()","at_midday()","at_middle_of_day()","at_middle_of_day()","at_middle_of_day()","at_midnight()","at_midnight()","at_midnight()","at_noon()","at_noon()","at_noon()","at_with_coercion()","atomic_write()","attach_to()","attr_internal()","attr_internal_accessor()","attr_internal_define()","attr_internal_ivar_name()","attr_internal_reader()","attr_internal_writer()","autoload()","autoload_at()","autoload_under()","autoloads()","await()","backend()","backend=()","before()","beginning_of_day()","beginning_of_day()","beginning_of_day()","beginning_of_hour()","beginning_of_hour()","beginning_of_minute()","beginning_of_minute()","beginning_of_month()","beginning_of_quarter()","beginning_of_week()","beginning_of_week()","beginning_of_week=()","beginning_of_year()","behavior()","behavior=()","benchmark()","between?()","blank?()","blank?()","blank?()","blank?()","blank?()","breakpoint()","build()","build()","build()","build_mem_cache()","bypass_local_cache()","byte()","bytes()","cached_size()","call()","call()","call()","call()","camelcase()","camelize()","camelize()","capitalize()","capture()","cast_backend_name_to_module()","cattr_accessor()","cattr_reader()","cattr_writer()","cdata_block()","change()","change()","change()","characters()","civil_from_format()","class()","class_attribute()","class_eval()","class_methods()","classify()","classify()","clean()","cleanup()","cleanup()","cleanup()","cleanup()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear!()","clone_empty()","close()","color()","compact()","compact!()","comparable_time()","compare_with_coercion()","compare_with_coercion()","compare_without_coercion()","compare_without_coercion()","compile_ext()","compile_glob()","compile_methods!()","compile_methods!()","compose()","compose()","compress()","concat()","concern()","concern()","concerning()","conditional()","conditional()","conditional()","config()","config()","config_accessor()","configure()","constantize()","constantize()","consumes?()","convert_dates_from()","convert_key()","convert_key()","convert_value()","convert_value()","current()","current()","current()","current_hash()","current_hash()","current_thread_backend()","current_thread_backend=()","dasherize()","dasherize()","database()","day()","days()","days_ago()","days_in_month()","days_since()","days_span()","days_to_week_start()","debugger()","decode()","decode()","decompose()","decompose()","decompress()","deconstantize()","deconstantize()","decrement()","decrement()","decrement()","decrement()","decrypt_and_verify()","deep_dup()","deep_dup()","deep_dup()","deep_merge()","deep_merge!()","deep_stringify_keys()","deep_stringify_keys()","deep_stringify_keys()","deep_stringify_keys!()","deep_stringify_keys!()","deep_stringify_keys!()","deep_symbolize_keys()","deep_symbolize_keys()","deep_symbolize_keys()","deep_symbolize_keys!()","deep_transform_keys()","deep_transform_keys!()","default()","default()","default_inspect()","default_inspect()","define_callbacks()","delegate()","delete()","delete()","delete()","delete_empty_directories()","delete_entry()","delete_entry()","delete_matched()","delete_matched()","delete_matched()","delete_matched()","demodulize()","demodulize()","deprecate()","deprecate_methods()","deprecated_method_warning()","deprecation_caller_message()","deprecation_message()","deprecation_warning()","descendants()","deserialize_entry()","direct_descendants()","dirname()","downcase()","downcase()","dst?()","dup()","dup()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duration()","duration_of_variable_length?()","each()","eager_autoload()","eager_load!()","eager_load!()","empty?()","enable_warnings()","encode()","encode()","encode_with()","encode_with()","encode_with()","encode_with()","encrypt_and_sign()","end_document()","end_element()","end_of_day()","end_of_day()","end_of_day()","end_of_hour()","end_of_hour()","end_of_minute()","end_of_minute()","end_of_month()","end_of_quarter()","end_of_week()","end_of_year()","ensure_cache_path()","eql?()","eql?()","eql?()","eql_with_coercion()","eql_without_coercion()","error()","escape()","escape_key()","event_stack()","exabyte()","exabytes()","except()","except!()","exclude?()","exclude?()","execute()","execute_hook()","execute_if_updated()","exist?()","expand_cache_key()","extended()","extract!()","extract_callstack()","extract_options!()","extractable_options?()","extractable_options?()","extractable_options?()","extractable_options?()","fetch()","fetch()","fetch()","fetch_multi()","fifth()","file_path_key()","filename()","filter()","filter_backtrace()","find_beginning_of_week!()","find_cached_entry()","find_tzinfo()","find_zone()","find_zone!()","finish()","finish()","finish()","finish()","first()","first_hour()","flush()","flush()","flush_all!()","foreign_key()","foreign_key()","forking_env?()","formatted_offset()","formatted_offset()","formatted_offset()","formatted_offset()","fortnight()","fortnights()","forty_two()","fourth()","freeze()","freeze()","from()","from()","from_now()","from_trusted_xml()","from_xml()","future?()","future?()","gem_version()","generate()","generate_digest()","generate_key()","generate_key()","get()","get_callbacks()","get_entry_value()","get_period_and_ensure_valid_local_time()","getgm()","getlocal()","getutc()","getutc()","gigabyte()","gigabytes()","gmt?()","gmt_offset()","gmtime()","gmtoff()","grapheme_length()","h()","h()","halted_callback_hook()","halting()","halting()","halting()","halting_and_conditional()","halting_and_conditional()","halting_and_conditional()","handle_expired_entry()","handler_for_rescue()","has_key?()","has_key?()","hash()","hash()","hour()","hours()","html_escape()","html_escape()","html_escape_interpolated_argument()","html_escape_once()","html_escape_once()","html_safe?()","html_safe?()","html_safe?()","httpdate()","human()","humanize()","humanize()","in()","in()","in()","in?()","in_char_class?()","in_groups()","in_groups_of()","in_milliseconds()","in_time_zone()","in_time_zone()","in_time_zone()","include?()","include?()","include_fallbacks_module()","include_with_range?()","included()","increment()","increment()","increment()","increment()","indent()","indent!()","index_by()","inflections()","inheritable_copy()","inherited()","init_fallbacks()","initialize_copy()","initialize_i18n()","inquiry()","inspect()","inspect()","inspect()","instance()","instance()","instance_values()","instance_variable_names()","instrument()","instrument()","instrument()","instrument()","instrument=()","instrumenter()","irregular()","is_a?()","is_missing?()","is_missing?()","is_utf8?()","isdst()","iso8601()","itself()","json_escape()","json_escape()","key?()","key?()","key?()","key_file_path()","key_matcher()","kilobyte()","kilobytes()","kind_of?()","last()","last_hour()","last_month()","last_quarter()","last_week()","last_year()","level()","limit()","listeners_for()","listening?()","load()","load_with_autoloading()","local()","local_cache()","local_cache_key()","local_log_id()","local_to_utc()","localtime()","log()","log_subscribers()","logged()","logger()","lookup_store()","many?()","marshal_dump()","marshal_load()","mattr_accessor()","mattr_reader()","mattr_writer()","max_mtime()","mb_chars()","megabyte()","megabytes()","member?()","member?()","merge()","merge()","merge!()","merge!()","method_added()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","midday()","midday()","midday()","middle_of_day()","middle_of_day()","middle_of_day()","middleware()","midnight()","midnight()","midnight()","minus_with_coercion()","minus_without_coercion()","minus_without_duration()","minute()","minutes()","missing_name()","missing_name?()","modify_value()","monday()","month()","months()","months_ago()","months_since()","ms()","multiple_of?()","mute()","name()","names()","namespaced_key()","nested_under_indifferent_access()","nested_under_indifferent_access()","nested_under_indifferent_access()","nested_under_indifferent_access()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_cipher()","new_constants()","new_from_hash_copying_default()","new_from_hash_copying_default()","next_month()","next_quarter()","next_week()","next_year()","noise()","noon()","noon()","noon()","normalize()","normalize()","now()","nsec()","number_to_currency()","number_to_delimited()","number_to_human()","number_to_human_size()","number_to_percentage()","number_to_phone()","number_to_rounded()","offset_in_seconds()","on_cdata_block()","on_characters()","on_end_document()","on_end_element()","on_load()","on_start_document()","on_start_element()","ordinal()","ordinal()","ordinalize()","ordinalize()","original_concat()","overlaps?()","pack_graphemes()","parameterize()","parameterize()","parent()","parent_name()","parent_of?()","parents()","parse()","parse_error()","past?()","past?()","path()","path()","period()","period_for_local()","period_for_utc()","petabyte()","petabytes()","plural()","pluralize()","pluralize()","pop_modules()","prepend()","prepend!()","presence()","presence_in()","present?()","prev_month()","prev_quarter()","prev_week()","prev_year()","proxy_class()","proxy_class=()","prune()","pruning?()","publish()","publish()","qualified_const_defined?()","qualified_const_get()","qualified_const_set()","quietly()","raise()","raise_if_absolute()","read()","read_entry()","read_entry()","read_multi()","read_multi()","readable_inspect()","readable_inspect()","recode_windows1252_chars()","redefine_method()","regular_update()","regular_update()","regular_writer()","regular_writer()","reject()","reject()","reject()","release()","remove()","remove!()","remove_filters!()","remove_possible_method()","remove_silencers!()","rename_key()","reorder_characters()","replace()","replace()","rescue_from()","rescue_with_handler()","reset_callbacks()","respond_to?()","respond_to_missing?()","respond_to_missing?()","respond_to_missing?()","respond_to_missing?()","respond_to_missing?()","retrieve_cache_key()","retrieve_store_class()","reverse()","reverse_merge()","reverse_merge()","reverse_merge()","reverse_merge!()","reverse_merge!()","reverse_merge!()","reverse_update()","rfc2822()","rfc822()","run()","run_callbacks()","run_in_isolation()","run_in_isolation()","run_load_hooks()","safe_concat()","safe_constantize()","safe_constantize()","safe_get()","save_block_result_to_cache()","search_dir()","second()","second()","seconds()","seconds_since_midnight()","seconds_since_midnight()","seconds_since_unix_epoch()","seconds_to_utc_offset()","seconds_until_end_of_day()","seconds_until_end_of_day()","secure_compare()","secure_compare()","select()","select()","select()","set_cache_value()","set_callback()","set_callbacks()","set_defaults()","set_defaults()","set_logger()","setup()","setup()","silence()","silence()","silence()","silence()","silence!()","silence_stream()","silence_warnings()","simple()","simple()","simple()","simple_stubs()","since()","since()","since()","since()","since()","singleton_class?()","singular()","singularize()","singularize()","skip_callback()","slice()","slice!()","slice!()","split()","split()","squish()","squish!()","start()","start()","start()","start()","start_document()","start_element()","stats()","store()","store()","store()","store_inherited()","strftime()","stringify_keys()","stringify_keys()","stringify_keys()","stringify_keys!()","stringify_keys!()","stringify_keys!()","strip_heredoc()","subclasses()","subscribe()","subscribe()","subscribed()","subscribers()","sum()","sunday()","superclass_delegating_accessor()","suppress()","swapcase()","swapcase()","swapcase_mapping()","symbolize_keys()","symbolize_keys()","symbolize_keys()","symbolize_keys!()","tableize()","tableize()","tagged()","target()","target()","target()","teardown()","teardown()","terabyte()","terabytes()","test()","test_order()","test_order=()","third()","thread_variable?()","thread_variable_get()","thread_variable_set()","thread_variables()","tidy_bytes()","tidy_bytes()","time()","time_now()","time_with_zone()","titlecase()","titlecase()","titleize()","titleize()","titleize()","to()","to()","to_a()","to_date()","to_datetime()","to_datetime()","to_default_s()","to_default_s()","to_default_s()","to_default_s()","to_default_s()","to_f()","to_f()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_hash()","to_hash()","to_i()","to_i()","to_i()","to_options()","to_options!()","to_options!()","to_options!()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_query()","to_query()","to_query()","to_r()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_sentence()","to_tag()","to_time()","to_time()","to_time()","to_xml()","to_xml()","to_yaml_type()","today()","today?()","today?()","tomorrow()","tomorrow()","tomorrow()","transfer_time_values_to_utc_constructor()","transform_keys()","transform_keys!()","transform_values()","transform_values!()","transliterate()","travel()","travel_back()","travel_to()","truncate()","truncate_words()","try()","try()","try!()","try!()","tv_sec()","uncountable()","underscore()","underscore()","unescape()","unique_id()","unpack_graphemes()","unsubscribe()","unsubscribe()","until()","upcase()","upcase()","update()","update()","updated?()","updated_at()","us_zones()","use_temporary_local_cache()","use_zone()","usec()","utc()","utc()","utc?()","utc?()","utc_offset()","utc_offset()","utc_offset()","utc_to_local()","uuid_from_hash()","uuid_v3()","uuid_v4()","uuid_v5()","validate_fallbacks()","values_at()","values_at()","verifier()","verify()","version()","wait()","wait()","warn()","warn()","warn()","warn()","watch_namespaces()","watched()","watching?()","week()","weeks()","weeks_ago()","weeks_since()","with_backend()","with_indifferent_access()","with_indifferent_access()","with_indifferent_access()","with_local_cache()","with_options()","with_warnings()","wrap()","wrap_with_time_zone()","write()","write_entry()","write_entry()","xmlschema()","xmlschema()","year()","years()","years_ago()","years_since()","yesterday()","yesterday()","yesterday()","zone()","zone()","zone=()"],"longSearchIndex":["activesupport","activesupport::autoload","activesupport::backtracecleaner","activesupport::benchmarkable","activesupport::cache","activesupport::cache::entry","activesupport::cache::filestore","activesupport::cache::memcachestore","activesupport::cache::memcachestore::localcachewithraw","activesupport::cache::memorystore","activesupport::cache::nullstore","activesupport::cache::store","activesupport::cache::strategy","activesupport::cache::strategy::localcache","activesupport::cache::strategy::localcache::localcacheregistry","activesupport::cache::strategy::localcache::localstore","activesupport::cache::strategy::localcache::middleware","activesupport::cachingkeygenerator","activesupport::callbacks","activesupport::callbacks::callback","activesupport::callbacks::callbackchain","activesupport::callbacks::callbacksequence","activesupport::callbacks::classmethods","activesupport::callbacks::conditionals","activesupport::callbacks::conditionals::value","activesupport::callbacks::filters","activesupport::callbacks::filters::after","activesupport::callbacks::filters::around","activesupport::callbacks::filters::before","activesupport::callbacks::filters::end","activesupport::concern","activesupport::concern::multipleincludedblocks","activesupport::concurrency","activesupport::concurrency::latch","activesupport::configurable","activesupport::configurable::classmethods","activesupport::configurable::configuration","activesupport::dependencies","activesupport::dependencies::blamable","activesupport::dependencies::classcache","activesupport::dependencies::loadable","activesupport::dependencies::moduleconstmissing","activesupport::dependencies::watchstack","activesupport::deprecation","activesupport::deprecation::behavior","activesupport::deprecation::deprecatedconstantproxy","activesupport::deprecation::deprecatedinstancevariableproxy","activesupport::deprecation::deprecatedobjectproxy","activesupport::deprecation::deprecationproxy","activesupport::deprecation::instancedelegator","activesupport::deprecation::instancedelegator::classmethods","activesupport::deprecation::methodwrapper","activesupport::deprecation::reporting","activesupport::deprecationexception","activesupport::descendantstracker","activesupport::duration","activesupport::fileupdatechecker","activesupport::gzip","activesupport::gzip::stream","activesupport::hashwithindifferentaccess","activesupport::hashwithindifferentaccess","activesupport::inflector","activesupport::inflector::inflections","activesupport::inflector::inflections::threadsafe","activesupport::inheritableoptions","activesupport::json","activesupport::json::encoding","activesupport::json::encoding::jsongemencoder","activesupport::json::encoding::jsongemencoder::escapedstring","activesupport::keygenerator","activesupport::legacykeygenerator","activesupport::logsubscriber","activesupport::logsubscriber::testhelper","activesupport::logsubscriber::testhelper::mocklogger","activesupport::logger","activesupport::logger::simpleformatter","activesupport::messageencryptor","activesupport::messageencryptor::invalidmessage","activesupport::messageencryptor::nullserializer","activesupport::messageverifier","activesupport::messageverifier::invalidsignature","activesupport::multibyte","activesupport::multibyte::chars","activesupport::multibyte::unicode","activesupport::multibyte::unicode::codepoint","activesupport::multibyte::unicode::unicodedatabase","activesupport::notifications","activesupport::notifications::event","activesupport::notifications::fanout","activesupport::notifications::fanout::subscribers","activesupport::notifications::fanout::subscribers::allmessages","activesupport::notifications::fanout::subscribers::evented","activesupport::notifications::fanout::subscribers::timed","activesupport::notifications::instrumentationregistry","activesupport::notifications::instrumenter","activesupport::numberhelper","activesupport::numberhelper::numberconverter","activesupport::numberhelper::numbertocurrencyconverter","activesupport::numberhelper::numbertodelimitedconverter","activesupport::numberhelper::numbertohumanconverter","activesupport::numberhelper::numbertohumansizeconverter","activesupport::numberhelper::numbertopercentageconverter","activesupport::numberhelper::numbertophoneconverter","activesupport::numberhelper::numbertoroundedconverter","activesupport::optionmerger","activesupport::orderedhash","activesupport::orderedoptions","activesupport::perthreadregistry","activesupport::proxyobject","activesupport::railtie","activesupport::rescuable","activesupport::rescuable::classmethods","activesupport::safebuffer","activesupport::safebuffer::safeconcaterror","activesupport::securityutils","activesupport::stringinquirer","activesupport::subscriber","activesupport::subscriberqueueregistry","activesupport::taggedlogging","activesupport::taggedlogging::formatter","activesupport::testcase","activesupport::testing","activesupport::testing::assertions","activesupport::testing::constantlookup","activesupport::testing::constantlookup::classmethods","activesupport::testing::declarative","activesupport::testing::deprecation","activesupport::testing::isolation","activesupport::testing::isolation::forking","activesupport::testing::isolation::subprocess","activesupport::testing::setupandteardown","activesupport::testing::setupandteardown::classmethods","activesupport::testing::simplestubs","activesupport::testing::taggedlogging","activesupport::testing::timehelpers","activesupport::timewithzone","activesupport::timezone","activesupport::timezone::threadsafe","activesupport::version","activesupport::xmlconverter","activesupport::xmlconverter::disallowedtype","activesupport::xmlmini","activesupport::xmlmini::filelike","activesupport::xmlmini_jdom","activesupport::xmlmini_libxml","activesupport::xmlmini_libxmlsax","activesupport::xmlmini_libxmlsax::hashbuilder","activesupport::xmlmini_nokogiri","activesupport::xmlmini_nokogiri::conversions","activesupport::xmlmini_nokogiri::conversions::document","activesupport::xmlmini_nokogiri::conversions::node","activesupport::xmlmini_nokogiri::nokogiri","activesupport::xmlmini_nokogiri::nokogiri::xml","activesupport::xmlmini_nokogirisax","activesupport::xmlmini_nokogirisax::hashbuilder","activesupport::xmlmini_rexml","array","benchmark","bigdecimal","class","date","dateandtime","dateandtime::calculations","dateandtime::zones","datetime","digest","digest::uuid","erb","erb::util","enumerable","falseclass","file","float","hash","i18n","i18n::railtie","integer","kernel","libxml","libxml::conversions","libxml::conversions::document","libxml::conversions::node","libxml::xml","loaderror","loggersilence","marshal","method","missingsourcefile","module","module::concerning","module::delegationerror","nameerror","nilclass","numeric","object","process","process::status","qualifiedconstutils","range","regexp","string","struct","symbol","thread","time","trueclass","uri","activesupport::safebuffer#%()","activesupport::duration#+()","activesupport::safebuffer#+()","activesupport::timewithzone#+()","activesupport::duration#-()","activesupport::timewithzone#-()","time#-()","activesupport::notifications::event#<<()","activesupport::safebuffer#<<()","activesupport::timewithzone#<=>()","activesupport::timezone#<=>()","date#<=>()","datetime#<=>()","time#<=>()","activesupport::duration#==()","activesupport::multibyte::unicode::unicodedatabase#===()","time#===()","activesupport::timezone#=~()","activesupport::dependencies::classcache#[]()","activesupport::hashwithindifferentaccess::[]()","activesupport::hashwithindifferentaccess::[]()","activesupport::orderedoptions#[]()","activesupport::safebuffer#[]()","activesupport::timezone#[]()","activesupport::hashwithindifferentaccess#[]=()","activesupport::hashwithindifferentaccess#[]=()","activesupport::orderedoptions#[]=()","activesupport::callbacks#__run_callbacks__()","activesupport::xmlmini#_dasherize()","activesupport::messageencryptor#_decrypt()","hash#_deep_transform_keys_in_object()","hash#_deep_transform_keys_in_object!()","time#_dump()","time#_dump_without_zone()","activesupport::messageencryptor#_encrypt()","activesupport::orderedoptions#_get()","time#_load()","thread#_locals()","bigdecimal#_original_to_s()","activesupport::xmlmini#_parse_file()","activesupport::testing::isolation#_run_class_setup()","class#_stash_object_in_method()","class#_superclass_delegating_accessor()","activesupport::descendantstracker#accumulate_descendants()","activesupport::inflector::inflections#acronym()","object#acts_like?()","date#acts_like_date?()","datetime#acts_like_date?()","string#acts_like_string?()","activesupport::timewithzone#acts_like_time?()","datetime#acts_like_time?()","time#acts_like_time?()","activesupport::logger#add()","activesupport::subscriber#add_event_subscriber()","activesupport::backtracecleaner#add_filter()","activesupport::backtracecleaner#add_silencer()","activesupport::timewithzone#advance()","date#advance()","datetime#advance()","time#advance()","activesupport::callbacks::callbacksequence#after()","loggersilence#after_initialize()","activesupport::duration#ago()","activesupport::timewithzone#ago()","date#ago()","datetime#ago()","time#ago()","module#alias_attribute()","module#alias_method_chain()","activesupport::timezone#all()","time#all_day()","dateandtime::calculations#all_month()","dateandtime::calculations#all_quarter()","dateandtime::calculations#all_week()","dateandtime::calculations#all_year()","module#anonymous?()","activesupport::concern#append_features()","activesupport::inflector#apply_inflections()","activesupport::callbacks::callbacksequence#around()","activesupport::timewithzone#as_json()","activesupport::testing::assertions#assert_difference()","activesupport::testing::assertions#assert_no_difference()","activesupport::testing::assertions#assert_not()","activesupport::testcase#assert_nothing_raised()","hash#assert_valid_keys()","activesupport::timezone#at()","string#at()","date#at_beginning_of_day()","datetime#at_beginning_of_day()","time#at_beginning_of_day()","datetime#at_beginning_of_hour()","time#at_beginning_of_hour()","datetime#at_beginning_of_minute()","time#at_beginning_of_minute()","dateandtime::calculations#at_beginning_of_month()","dateandtime::calculations#at_beginning_of_quarter()","dateandtime::calculations#at_beginning_of_week()","dateandtime::calculations#at_beginning_of_year()","date#at_end_of_day()","datetime#at_end_of_day()","time#at_end_of_day()","datetime#at_end_of_hour()","time#at_end_of_hour()","datetime#at_end_of_minute()","time#at_end_of_minute()","dateandtime::calculations#at_end_of_month()","dateandtime::calculations#at_end_of_quarter()","dateandtime::calculations#at_end_of_week()","dateandtime::calculations#at_end_of_year()","date#at_midday()","datetime#at_midday()","time#at_midday()","date#at_middle_of_day()","datetime#at_middle_of_day()","time#at_middle_of_day()","date#at_midnight()","datetime#at_midnight()","time#at_midnight()","date#at_noon()","datetime#at_noon()","time#at_noon()","time#at_with_coercion()","file::atomic_write()","activesupport::subscriber#attach_to()","module#attr_internal()","module#attr_internal_accessor()","module#attr_internal_define()","module#attr_internal_ivar_name()","module#attr_internal_reader()","module#attr_internal_writer()","activesupport::autoload#autoload()","activesupport::autoload#autoload_at()","activesupport::autoload#autoload_under()","activesupport::autoload#autoloads()","activesupport::concurrency::latch#await()","activesupport::xmlmini#backend()","activesupport::xmlmini#backend=()","activesupport::callbacks::callbacksequence#before()","date#beginning_of_day()","datetime#beginning_of_day()","time#beginning_of_day()","datetime#beginning_of_hour()","time#beginning_of_hour()","datetime#beginning_of_minute()","time#beginning_of_minute()","dateandtime::calculations#beginning_of_month()","dateandtime::calculations#beginning_of_quarter()","date#beginning_of_week()","dateandtime::calculations#beginning_of_week()","date#beginning_of_week=()","dateandtime::calculations#beginning_of_year()","activesupport::deprecation::behavior#behavior()","activesupport::deprecation::behavior#behavior=()","activesupport::benchmarkable#benchmark()","activesupport::timewithzone#between?()","falseclass#blank?()","nilclass#blank?()","object#blank?()","string#blank?()","trueclass#blank?()","kernel#breakpoint()","activesupport::callbacks::filters::after::build()","activesupport::callbacks::filters::around::build()","activesupport::callbacks::filters::before::build()","activesupport::cache::memcachestore::build_mem_cache()","activesupport::cache::strategy::localcache#bypass_local_cache()","numeric#byte()","numeric#bytes()","activesupport::cache::memorystore#cached_size()","activesupport::callbacks::callbacksequence#call()","activesupport::callbacks::conditionals::value#call()","activesupport::callbacks::filters::end#call()","activesupport::logger::simpleformatter#call()","string#camelcase()","activesupport::inflector#camelize()","string#camelize()","activesupport::multibyte::chars#capitalize()","kernel#capture()","activesupport::xmlmini#cast_backend_name_to_module()","module#cattr_accessor()","module#cattr_reader()","module#cattr_writer()","activesupport::xmlmini_nokogirisax::hashbuilder#cdata_block()","date#change()","datetime#change()","time#change()","activesupport::xmlmini_nokogirisax::hashbuilder#characters()","datetime::civil_from_format()","activesupport::deprecation::deprecatedconstantproxy#class()","class#class_attribute()","kernel#class_eval()","activesupport::concern#class_methods()","activesupport::inflector#classify()","string#classify()","activesupport::backtracecleaner#clean()","activesupport::cache::filestore#cleanup()","activesupport::cache::memorystore#cleanup()","activesupport::cache::nullstore#cleanup()","activesupport::cache::store#cleanup()","activesupport::cache::filestore#clear()","activesupport::cache::memcachestore#clear()","activesupport::cache::memorystore#clear()","activesupport::cache::nullstore#clear()","activesupport::cache::store#clear()","activesupport::cache::strategy::localcache::localstore#clear()","activesupport::descendantstracker#clear()","activesupport::inflector::inflections#clear()","activesupport::dependencies::classcache#clear!()","activesupport::safebuffer#clone_empty()","activesupport::gzip::stream#close()","activesupport::logsubscriber#color()","hash#compact()","hash#compact!()","activesupport::timewithzone#comparable_time()","date#compare_with_coercion()","time#compare_with_coercion()","date#compare_without_coercion()","time#compare_without_coercion()","activesupport::fileupdatechecker#compile_ext()","activesupport::fileupdatechecker#compile_glob()","activesupport::configurable::configuration#compile_methods!()","activesupport::configurable::configuration::compile_methods!()","activesupport::multibyte::chars#compose()","activesupport::multibyte::unicode#compose()","activesupport::gzip::compress()","activesupport::safebuffer#concat()","kernel#concern()","module::concerning#concern()","module::concerning#concerning()","activesupport::callbacks::filters::after::conditional()","activesupport::callbacks::filters::around::conditional()","activesupport::callbacks::filters::before::conditional()","activesupport::configurable#config()","activesupport::configurable::classmethods#config()","activesupport::configurable::classmethods#config_accessor()","activesupport::configurable::classmethods#configure()","activesupport::inflector#constantize()","string#constantize()","activesupport::multibyte::chars::consumes?()","activesupport::json#convert_dates_from()","activesupport::hashwithindifferentaccess#convert_key()","activesupport::hashwithindifferentaccess#convert_key()","activesupport::hashwithindifferentaccess#convert_value()","activesupport::hashwithindifferentaccess#convert_value()","date#current()","datetime#current()","time#current()","activesupport::xmlmini_libxmlsax::hashbuilder#current_hash()","activesupport::xmlmini_nokogirisax::hashbuilder#current_hash()","activesupport::xmlmini#current_thread_backend()","activesupport::xmlmini#current_thread_backend=()","activesupport::inflector#dasherize()","string#dasherize()","activesupport::multibyte::unicode#database()","numeric#day()","numeric#days()","dateandtime::calculations#days_ago()","time#days_in_month()","dateandtime::calculations#days_since()","dateandtime::calculations#days_span()","dateandtime::calculations#days_to_week_start()","kernel#debugger()","activesupport::json#decode()","activesupport::messageverifier#decode()","activesupport::multibyte::chars#decompose()","activesupport::multibyte::unicode#decompose()","activesupport::gzip::decompress()","activesupport::inflector#deconstantize()","string#deconstantize()","activesupport::cache::filestore#decrement()","activesupport::cache::memorystore#decrement()","activesupport::cache::nullstore#decrement()","activesupport::cache::store#decrement()","activesupport::messageencryptor#decrypt_and_verify()","array#deep_dup()","hash#deep_dup()","object#deep_dup()","hash#deep_merge()","hash#deep_merge!()","activesupport::hashwithindifferentaccess#deep_stringify_keys()","activesupport::hashwithindifferentaccess#deep_stringify_keys()","hash#deep_stringify_keys()","activesupport::hashwithindifferentaccess#deep_stringify_keys!()","activesupport::hashwithindifferentaccess#deep_stringify_keys!()","hash#deep_stringify_keys!()","activesupport::hashwithindifferentaccess#deep_symbolize_keys()","activesupport::hashwithindifferentaccess#deep_symbolize_keys()","hash#deep_symbolize_keys()","hash#deep_symbolize_keys!()","hash#deep_transform_keys()","hash#deep_transform_keys!()","activesupport::hashwithindifferentaccess#default()","activesupport::hashwithindifferentaccess#default()","date#default_inspect()","datetime#default_inspect()","activesupport::callbacks::classmethods#define_callbacks()","module#delegate()","activesupport::cache::store#delete()","activesupport::hashwithindifferentaccess#delete()","activesupport::hashwithindifferentaccess#delete()","activesupport::cache::filestore#delete_empty_directories()","activesupport::cache::filestore#delete_entry()","activesupport::cache::strategy::localcache::localstore#delete_entry()","activesupport::cache::filestore#delete_matched()","activesupport::cache::memorystore#delete_matched()","activesupport::cache::nullstore#delete_matched()","activesupport::cache::store#delete_matched()","activesupport::inflector#demodulize()","string#demodulize()","module#deprecate()","activesupport::deprecation::methodwrapper#deprecate_methods()","activesupport::deprecation::reporting#deprecated_method_warning()","activesupport::deprecation::reporting#deprecation_caller_message()","activesupport::deprecation::reporting#deprecation_message()","activesupport::deprecation::reporting#deprecation_warning()","activesupport::descendantstracker#descendants()","activesupport::cache::memcachestore#deserialize_entry()","activesupport::descendantstracker#direct_descendants()","activesupport::multibyte::unicode::unicodedatabase::dirname()","activesupport::multibyte::chars#downcase()","activesupport::multibyte::unicode#downcase()","activesupport::timewithzone#dst?()","activesupport::hashwithindifferentaccess#dup()","activesupport::hashwithindifferentaccess#dup()","bigdecimal#duplicable?()","falseclass#duplicable?()","method#duplicable?()","nilclass#duplicable?()","numeric#duplicable?()","object#duplicable?()","symbol#duplicable?()","trueclass#duplicable?()","activesupport::notifications::event#duration()","activesupport::timewithzone#duration_of_variable_length?()","activesupport::dependencies::watchstack#each()","activesupport::autoload#eager_autoload()","activesupport::eager_load!()","activesupport::autoload#eager_load!()","activesupport::dependencies::classcache#empty?()","kernel#enable_warnings()","activesupport::json::encode()","activesupport::messageverifier#encode()","activesupport::orderedhash#encode_with()","activesupport::safebuffer#encode_with()","activesupport::timewithzone#encode_with()","bigdecimal#encode_with()","activesupport::messageencryptor#encrypt_and_sign()","activesupport::xmlmini_nokogirisax::hashbuilder#end_document()","activesupport::xmlmini_nokogirisax::hashbuilder#end_element()","date#end_of_day()","datetime#end_of_day()","time#end_of_day()","datetime#end_of_hour()","time#end_of_hour()","datetime#end_of_minute()","time#end_of_minute()","dateandtime::calculations#end_of_month()","dateandtime::calculations#end_of_quarter()","dateandtime::calculations#end_of_week()","dateandtime::calculations#end_of_year()","activesupport::cache::filestore#ensure_cache_path()","activesupport::duration#eql?()","activesupport::timewithzone#eql?()","time#eql?()","time#eql_with_coercion()","time#eql_without_coercion()","activesupport::xmlmini_nokogirisax::hashbuilder#error()","activesupport::fileupdatechecker#escape()","activesupport::cache::memcachestore#escape_key()","activesupport::subscriber#event_stack()","numeric#exabyte()","numeric#exabytes()","hash#except()","hash#except!()","enumerable#exclude?()","string#exclude?()","activesupport::fileupdatechecker#execute()","activesupport::execute_hook()","activesupport::fileupdatechecker#execute_if_updated()","activesupport::cache::store#exist?()","activesupport::cache#expand_cache_key()","activesupport::perthreadregistry::extended()","hash#extract!()","activesupport::deprecation::reporting#extract_callstack()","array#extract_options!()","activesupport::hashwithindifferentaccess#extractable_options?()","activesupport::hashwithindifferentaccess#extractable_options?()","activesupport::orderedhash#extractable_options?()","hash#extractable_options?()","activesupport::cache::store#fetch()","activesupport::hashwithindifferentaccess#fetch()","activesupport::hashwithindifferentaccess#fetch()","activesupport::cache::store#fetch_multi()","array#fifth()","activesupport::cache::filestore#file_path_key()","activesupport::multibyte::unicode::unicodedatabase::filename()","activesupport::backtracecleaner#filter()","activesupport::backtracecleaner#filter_backtrace()","date#find_beginning_of_week!()","activesupport::cache::store#find_cached_entry()","activesupport::timezone#find_tzinfo()","time#find_zone()","time#find_zone!()","activesupport::logsubscriber#finish()","activesupport::notifications::fanout#finish()","activesupport::notifications::instrumenter#finish()","activesupport::subscriber#finish()","string#first()","dateandtime::calculations#first_hour()","activesupport::logsubscriber::testhelper::mocklogger#flush()","activesupport::taggedlogging#flush()","activesupport::logsubscriber#flush_all!()","activesupport::inflector#foreign_key()","string#foreign_key()","activesupport::testing::isolation::forking_env?()","activesupport::timewithzone#formatted_offset()","activesupport::timezone#formatted_offset()","datetime#formatted_offset()","time#formatted_offset()","numeric#fortnight()","numeric#fortnights()","array#forty_two()","array#fourth()","activesupport::timewithzone#freeze()","thread#freeze()","array#from()","string#from()","activesupport::duration#from_now()","hash#from_trusted_xml()","hash#from_xml()","activesupport::timewithzone#future?()","dateandtime::calculations#future?()","activesupport::gem_version()","activesupport::messageverifier#generate()","activesupport::messageverifier#generate_digest()","activesupport::cachingkeygenerator#generate_key()","activesupport::keygenerator#generate_key()","activesupport::dependencies::classcache#get()","activesupport::callbacks::classmethods#get_callbacks()","activesupport::cache::store#get_entry_value()","activesupport::timewithzone#get_period_and_ensure_valid_local_time()","activesupport::timewithzone#getgm()","activesupport::timewithzone#getlocal()","activesupport::timewithzone#getutc()","datetime#getutc()","numeric#gigabyte()","numeric#gigabytes()","activesupport::timewithzone#gmt?()","activesupport::timewithzone#gmt_offset()","activesupport::timewithzone#gmtime()","activesupport::timewithzone#gmtoff()","activesupport::multibyte::chars#grapheme_length()","erb::util#h()","erb::util::h()","activesupport::callbacks#halted_callback_hook()","activesupport::callbacks::filters::after::halting()","activesupport::callbacks::filters::around::halting()","activesupport::callbacks::filters::before::halting()","activesupport::callbacks::filters::after::halting_and_conditional()","activesupport::callbacks::filters::around::halting_and_conditional()","activesupport::callbacks::filters::before::halting_and_conditional()","activesupport::cache::store#handle_expired_entry()","activesupport::rescuable#handler_for_rescue()","activesupport::hashwithindifferentaccess#has_key?()","activesupport::hashwithindifferentaccess#has_key?()","activesupport::duration#hash()","activesupport::timewithzone#hash()","numeric#hour()","numeric#hours()","erb::util::html_escape()","erb::util#html_escape()","activesupport::safebuffer#html_escape_interpolated_argument()","erb::util#html_escape_once()","erb::util::html_escape_once()","activesupport::safebuffer#html_safe?()","numeric#html_safe?()","object#html_safe?()","activesupport::timewithzone#httpdate()","activesupport::inflector::inflections#human()","activesupport::inflector#humanize()","string#humanize()","date#in()","datetime#in()","time#in()","object#in?()","activesupport::multibyte::unicode#in_char_class?()","array#in_groups()","array#in_groups_of()","numeric#in_milliseconds()","activesupport::timewithzone#in_time_zone()","dateandtime::zones#in_time_zone()","string#in_time_zone()","activesupport::hashwithindifferentaccess#include?()","activesupport::hashwithindifferentaccess#include?()","i18n::railtie::include_fallbacks_module()","range#include_with_range?()","activesupport::concern#included()","activesupport::cache::filestore#increment()","activesupport::cache::memorystore#increment()","activesupport::cache::nullstore#increment()","activesupport::cache::store#increment()","string#indent()","string#indent!()","enumerable#index_by()","activesupport::inflector#inflections()","activesupport::inheritableoptions#inheritable_copy()","activesupport::descendantstracker#inherited()","i18n::railtie::init_fallbacks()","activesupport::safebuffer#initialize_copy()","i18n::railtie::initialize_i18n()","string#inquiry()","activesupport::timewithzone#inspect()","date#inspect()","datetime#inspect()","activesupport::inflector::inflections::instance()","activesupport::perthreadregistry#instance()","object#instance_values()","object#instance_variable_names()","activesupport::cache::store#instrument()","activesupport::cache::store::instrument()","activesupport::notifications#instrument()","activesupport::notifications::instrumenter#instrument()","activesupport::cache::store::instrument=()","activesupport::notifications#instrumenter()","activesupport::inflector::inflections#irregular()","activesupport::timewithzone#is_a?()","loaderror#is_missing?()","loaderror#is_missing?()","string#is_utf8?()","activesupport::timewithzone#isdst()","activesupport::timewithzone#iso8601()","object#itself()","erb::util#json_escape()","erb::util::json_escape()","activesupport::dependencies::classcache#key?()","activesupport::hashwithindifferentaccess#key?()","activesupport::hashwithindifferentaccess#key?()","activesupport::cache::filestore#key_file_path()","activesupport::cache::store#key_matcher()","numeric#kilobyte()","numeric#kilobytes()","activesupport::timewithzone#kind_of?()","string#last()","dateandtime::calculations#last_hour()","dateandtime::calculations#last_month()","dateandtime::calculations#last_quarter()","dateandtime::calculations#last_week()","dateandtime::calculations#last_year()","loggersilence#level()","activesupport::multibyte::chars#limit()","activesupport::notifications::fanout#listeners_for()","activesupport::notifications::fanout#listening?()","activesupport::multibyte::unicode::unicodedatabase#load()","marshal#load_with_autoloading()","activesupport::timezone#local()","activesupport::cache::strategy::localcache#local_cache()","activesupport::cache::strategy::localcache#local_cache_key()","loggersilence#local_log_id()","activesupport::timezone#local_to_utc()","activesupport::timewithzone#localtime()","activesupport::cache::store#log()","activesupport::logsubscriber#log_subscribers()","activesupport::logsubscriber::testhelper::mocklogger#logged()","activesupport::logsubscriber#logger()","activesupport::cache#lookup_store()","enumerable#many?()","activesupport::timewithzone#marshal_dump()","activesupport::timewithzone#marshal_load()","module#mattr_accessor()","module#mattr_reader()","module#mattr_writer()","activesupport::fileupdatechecker#max_mtime()","string#mb_chars()","numeric#megabyte()","numeric#megabytes()","activesupport::hashwithindifferentaccess#member?()","activesupport::hashwithindifferentaccess#member?()","activesupport::hashwithindifferentaccess#merge()","activesupport::hashwithindifferentaccess#merge()","activesupport::hashwithindifferentaccess#merge!()","activesupport::hashwithindifferentaccess#merge!()","activesupport::subscriber#method_added()","activesupport::logsubscriber::testhelper::mocklogger#method_missing()","activesupport::multibyte::chars#method_missing()","activesupport::orderedoptions#method_missing()","activesupport::stringinquirer#method_missing()","activesupport::timewithzone#method_missing()","date#midday()","datetime#midday()","time#midday()","date#middle_of_day()","datetime#middle_of_day()","time#middle_of_day()","activesupport::cache::strategy::localcache#middleware()","date#midnight()","datetime#midnight()","time#midnight()","time#minus_with_coercion()","time#minus_without_coercion()","time#minus_without_duration()","numeric#minute()","numeric#minutes()","nameerror#missing_name()","nameerror#missing_name?()","activesupport::cache::filestore#modify_value()","dateandtime::calculations#monday()","integer#month()","integer#months()","dateandtime::calculations#months_ago()","dateandtime::calculations#months_since()","benchmark#ms()","integer#multiple_of?()","activesupport::cache::store#mute()","activesupport::timewithzone::name()","qualifiedconstutils::names()","activesupport::cache::store#namespaced_key()","activesupport::hashwithindifferentaccess#nested_under_indifferent_access()","activesupport::hashwithindifferentaccess#nested_under_indifferent_access()","activesupport::orderedhash#nested_under_indifferent_access()","hash#nested_under_indifferent_access()","activesupport::backtracecleaner::new()","activesupport::cache::filestore::new()","activesupport::cache::memcachestore::new()","activesupport::cache::memorystore::new()","activesupport::cache::nullstore::new()","activesupport::cache::store::new()","activesupport::cache::strategy::localcache::localstore::new()","activesupport::cachingkeygenerator::new()","activesupport::callbacks::callbacksequence::new()","activesupport::callbacks::conditionals::value::new()","activesupport::concurrency::latch::new()","activesupport::dependencies::classcache::new()","activesupport::dependencies::watchstack::new()","activesupport::deprecation::new()","activesupport::deprecation::deprecatedconstantproxy::new()","activesupport::deprecation::deprecatedinstancevariableproxy::new()","activesupport::deprecation::deprecatedobjectproxy::new()","activesupport::fileupdatechecker::new()","activesupport::gzip::stream::new()","activesupport::hashwithindifferentaccess::new()","activesupport::hashwithindifferentaccess::new()","activesupport::inflector::inflections::new()","activesupport::inheritableoptions::new()","activesupport::keygenerator::new()","activesupport::logsubscriber::testhelper::mocklogger::new()","activesupport::logger::new()","activesupport::messageencryptor::new()","activesupport::messageverifier::new()","activesupport::multibyte::chars::new()","activesupport::multibyte::unicode::codepoint::new()","activesupport::multibyte::unicode::unicodedatabase::new()","activesupport::notifications::event::new()","activesupport::notifications::fanout::new()","activesupport::notifications::instrumenter::new()","activesupport::safebuffer::new()","activesupport::safebuffer::safeconcaterror::new()","activesupport::subscriber::new()","activesupport::taggedlogging::new()","activesupport::timewithzone::new()","activesupport::timezone#new()","activesupport::timezone::new()","activesupport::xmlconverter::disallowedtype::new()","activesupport::messageencryptor#new_cipher()","activesupport::dependencies::watchstack#new_constants()","activesupport::hashwithindifferentaccess::new_from_hash_copying_default()","activesupport::hashwithindifferentaccess::new_from_hash_copying_default()","dateandtime::calculations#next_month()","dateandtime::calculations#next_quarter()","dateandtime::calculations#next_week()","dateandtime::calculations#next_year()","activesupport::backtracecleaner#noise()","date#noon()","datetime#noon()","time#noon()","activesupport::multibyte::chars#normalize()","activesupport::multibyte::unicode#normalize()","activesupport::timezone#now()","datetime#nsec()","activesupport::numberhelper#number_to_currency()","activesupport::numberhelper#number_to_delimited()","activesupport::numberhelper#number_to_human()","activesupport::numberhelper#number_to_human_size()","activesupport::numberhelper#number_to_percentage()","activesupport::numberhelper#number_to_phone()","activesupport::numberhelper#number_to_rounded()","datetime#offset_in_seconds()","activesupport::xmlmini_libxmlsax::hashbuilder#on_cdata_block()","activesupport::xmlmini_libxmlsax::hashbuilder#on_characters()","activesupport::xmlmini_libxmlsax::hashbuilder#on_end_document()","activesupport::xmlmini_libxmlsax::hashbuilder#on_end_element()","activesupport::on_load()","activesupport::xmlmini_libxmlsax::hashbuilder#on_start_document()","activesupport::xmlmini_libxmlsax::hashbuilder#on_start_element()","activesupport::inflector#ordinal()","integer#ordinal()","activesupport::inflector#ordinalize()","integer#ordinalize()","activesupport::safebuffer#original_concat()","range#overlaps?()","activesupport::multibyte::unicode#pack_graphemes()","activesupport::inflector#parameterize()","string#parameterize()","module#parent()","module#parent_name()","activesupport::notifications::event#parent_of?()","module#parents()","activesupport::timezone#parse()","activesupport::json#parse_error()","activesupport::timewithzone#past?()","dateandtime::calculations#past?()","loaderror#path()","loaderror#path()","activesupport::timewithzone#period()","activesupport::timezone#period_for_local()","activesupport::timezone#period_for_utc()","numeric#petabyte()","numeric#petabytes()","activesupport::inflector::inflections#plural()","activesupport::inflector#pluralize()","string#pluralize()","activesupport::dependencies::watchstack#pop_modules()","activesupport::safebuffer#prepend()","activesupport::safebuffer#prepend!()","object#presence()","object#presence_in()","object#present?()","dateandtime::calculations#prev_month()","dateandtime::calculations#prev_quarter()","dateandtime::calculations#prev_week()","dateandtime::calculations#prev_year()","activesupport::multibyte::proxy_class()","activesupport::multibyte::proxy_class=()","activesupport::cache::memorystore#prune()","activesupport::cache::memorystore#pruning?()","activesupport::notifications#publish()","activesupport::notifications::fanout#publish()","module#qualified_const_defined?()","module#qualified_const_get()","module#qualified_const_set()","kernel#quietly()","activesupport::proxyobject#raise()","qualifiedconstutils::raise_if_absolute()","activesupport::cache::store#read()","activesupport::cache::filestore#read_entry()","activesupport::cache::strategy::localcache::localstore#read_entry()","activesupport::cache::memcachestore#read_multi()","activesupport::cache::store#read_multi()","date#readable_inspect()","datetime#readable_inspect()","activesupport::multibyte::unicode#recode_windows1252_chars()","module#redefine_method()","activesupport::hashwithindifferentaccess#regular_update()","activesupport::hashwithindifferentaccess#regular_update()","activesupport::hashwithindifferentaccess#regular_writer()","activesupport::hashwithindifferentaccess#regular_writer()","activesupport::hashwithindifferentaccess#reject()","activesupport::hashwithindifferentaccess#reject()","activesupport::orderedhash#reject()","activesupport::concurrency::latch#release()","string#remove()","string#remove!()","activesupport::backtracecleaner#remove_filters!()","module#remove_possible_method()","activesupport::backtracecleaner#remove_silencers!()","activesupport::xmlmini#rename_key()","activesupport::multibyte::unicode#reorder_characters()","activesupport::hashwithindifferentaccess#replace()","activesupport::hashwithindifferentaccess#replace()","activesupport::rescuable::classmethods#rescue_from()","activesupport::rescuable#rescue_with_handler()","activesupport::callbacks::classmethods#reset_callbacks()","activesupport::timewithzone#respond_to?()","activesupport::duration#respond_to_missing?()","activesupport::multibyte::chars#respond_to_missing?()","activesupport::orderedoptions#respond_to_missing?()","activesupport::stringinquirer#respond_to_missing?()","activesupport::timewithzone#respond_to_missing?()","activesupport::cache#retrieve_cache_key()","activesupport::cache#retrieve_store_class()","activesupport::multibyte::chars#reverse()","activesupport::hashwithindifferentaccess#reverse_merge()","activesupport::hashwithindifferentaccess#reverse_merge()","hash#reverse_merge()","activesupport::hashwithindifferentaccess#reverse_merge!()","activesupport::hashwithindifferentaccess#reverse_merge!()","hash#reverse_merge!()","hash#reverse_update()","activesupport::timewithzone#rfc2822()","activesupport::timewithzone#rfc822()","activesupport::testing::isolation#run()","activesupport::callbacks#run_callbacks()","activesupport::testing::isolation::forking#run_in_isolation()","activesupport::testing::isolation::subprocess#run_in_isolation()","activesupport::run_load_hooks()","activesupport::safebuffer#safe_concat()","activesupport::inflector#safe_constantize()","string#safe_constantize()","activesupport::dependencies::classcache#safe_get()","activesupport::cache::store#save_block_result_to_cache()","activesupport::cache::filestore#search_dir()","array#second()","numeric#second()","numeric#seconds()","datetime#seconds_since_midnight()","time#seconds_since_midnight()","datetime#seconds_since_unix_epoch()","activesupport::timezone#seconds_to_utc_offset()","datetime#seconds_until_end_of_day()","time#seconds_until_end_of_day()","activesupport::securityutils::secure_compare()","activesupport::securityutils#secure_compare()","activesupport::hashwithindifferentaccess#select()","activesupport::hashwithindifferentaccess#select()","activesupport::orderedhash#select()","activesupport::cache::strategy::localcache#set_cache_value()","activesupport::callbacks::classmethods#set_callback()","activesupport::callbacks::classmethods#set_callbacks()","activesupport::hashwithindifferentaccess#set_defaults()","activesupport::hashwithindifferentaccess#set_defaults()","activesupport::logsubscriber::testhelper#set_logger()","activesupport::logsubscriber::testhelper#setup()","activesupport::testing::setupandteardown::classmethods#setup()","activesupport::backtracecleaner#silence()","activesupport::deprecation::reporting#silence()","kernel#silence()","loggersilence#silence()","activesupport::cache::store#silence!()","kernel#silence_stream()","kernel#silence_warnings()","activesupport::callbacks::filters::after::simple()","activesupport::callbacks::filters::around::simple()","activesupport::callbacks::filters::before::simple()","activesupport::testing::timehelpers#simple_stubs()","activesupport::duration#since()","activesupport::timewithzone#since()","date#since()","datetime#since()","time#since()","class#singleton_class?()","activesupport::inflector::inflections#singular()","activesupport::inflector#singularize()","string#singularize()","activesupport::callbacks::classmethods#skip_callback()","hash#slice()","activesupport::multibyte::chars#slice!()","hash#slice!()","activesupport::multibyte::chars#split()","array#split()","string#squish()","string#squish!()","activesupport::logsubscriber#start()","activesupport::notifications::fanout#start()","activesupport::notifications::instrumenter#start()","activesupport::subscriber#start()","activesupport::xmlmini_nokogirisax::hashbuilder#start_document()","activesupport::xmlmini_nokogirisax::hashbuilder#start_element()","activesupport::cache::memcachestore#stats()","activesupport::dependencies::classcache#store()","activesupport::hashwithindifferentaccess#store()","activesupport::hashwithindifferentaccess#store()","activesupport::descendantstracker#store_inherited()","activesupport::timewithzone#strftime()","activesupport::hashwithindifferentaccess#stringify_keys()","activesupport::hashwithindifferentaccess#stringify_keys()","hash#stringify_keys()","activesupport::hashwithindifferentaccess#stringify_keys!()","activesupport::hashwithindifferentaccess#stringify_keys!()","hash#stringify_keys!()","string#strip_heredoc()","class#subclasses()","activesupport::notifications#subscribe()","activesupport::notifications::fanout#subscribe()","activesupport::notifications#subscribed()","activesupport::subscriber#subscribers()","enumerable#sum()","dateandtime::calculations#sunday()","class#superclass_delegating_accessor()","kernel#suppress()","activesupport::multibyte::chars#swapcase()","activesupport::multibyte::unicode#swapcase()","activesupport::multibyte::unicode::codepoint#swapcase_mapping()","activesupport::hashwithindifferentaccess#symbolize_keys()","activesupport::hashwithindifferentaccess#symbolize_keys()","hash#symbolize_keys()","hash#symbolize_keys!()","activesupport::inflector#tableize()","string#tableize()","activesupport::taggedlogging#tagged()","activesupport::deprecation::deprecatedconstantproxy#target()","activesupport::deprecation::deprecatedinstancevariableproxy#target()","activesupport::deprecation::deprecatedobjectproxy#target()","activesupport::logsubscriber::testhelper#teardown()","activesupport::testing::setupandteardown::classmethods#teardown()","numeric#terabyte()","numeric#terabytes()","activesupport::testing::declarative#test()","activesupport::testcase#test_order()","activesupport::testcase#test_order=()","array#third()","thread#thread_variable?()","thread#thread_variable_get()","thread#thread_variable_set()","thread#thread_variables()","activesupport::multibyte::chars#tidy_bytes()","activesupport::multibyte::unicode#tidy_bytes()","activesupport::timewithzone#time()","activesupport::timezone#time_now()","dateandtime::zones#time_with_zone()","activesupport::multibyte::chars#titlecase()","string#titlecase()","activesupport::inflector#titleize()","activesupport::multibyte::chars#titleize()","string#titleize()","array#to()","string#to()","activesupport::timewithzone#to_a()","string#to_date()","activesupport::timewithzone#to_datetime()","string#to_datetime()","array#to_default_s()","date#to_default_s()","datetime#to_default_s()","range#to_default_s()","time#to_default_s()","activesupport::timewithzone#to_f()","datetime#to_f()","activesupport::timewithzone#to_formatted_s()","array#to_formatted_s()","bigdecimal#to_formatted_s()","date#to_formatted_s()","datetime#to_formatted_s()","numeric#to_formatted_s()","range#to_formatted_s()","time#to_formatted_s()","activesupport::hashwithindifferentaccess#to_hash()","activesupport::hashwithindifferentaccess#to_hash()","activesupport::duration#to_i()","activesupport::timewithzone#to_i()","datetime#to_i()","hash#to_options()","activesupport::hashwithindifferentaccess#to_options!()","activesupport::hashwithindifferentaccess#to_options!()","hash#to_options!()","activesupport::safebuffer#to_param()","array#to_param()","falseclass#to_param()","hash#to_param()","nilclass#to_param()","object#to_param()","trueclass#to_param()","array#to_query()","hash#to_query()","object#to_query()","activesupport::timewithzone#to_r()","activesupport::duration#to_s()","activesupport::safebuffer#to_s()","activesupport::timewithzone#to_s()","activesupport::timezone#to_s()","array#to_s()","bigdecimal#to_s()","date#to_s()","datetime#to_s()","range#to_s()","time#to_s()","array#to_sentence()","activesupport::xmlmini#to_tag()","activesupport::timewithzone#to_time()","date#to_time()","string#to_time()","array#to_xml()","hash#to_xml()","activesupport::orderedhash#to_yaml_type()","activesupport::timezone#today()","activesupport::timewithzone#today?()","dateandtime::calculations#today?()","activesupport::timezone#tomorrow()","date#tomorrow()","dateandtime::calculations#tomorrow()","activesupport::timewithzone#transfer_time_values_to_utc_constructor()","hash#transform_keys()","hash#transform_keys!()","hash#transform_values()","hash#transform_values!()","activesupport::inflector#transliterate()","activesupport::testing::timehelpers#travel()","activesupport::testing::timehelpers#travel_back()","activesupport::testing::timehelpers#travel_to()","string#truncate()","string#truncate_words()","nilclass#try()","object#try()","nilclass#try!()","object#try!()","activesupport::timewithzone#tv_sec()","activesupport::inflector::inflections#uncountable()","activesupport::inflector#underscore()","string#underscore()","object#unescape()","activesupport::notifications::instrumenter#unique_id()","activesupport::multibyte::unicode#unpack_graphemes()","activesupport::notifications#unsubscribe()","activesupport::notifications::fanout#unsubscribe()","activesupport::duration#until()","activesupport::multibyte::chars#upcase()","activesupport::multibyte::unicode#upcase()","activesupport::hashwithindifferentaccess#update()","activesupport::hashwithindifferentaccess#update()","activesupport::fileupdatechecker#updated?()","activesupport::fileupdatechecker#updated_at()","activesupport::timezone#us_zones()","activesupport::cache::strategy::localcache#use_temporary_local_cache()","time#use_zone()","datetime#usec()","activesupport::timewithzone#utc()","datetime#utc()","activesupport::timewithzone#utc?()","datetime#utc?()","activesupport::timewithzone#utc_offset()","activesupport::timezone#utc_offset()","datetime#utc_offset()","activesupport::timezone#utc_to_local()","digest::uuid::uuid_from_hash()","digest::uuid::uuid_v3()","digest::uuid::uuid_v4()","digest::uuid::uuid_v5()","i18n::railtie::validate_fallbacks()","activesupport::hashwithindifferentaccess#values_at()","activesupport::hashwithindifferentaccess#values_at()","activesupport::messageencryptor#verifier()","activesupport::messageverifier#verify()","activesupport::version()","activesupport::logsubscriber::testhelper#wait()","activesupport::notifications::fanout#wait()","activesupport::deprecation::deprecatedconstantproxy#warn()","activesupport::deprecation::deprecatedinstancevariableproxy#warn()","activesupport::deprecation::deprecatedobjectproxy#warn()","activesupport::deprecation::reporting#warn()","activesupport::dependencies::watchstack#watch_namespaces()","activesupport::fileupdatechecker#watched()","activesupport::dependencies::watchstack#watching?()","numeric#week()","numeric#weeks()","dateandtime::calculations#weeks_ago()","dateandtime::calculations#weeks_since()","activesupport::xmlmini#with_backend()","activesupport::hashwithindifferentaccess#with_indifferent_access()","activesupport::hashwithindifferentaccess#with_indifferent_access()","hash#with_indifferent_access()","activesupport::cache::strategy::localcache#with_local_cache()","object#with_options()","kernel#with_warnings()","array::wrap()","activesupport::timewithzone#wrap_with_time_zone()","activesupport::cache::store#write()","activesupport::cache::filestore#write_entry()","activesupport::cache::strategy::localcache::localstore#write_entry()","activesupport::timewithzone#xmlschema()","date#xmlschema()","integer#year()","integer#years()","dateandtime::calculations#years_ago()","dateandtime::calculations#years_since()","activesupport::timezone#yesterday()","date#yesterday()","dateandtime::calculations#yesterday()","activesupport::timewithzone#zone()","time#zone()","time#zone=()"],"info":[["ActiveSupport","","ActiveSupport.html","",""],["ActiveSupport::Autoload","","ActiveSupport/Autoload.html","","<p>Autoload and eager load conveniences for your library.\n<p>This module allows you to define autoloads based …\n"],["ActiveSupport::BacktraceCleaner","","ActiveSupport/BacktraceCleaner.html","","<p>Backtraces often include many lines that are not relevant for the context\nunder review. This makes it …\n"],["ActiveSupport::Benchmarkable","","ActiveSupport/Benchmarkable.html","",""],["ActiveSupport::Cache","","ActiveSupport/Cache.html","","<p>See ActiveSupport::Cache::Store for documentation.\n"],["ActiveSupport::Cache::Entry","","ActiveSupport/Cache/Entry.html","",""],["ActiveSupport::Cache::FileStore","","ActiveSupport/Cache/FileStore.html","","<p>A cache store implementation which stores everything on the filesystem.\n<p>FileStore implements the Strategy::LocalCache …\n"],["ActiveSupport::Cache::MemCacheStore","","ActiveSupport/Cache/MemCacheStore.html","","<p>A cache store implementation which stores data in Memcached: memcached.org/\n<p>This is currently the most …\n"],["ActiveSupport::Cache::MemCacheStore::LocalCacheWithRaw","","ActiveSupport/Cache/MemCacheStore/LocalCacheWithRaw.html","",""],["ActiveSupport::Cache::MemoryStore","","ActiveSupport/Cache/MemoryStore.html","","<p>A cache store implementation which stores everything into memory in the\nsame process. If you&#39;re running …\n"],["ActiveSupport::Cache::NullStore","","ActiveSupport/Cache/NullStore.html","","<p>A cache store implementation which doesn&#39;t actually store anything.\nUseful in development and test …\n"],["ActiveSupport::Cache::Store","","ActiveSupport/Cache/Store.html","","<p>An abstract cache store class. There are multiple cache store\nimplementations, each having its own additional …\n"],["ActiveSupport::Cache::Strategy","","ActiveSupport/Cache/Strategy.html","",""],["ActiveSupport::Cache::Strategy::LocalCache","","ActiveSupport/Cache/Strategy/LocalCache.html","","<p>Caches that implement LocalCache will be backed by an in-memory cache for\nthe duration of a block. Repeated …\n"],["ActiveSupport::Cache::Strategy::LocalCache::LocalCacheRegistry","","ActiveSupport/Cache/Strategy/LocalCache/LocalCacheRegistry.html","",""],["ActiveSupport::Cache::Strategy::LocalCache::LocalStore","","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html","","<p>Simple memory backed cache. This cache is not thread safe and is intended\nonly for serving as a temporary …\n"],["ActiveSupport::Cache::Strategy::LocalCache::Middleware","","ActiveSupport/Cache/Strategy/LocalCache/Middleware.html","",""],["ActiveSupport::CachingKeyGenerator","","ActiveSupport/CachingKeyGenerator.html","","<p>CachingKeyGenerator is a wrapper around KeyGenerator which allows users to\navoid re-executing the key …\n"],["ActiveSupport::Callbacks","","ActiveSupport/Callbacks.html","","<p>Callbacks are code hooks that are run at key points in an object&#39;s life\ncycle. The typical use case …\n"],["ActiveSupport::Callbacks::Callback","","ActiveSupport/Callbacks/Callback.html","",""],["ActiveSupport::Callbacks::CallbackChain","","ActiveSupport/Callbacks/CallbackChain.html","",""],["ActiveSupport::Callbacks::CallbackSequence","","ActiveSupport/Callbacks/CallbackSequence.html","","<p>Execute before and after filters in a sequence instead of chaining them\nwith nested lambda calls, see: …\n"],["ActiveSupport::Callbacks::ClassMethods","","ActiveSupport/Callbacks/ClassMethods.html","",""],["ActiveSupport::Callbacks::Conditionals","","ActiveSupport/Callbacks/Conditionals.html","",""],["ActiveSupport::Callbacks::Conditionals::Value","","ActiveSupport/Callbacks/Conditionals/Value.html","",""],["ActiveSupport::Callbacks::Filters","","ActiveSupport/Callbacks/Filters.html","",""],["ActiveSupport::Callbacks::Filters::After","","ActiveSupport/Callbacks/Filters/After.html","",""],["ActiveSupport::Callbacks::Filters::Around","","ActiveSupport/Callbacks/Filters/Around.html","",""],["ActiveSupport::Callbacks::Filters::Before","","ActiveSupport/Callbacks/Filters/Before.html","",""],["ActiveSupport::Callbacks::Filters::End","","ActiveSupport/Callbacks/Filters/End.html","",""],["ActiveSupport::Concern","","ActiveSupport/Concern.html","","<p>A typical module looks like this:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">M</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">included</span>(<span class=\"ruby-identifier\">base</span>)\n    <span class=\"ruby-identifier\">base</span>.<span class=\"ruby-identifier\">extend</span> <span class=\"ruby-constant\">ClassMethods</span>\n    <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveSupport::Concern::MultipleIncludedBlocks","","ActiveSupport/Concern/MultipleIncludedBlocks.html","",""],["ActiveSupport::Concurrency","","ActiveSupport/Concurrency.html","",""],["ActiveSupport::Concurrency::Latch","","ActiveSupport/Concurrency/Latch.html","",""],["ActiveSupport::Configurable","","ActiveSupport/Configurable.html","","<p>Configurable provides a <code>config</code> method to store and retrieve\nconfiguration options as an <code>OrderedHash</code>. …\n"],["ActiveSupport::Configurable::ClassMethods","","ActiveSupport/Configurable/ClassMethods.html","",""],["ActiveSupport::Configurable::Configuration","","ActiveSupport/Configurable/Configuration.html","",""],["ActiveSupport::Dependencies","","ActiveSupport/Dependencies.html","",""],["ActiveSupport::Dependencies::Blamable","","ActiveSupport/Dependencies/Blamable.html","",""],["ActiveSupport::Dependencies::ClassCache","","ActiveSupport/Dependencies/ClassCache.html","",""],["ActiveSupport::Dependencies::Loadable","","ActiveSupport/Dependencies/Loadable.html","",""],["ActiveSupport::Dependencies::ModuleConstMissing","","ActiveSupport/Dependencies/ModuleConstMissing.html","",""],["ActiveSupport::Dependencies::WatchStack","","ActiveSupport/Dependencies/WatchStack.html","","<p>The WatchStack keeps a stack of the modules being watched as files are\nloaded. If a file in the process …\n"],["ActiveSupport::Deprecation","","ActiveSupport/Deprecation.html","","<p>Deprecation specifies the API used by Rails to deprecate methods, instance\nvariables, objects and constants. …\n"],["ActiveSupport::Deprecation::Behavior","","ActiveSupport/Deprecation/Behavior.html","",""],["ActiveSupport::Deprecation::DeprecatedConstantProxy","","ActiveSupport/Deprecation/DeprecatedConstantProxy.html","","<p>This DeprecatedConstantProxy transforms constant to deprecated constant.\n\n<pre>OLD_CONST = ActiveSupport::Deprecation::DeprecatedConstantProxy.new(&#39;OLD_CONST&#39;, ...</pre>\n"],["ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy","","ActiveSupport/Deprecation/DeprecatedInstanceVariableProxy.html","","<p>This DeprecatedInstanceVariableProxy transforms instance variable to\ndeprecated instance variable.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveSupport::Deprecation::DeprecatedObjectProxy","","ActiveSupport/Deprecation/DeprecatedObjectProxy.html","","<p>This DeprecatedObjectProxy transforms object to deprecated object.\n\n<pre>@old_object = DeprecatedObjectProxy.new(Object.new, ...</pre>\n"],["ActiveSupport::Deprecation::DeprecationProxy","","ActiveSupport/Deprecation/DeprecationProxy.html","",""],["ActiveSupport::Deprecation::InstanceDelegator","","ActiveSupport/Deprecation/InstanceDelegator.html","",""],["ActiveSupport::Deprecation::InstanceDelegator::ClassMethods","","ActiveSupport/Deprecation/InstanceDelegator/ClassMethods.html","",""],["ActiveSupport::Deprecation::MethodWrapper","","ActiveSupport/Deprecation/MethodWrapper.html","",""],["ActiveSupport::Deprecation::Reporting","","ActiveSupport/Deprecation/Reporting.html","",""],["ActiveSupport::DeprecationException","","ActiveSupport/DeprecationException.html","",""],["ActiveSupport::DescendantsTracker","","ActiveSupport/DescendantsTracker.html","","<p>This module provides an internal implementation to track descendants which\nis faster than iterating through …\n"],["ActiveSupport::Duration","","ActiveSupport/Duration.html","","<p>Provides accurate date and time measurements using Date#advance and\nTime#advance, respectively. It mainly …\n"],["ActiveSupport::FileUpdateChecker","","ActiveSupport/FileUpdateChecker.html","","<p>FileUpdateChecker specifies the API used by Rails to watch files and\ncontrol reloading. The API depends …\n"],["ActiveSupport::Gzip","","ActiveSupport/Gzip.html","","<p>A convenient wrapper for the zlib standard library that allows\ncompression/decompression of strings with …\n"],["ActiveSupport::Gzip::Stream","","ActiveSupport/Gzip/Stream.html","",""],["ActiveSupport::HashWithIndifferentAccess","","ActiveSupport/HashWithIndifferentAccess.html","","<p>Implements a hash where keys <code>:foo</code> and\n<code>&quot;foo&quot;</code> are considered to be the same.\n\n<pre>rgb = ActiveSupport::HashWithIndifferentAccess.new ...</pre>\n"],["ActiveSupport::HashWithIndifferentAccess","","ActiveSupport/HashWithIndifferentAccess.html","","<p>Implements a hash where keys <code>:foo</code> and\n<code>&quot;foo&quot;</code> are considered to be the same.\n\n<pre>rgb = ActiveSupport::HashWithIndifferentAccess.new ...</pre>\n"],["ActiveSupport::Inflector","","ActiveSupport/Inflector.html","","<p>The Inflector transforms words from singular to plural, class names to\ntable names, modularized class …\n"],["ActiveSupport::Inflector::Inflections","","ActiveSupport/Inflector/Inflections.html","","<p>A singleton instance of this class is yielded by Inflector.inflections,\nwhich can then be used to specify …\n"],["ActiveSupport::Inflector::Inflections::ThreadSafe","","ActiveSupport/Inflector/Inflections/ThreadSafe.html","",""],["ActiveSupport::InheritableOptions","","ActiveSupport/InheritableOptions.html","","<p><code>InheritableOptions</code> provides a constructor to build an\n<code>OrderedOptions</code> hash inherited from another hash. …\n"],["ActiveSupport::JSON","","ActiveSupport/JSON.html","",""],["ActiveSupport::JSON::Encoding","","ActiveSupport/JSON/Encoding.html","",""],["ActiveSupport::JSON::Encoding::JSONGemEncoder","","ActiveSupport/JSON/Encoding/JSONGemEncoder.html","",""],["ActiveSupport::JSON::Encoding::JSONGemEncoder::EscapedString","","ActiveSupport/JSON/Encoding/JSONGemEncoder/EscapedString.html","",""],["ActiveSupport::KeyGenerator","","ActiveSupport/KeyGenerator.html","","<p>KeyGenerator is a simple wrapper around OpenSSL&#39;s implementation of\nPBKDF2 It can be used to derive …\n"],["ActiveSupport::LegacyKeyGenerator","","ActiveSupport/LegacyKeyGenerator.html","",""],["ActiveSupport::LogSubscriber","","ActiveSupport/LogSubscriber.html","","<p>ActiveSupport::LogSubscriber is an object set to consume\nActiveSupport::Notifications with the sole purpose …\n"],["ActiveSupport::LogSubscriber::TestHelper","","ActiveSupport/LogSubscriber/TestHelper.html","","<p>Provides some helpers to deal with testing log subscribers by setting up\nnotifications. Take for instance …\n"],["ActiveSupport::LogSubscriber::TestHelper::MockLogger","","ActiveSupport/LogSubscriber/TestHelper/MockLogger.html","",""],["ActiveSupport::Logger","","ActiveSupport/Logger.html","",""],["ActiveSupport::Logger::SimpleFormatter","","ActiveSupport/Logger/SimpleFormatter.html","","<p>Simple formatter which only displays the message.\n"],["ActiveSupport::MessageEncryptor","","ActiveSupport/MessageEncryptor.html","","<p>MessageEncryptor is a simple way to encrypt values which get stored\nsomewhere you don&#39;t trust.\n<p>The …\n"],["ActiveSupport::MessageEncryptor::InvalidMessage","","ActiveSupport/MessageEncryptor/InvalidMessage.html","",""],["ActiveSupport::MessageEncryptor::NullSerializer","","ActiveSupport/MessageEncryptor/NullSerializer.html","",""],["ActiveSupport::MessageVerifier","","ActiveSupport/MessageVerifier.html","","<p><code>MessageVerifier</code> makes it easy to generate and verify messages\nwhich are signed to prevent tampering. …\n"],["ActiveSupport::MessageVerifier::InvalidSignature","","ActiveSupport/MessageVerifier/InvalidSignature.html","",""],["ActiveSupport::Multibyte","","ActiveSupport/Multibyte.html","",""],["ActiveSupport::Multibyte::Chars","","ActiveSupport/Multibyte/Chars.html","","<p>Chars enables you to work transparently with UTF-8 encoding in the Ruby\nString class without having extensive …\n"],["ActiveSupport::Multibyte::Unicode","","ActiveSupport/Multibyte/Unicode.html","",""],["ActiveSupport::Multibyte::Unicode::Codepoint","","ActiveSupport/Multibyte/Unicode/Codepoint.html","","<p>Holds data about a codepoint in the Unicode database.\n"],["ActiveSupport::Multibyte::Unicode::UnicodeDatabase","","ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html","","<p>Holds static data from the Unicode database.\n"],["ActiveSupport::Notifications","","ActiveSupport/Notifications.html","","<p>Notifications\n<p><code>ActiveSupport::Notifications</code> provides an instrumentation API\nfor Ruby.\n<p>Instrumenters\n"],["ActiveSupport::Notifications::Event","","ActiveSupport/Notifications/Event.html","",""],["ActiveSupport::Notifications::Fanout","","ActiveSupport/Notifications/Fanout.html","","<p>This is a default queue implementation that ships with Notifications. It\njust pushes events to all registered …\n"],["ActiveSupport::Notifications::Fanout::Subscribers","","ActiveSupport/Notifications/Fanout/Subscribers.html","",""],["ActiveSupport::Notifications::Fanout::Subscribers::AllMessages","","ActiveSupport/Notifications/Fanout/Subscribers/AllMessages.html","",""],["ActiveSupport::Notifications::Fanout::Subscribers::Evented","","ActiveSupport/Notifications/Fanout/Subscribers/Evented.html","",""],["ActiveSupport::Notifications::Fanout::Subscribers::Timed","","ActiveSupport/Notifications/Fanout/Subscribers/Timed.html","",""],["ActiveSupport::Notifications::InstrumentationRegistry","","ActiveSupport/Notifications/InstrumentationRegistry.html","",""],["ActiveSupport::Notifications::Instrumenter","","ActiveSupport/Notifications/Instrumenter.html","","<p>Instrumenters are stored in a thread local.\n"],["ActiveSupport::NumberHelper","","ActiveSupport/NumberHelper.html","",""],["ActiveSupport::NumberHelper::NumberConverter","","ActiveSupport/NumberHelper/NumberConverter.html","",""],["ActiveSupport::NumberHelper::NumberToCurrencyConverter","","ActiveSupport/NumberHelper/NumberToCurrencyConverter.html","",""],["ActiveSupport::NumberHelper::NumberToDelimitedConverter","","ActiveSupport/NumberHelper/NumberToDelimitedConverter.html","",""],["ActiveSupport::NumberHelper::NumberToHumanConverter","","ActiveSupport/NumberHelper/NumberToHumanConverter.html","",""],["ActiveSupport::NumberHelper::NumberToHumanSizeConverter","","ActiveSupport/NumberHelper/NumberToHumanSizeConverter.html","",""],["ActiveSupport::NumberHelper::NumberToPercentageConverter","","ActiveSupport/NumberHelper/NumberToPercentageConverter.html","",""],["ActiveSupport::NumberHelper::NumberToPhoneConverter","","ActiveSupport/NumberHelper/NumberToPhoneConverter.html","",""],["ActiveSupport::NumberHelper::NumberToRoundedConverter","","ActiveSupport/NumberHelper/NumberToRoundedConverter.html","",""],["ActiveSupport::OptionMerger","","ActiveSupport/OptionMerger.html","",""],["ActiveSupport::OrderedHash","","ActiveSupport/OrderedHash.html","","<p><code>ActiveSupport::OrderedHash</code> implements a hash that preserves\ninsertion order.\n\n<pre>oh = ActiveSupport::OrderedHash.new ...</pre>\n"],["ActiveSupport::OrderedOptions","","ActiveSupport/OrderedOptions.html","","<p>Usually key value pairs are handled something like this:\n\n<pre>h = {}\nh[:boy] = &#39;John&#39;\nh[:girl] = &#39;Mary&#39;\nh[:boy] ...</pre>\n"],["ActiveSupport::PerThreadRegistry","","ActiveSupport/PerThreadRegistry.html","","<p>This module is used to encapsulate access to thread local variables.\n<p>Instead of polluting the thread locals …\n"],["ActiveSupport::ProxyObject","","ActiveSupport/ProxyObject.html","","<p>A class with no predefined methods that behaves similarly to Builder&#39;s\nBlankSlate. Used for proxy …\n"],["ActiveSupport::Railtie","","ActiveSupport/Railtie.html","",""],["ActiveSupport::Rescuable","","ActiveSupport/Rescuable.html","","<p>Rescuable module adds support for easier exception handling.\n"],["ActiveSupport::Rescuable::ClassMethods","","ActiveSupport/Rescuable/ClassMethods.html","",""],["ActiveSupport::SafeBuffer","","ActiveSupport/SafeBuffer.html","",""],["ActiveSupport::SafeBuffer::SafeConcatError","","ActiveSupport/SafeBuffer/SafeConcatError.html","",""],["ActiveSupport::SecurityUtils","","ActiveSupport/SecurityUtils.html","",""],["ActiveSupport::StringInquirer","","ActiveSupport/StringInquirer.html","","<p>Wrapping a string in this class gives you a prettier way to test for\nequality. The value returned by …\n"],["ActiveSupport::Subscriber","","ActiveSupport/Subscriber.html","","<p>ActiveSupport::Subscriber is an object set to consume\nActiveSupport::Notifications. The subscriber dispatches …\n"],["ActiveSupport::SubscriberQueueRegistry","","ActiveSupport/SubscriberQueueRegistry.html","",""],["ActiveSupport::TaggedLogging","","ActiveSupport/TaggedLogging.html","","<p>Wraps any standard Logger object to provide tagging capabilities.\n\n<pre>logger = ActiveSupport::TaggedLogging.new(Logger.new(STDOUT)) ...</pre>\n"],["ActiveSupport::TaggedLogging::Formatter","","ActiveSupport/TaggedLogging/Formatter.html","",""],["ActiveSupport::TestCase","","ActiveSupport/TestCase.html","",""],["ActiveSupport::Testing","","ActiveSupport/Testing.html","",""],["ActiveSupport::Testing::Assertions","","ActiveSupport/Testing/Assertions.html","",""],["ActiveSupport::Testing::ConstantLookup","","ActiveSupport/Testing/ConstantLookup.html","","<p>Resolves a constant from a minitest spec name.\n<p>Given the following spec-style test:\n\n<pre>describe WidgetsController, ...</pre>\n"],["ActiveSupport::Testing::ConstantLookup::ClassMethods","","ActiveSupport/Testing/ConstantLookup/ClassMethods.html","",""],["ActiveSupport::Testing::Declarative","","ActiveSupport/Testing/Declarative.html","",""],["ActiveSupport::Testing::Deprecation","","ActiveSupport/Testing/Deprecation.html","",""],["ActiveSupport::Testing::Isolation","","ActiveSupport/Testing/Isolation.html","",""],["ActiveSupport::Testing::Isolation::Forking","","ActiveSupport/Testing/Isolation/Forking.html","",""],["ActiveSupport::Testing::Isolation::Subprocess","","ActiveSupport/Testing/Isolation/Subprocess.html","",""],["ActiveSupport::Testing::SetupAndTeardown","","ActiveSupport/Testing/SetupAndTeardown.html","","<p>Adds support for <code>setup</code> and <code>teardown</code> callbacks.\nThese callbacks serve as a replacement to overwriting …\n"],["ActiveSupport::Testing::SetupAndTeardown::ClassMethods","","ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html","",""],["ActiveSupport::Testing::SimpleStubs","","ActiveSupport/Testing/SimpleStubs.html","",""],["ActiveSupport::Testing::TaggedLogging","","ActiveSupport/Testing/TaggedLogging.html","",""],["ActiveSupport::Testing::TimeHelpers","","ActiveSupport/Testing/TimeHelpers.html","","<p>Containing helpers that helps you test passage of time.\n"],["ActiveSupport::TimeWithZone","","ActiveSupport/TimeWithZone.html","","<p>A Time-like class that can represent a time in any time zone. Necessary\nbecause standard Ruby Time instances …\n"],["ActiveSupport::TimeZone","","ActiveSupport/TimeZone.html","","<p>The TimeZone class serves as a wrapper around TZInfo::Timezone instances.\nIt allows us to do the following: …\n"],["ActiveSupport::TimeZone::ThreadSafe","","ActiveSupport/TimeZone/ThreadSafe.html","",""],["ActiveSupport::VERSION","","ActiveSupport/VERSION.html","",""],["ActiveSupport::XMLConverter","","ActiveSupport/XMLConverter.html","",""],["ActiveSupport::XMLConverter::DisallowedType","","ActiveSupport/XMLConverter/DisallowedType.html","",""],["ActiveSupport::XmlMini","","ActiveSupport/XmlMini.html","","<p>XmlMini\n<p>To use the much faster libxml parser:\n\n<pre>gem &#39;libxml-ruby&#39;, &#39;=0.9.7&#39;\nXmlMini.backend = &#39;LibXML&#39;</pre>\n"],["ActiveSupport::XmlMini::FileLike","","ActiveSupport/XmlMini/FileLike.html","",""],["ActiveSupport::XmlMini_JDOM","","ActiveSupport/XmlMini_JDOM.html","",""],["ActiveSupport::XmlMini_LibXML","","ActiveSupport/XmlMini_LibXML.html","",""],["ActiveSupport::XmlMini_LibXMLSAX","","ActiveSupport/XmlMini_LibXMLSAX.html","",""],["ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html","","<p>Class that will build the hash while the XML document is being parsed using\nSAX events.\n"],["ActiveSupport::XmlMini_Nokogiri","","ActiveSupport/XmlMini_Nokogiri.html","",""],["ActiveSupport::XmlMini_Nokogiri::Conversions","","ActiveSupport/XmlMini_Nokogiri/Conversions.html","",""],["ActiveSupport::XmlMini_Nokogiri::Conversions::Document","","ActiveSupport/XmlMini_Nokogiri/Conversions/Document.html","",""],["ActiveSupport::XmlMini_Nokogiri::Conversions::Node","","ActiveSupport/XmlMini_Nokogiri/Conversions/Node.html","",""],["ActiveSupport::XmlMini_Nokogiri::Nokogiri","","ActiveSupport/XmlMini_Nokogiri/Nokogiri.html","",""],["ActiveSupport::XmlMini_Nokogiri::Nokogiri::XML","","ActiveSupport/XmlMini_Nokogiri/Nokogiri/XML.html","",""],["ActiveSupport::XmlMini_NokogiriSAX","","ActiveSupport/XmlMini_NokogiriSAX.html","",""],["ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html","","<p>Class that will build the hash while the XML document is being parsed using\nSAX events.\n"],["ActiveSupport::XmlMini_REXML","","ActiveSupport/XmlMini_REXML.html","",""],["Array","","Array.html","",""],["Benchmark","","Benchmark.html","",""],["BigDecimal","","BigDecimal.html","",""],["Class","","Class.html","",""],["Date","","Date.html","",""],["DateAndTime","","DateAndTime.html","",""],["DateAndTime::Calculations","","DateAndTime/Calculations.html","",""],["DateAndTime::Zones","","DateAndTime/Zones.html","",""],["DateTime","","DateTime.html","",""],["Digest","","Digest.html","",""],["Digest::UUID","","Digest/UUID.html","",""],["ERB","","ERB.html","",""],["ERB::Util","","ERB/Util.html","",""],["Enumerable","","Enumerable.html","",""],["FalseClass","","FalseClass.html","",""],["File","","File.html","",""],["Float","","Float.html","",""],["Hash","","Hash.html","",""],["I18n","","I18n.html","",""],["I18n::Railtie","","I18n/Railtie.html","",""],["Integer","","Integer.html","",""],["Kernel","","Kernel.html","",""],["LibXML","","LibXML.html","",""],["LibXML::Conversions","","LibXML/Conversions.html","",""],["LibXML::Conversions::Document","","LibXML/Conversions/Document.html","",""],["LibXML::Conversions::Node","","LibXML/Conversions/Node.html","",""],["LibXML::XML","","LibXML/XML.html","",""],["LoadError","","LoadError.html","",""],["LoggerSilence","","LoggerSilence.html","",""],["Marshal","","Marshal.html","",""],["Method","","Method.html","",""],["MissingSourceFile","","MissingSourceFile.html","",""],["Module","","Module.html","","<p>Extends the module object with class/module and instance accessors for\nclass/module attributes, just …\n"],["Module::Concerning","","Module/Concerning.html","","<p>Bite-sized separation of concerns\n<p>We often find ourselves with a medium-sized chunk of behavior that we&#39;d\n…\n"],["Module::DelegationError","","Module/DelegationError.html","","<p>Error generated by <code>delegate</code> when a method is called on\n<code>nil</code> and <code>allow_nil</code> option is not used.\n"],["NameError","","NameError.html","",""],["NilClass","","NilClass.html","",""],["Numeric","","Numeric.html","",""],["Object","","Object.html","",""],["Process","","Process.html","",""],["Process::Status","","Process/Status.html","",""],["QualifiedConstUtils","","QualifiedConstUtils.html","",""],["Range","","Range.html","",""],["Regexp","","Regexp.html","",""],["String","","String.html","","<p>String inflections define new methods on the String class to transform\nnames for different purposes. …\n"],["Struct","","Struct.html","",""],["Symbol","","Symbol.html","",""],["Thread","","Thread.html","",""],["Time","","Time.html","",""],["TrueClass","","TrueClass.html","",""],["URI","","URI.html","",""],["%","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-25","(args)",""],["+","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-2B","(other)","<p>Adds another Duration or a Numeric to this Duration. Numeric values are\ntreated as seconds.\n"],["+","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-2B","(other)",""],["+","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-2B","(other)",""],["-","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-2D","(other)","<p>Subtracts another Duration or a Numeric from this Duration. Numeric values\nare treated as seconds.\n"],["-","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-2D","(other)",""],["-","Time","Time.html#method-i-2D","(other)",""],["<<","ActiveSupport::Notifications::Event","ActiveSupport/Notifications/Event.html#method-i-3C-3C","(event)",""],["<<","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-3C-3C","(value)",""],["<=>","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-3C-3D-3E","(other)","<p>Use the time in UTC for comparisons.\n"],["<=>","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-3C-3D-3E","(zone)","<p>Compare this time zone to the parameter. The two are compared first on\ntheir offsets, and then by name. …\n"],["<=>","Date","Date.html#method-i-3C-3D-3E","(other)",""],["<=>","DateTime","DateTime.html#method-i-3C-3D-3E","(other)","<p>Layers additional behavior on DateTime#&lt;=&gt; so that Time and\nActiveSupport::TimeWithZone instances …\n"],["<=>","Time","Time.html#method-i-3C-3D-3E","(other)",""],["==","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> if <code>other</code> is also a Duration instance\nwith the same <code>value</code>, or if <code>other == value</code>.\n"],["===","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-i-3D-3D-3D","(other)",""],["===","Time","Time.html#method-i-3D-3D-3D","(other)","<p>Overriding case equality method so that it returns true for\nActiveSupport::TimeWithZone instances\n"],["=~","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-3D-7E","(re)","<p>Compare #name and TZInfo identifier to a supplied regexp, returning\n<code>true</code> if a match is found.\n"],["[]","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-5B-5D","(key)",""],["[]","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-c-5B-5D","(*args)",""],["[]","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-c-5B-5D","(*args)",""],["[]","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-5B-5D","(key)",""],["[]","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-5B-5D","(*args)",""],["[]","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-5B-5D","(arg)","<p>Locate a specific time zone object. If the argument is a string, it is\ninterpreted to mean the name of …\n"],["[]=","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D-3D","(key, value)","<p>Assigns a new value to the hash:\n\n<pre>hash = ActiveSupport::HashWithIndifferentAccess.new\nhash[:key] = &#39;value&#39;</pre>\n"],["[]=","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D-3D","(key, value)","<p>Assigns a new value to the hash:\n\n<pre>hash = ActiveSupport::HashWithIndifferentAccess.new\nhash[:key] = &#39;value&#39;</pre>\n"],["[]=","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-5B-5D-3D","(key, value)",""],["__run_callbacks__","ActiveSupport::Callbacks","ActiveSupport/Callbacks.html#method-i-__run_callbacks__","(callbacks, &block)",""],["_dasherize","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-_dasherize","(key)",""],["_decrypt","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-i-_decrypt","(encrypted_message)",""],["_deep_transform_keys_in_object","Hash","Hash.html#method-i-_deep_transform_keys_in_object","(object, &block)","<p>support methods for deep transforming nested hashes and arrays\n"],["_deep_transform_keys_in_object!","Hash","Hash.html#method-i-_deep_transform_keys_in_object-21","(object, &block)",""],["_dump","Time","Time.html#method-i-_dump","(*args)",""],["_dump_without_zone","Time","Time.html#method-i-_dump_without_zone","(*args)",""],["_encrypt","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-i-_encrypt","(value)",""],["_get","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-_get","(key)",""],["_load","Time","Time.html#method-i-_load","(marshaled_time)",""],["_locals","Thread","Thread.html#method-i-_locals","()",""],["_original_to_s","BigDecimal","BigDecimal.html#method-i-_original_to_s","(*args)",""],["_parse_file","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-_parse_file","(file, entity)",""],["_run_class_setup","ActiveSupport::Testing::Isolation","ActiveSupport/Testing/Isolation.html#method-i-_run_class_setup","()",""],["_stash_object_in_method","Class","Class.html#method-i-_stash_object_in_method","(object, method, instance_reader = true)","<p>Take the object being set and store it in a method. This gives us automatic\ninheritance behavior, without …\n"],["_superclass_delegating_accessor","Class","Class.html#method-i-_superclass_delegating_accessor","(name, options = {})",""],["accumulate_descendants","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-i-accumulate_descendants","(klass, acc)",""],["acronym","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-acronym","(word)","<p>Specifies a new acronym. An acronym must be specified as it will appear in\na camelized string. An underscore …\n"],["acts_like?","Object","Object.html#method-i-acts_like-3F","(duck)","<p>A duck-type assistant method. For example, Active Support extends Date to\ndefine an <code>acts_like_date?</code> method, …\n"],["acts_like_date?","Date","Date.html#method-i-acts_like_date-3F","()","<p>Duck-types as a Date-like class. See Object#acts_like?.\n"],["acts_like_date?","DateTime","DateTime.html#method-i-acts_like_date-3F","()","<p>Duck-types as a Date-like class. See Object#acts_like?.\n"],["acts_like_string?","String","String.html#method-i-acts_like_string-3F","()","<p>Enable more predictable duck-typing on String-like classes. See\n<code>Object#acts_like?</code>.\n"],["acts_like_time?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-acts_like_time-3F","()","<p>So that <code>self</code> <code>acts_like?(:time)</code>.\n"],["acts_like_time?","DateTime","DateTime.html#method-i-acts_like_time-3F","()","<p>Duck-types as a Time-like class. See Object#acts_like?.\n"],["acts_like_time?","Time","Time.html#method-i-acts_like_time-3F","()","<p>Duck-types as a Time-like class. See Object#acts_like?.\n"],["add","ActiveSupport::Logger","ActiveSupport/Logger.html#method-i-add","(severity, message = nil, progname = nil, &block)",""],["add_event_subscriber","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-i-add_event_subscriber","(event)",""],["add_filter","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-add_filter","(&block)","<p>Adds a filter from the block provided. Each line in the backtrace will be\nmapped against this filter. …\n"],["add_silencer","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-add_silencer","(&block)","<p>Adds a silencer from the block provided. If the silencer returns\n<code>true</code> for a given line, it will be excluded …\n"],["advance","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-advance","(options)",""],["advance","Date","Date.html#method-i-advance","(options)","<p>Provides precise Date calculations for years, months, and days. The\n<code>options</code> parameter takes a hash with …\n"],["advance","DateTime","DateTime.html#method-i-advance","(options)","<p>Uses Date to provide precise Time calculations for years, months, and days.\nThe <code>options</code> parameter takes …\n"],["advance","Time","Time.html#method-i-advance","(options)","<p>Uses Date to provide precise Time calculations for years, months, and days\naccording to the proleptic …\n"],["after","ActiveSupport::Callbacks::CallbackSequence","ActiveSupport/Callbacks/CallbackSequence.html#method-i-after","(&after)",""],["after_initialize","LoggerSilence","LoggerSilence.html#method-i-after_initialize","()",""],["ago","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-ago","(time = ::Time.current)","<p>Calculates a new Time or Date that is as far in the past as this Duration\nrepresents.\n"],["ago","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-ago","(other)",""],["ago","Date","Date.html#method-i-ago","(seconds)","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],["ago","DateTime","DateTime.html#method-i-ago","(seconds)","<p>Returns a new DateTime representing the time a number of seconds ago. Do\nnot use this method in combination …\n"],["ago","Time","Time.html#method-i-ago","(seconds)","<p>Returns a new Time representing the time a number of seconds ago, this is\nbasically a wrapper around …\n"],["alias_attribute","Module","Module.html#method-i-alias_attribute","(new_name, old_name)","<p>Allows you to make aliases for attributes, which includes getter, setter,\nand query methods.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Content</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["alias_method_chain","Module","Module.html#method-i-alias_method_chain","(target, feature)","<p>Encapsulates the common pattern of:\n\n<pre>alias_method :foo_without_feature, :foo\nalias_method :foo, :foo_with_feature</pre>\n"],["all","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-all","()","<p>Returns an array of all TimeZone objects. There are multiple TimeZone\nobjects per time zone, in many …\n"],["all_day","Time","Time.html#method-i-all_day","()","<p>Returns a Range representing the whole day of the current time.\n"],["all_month","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-all_month","()","<p>Returns a Range representing the whole month of the current date/time.\n"],["all_quarter","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-all_quarter","()","<p>Returns a Range representing the whole quarter of the current date/time.\n"],["all_week","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-all_week","(start_day = Date.beginning_of_week)","<p>Returns a Range representing the whole week of the current date/time. Week\nstarts on start_day, default …\n"],["all_year","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-all_year","()","<p>Returns a Range representing the whole year of the current date/time.\n"],["anonymous?","Module","Module.html#method-i-anonymous-3F","()","<p>A module may or may not have a name.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">M</span>; <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-constant\">M</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-comment\"># =&gt; &quot;M&quot;</span>\n\n<span class=\"ruby-identifier\">m</span> = <span class=\"ruby-constant\">Module</span>.<span class=\"ruby-identifier\">new</span>\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-comment\"># =&gt; nil</span>\n</pre>\n<p>A module …\n"],["append_features","ActiveSupport::Concern","ActiveSupport/Concern.html#method-i-append_features","(base)",""],["apply_inflections","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-apply_inflections","(word, rules)","<p>Applies inflection rules for <code>singularize</code> and\n<code>pluralize</code>.\n\n<pre>apply_inflections(&#39;post&#39;, inflections.plurals) ...</pre>\n"],["around","ActiveSupport::Callbacks::CallbackSequence","ActiveSupport/Callbacks/CallbackSequence.html#method-i-around","(&around)",""],["as_json","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-as_json","(options = nil)","<p>Coerces time to a string for JSON encoding. The default format is ISO 8601.\nYou can get %Y/%m/%d %H:%M:%S …\n"],["assert_difference","ActiveSupport::Testing::Assertions","ActiveSupport/Testing/Assertions.html#method-i-assert_difference","(expression, difference = 1, message = nil, &block)","<p>Test numeric difference between the return value of an expression as a\nresult of what is evaluated in …\n"],["assert_no_difference","ActiveSupport::Testing::Assertions","ActiveSupport/Testing/Assertions.html#method-i-assert_no_difference","(expression, message = nil, &block)","<p>Assertion that the numeric result of evaluating an expression is not\nchanged before and after invoking …\n"],["assert_not","ActiveSupport::Testing::Assertions","ActiveSupport/Testing/Assertions.html#method-i-assert_not","(object, message = nil)","<p>Assert that an expression is not truthy. Passes if <code>object</code> is\n<code>nil</code> or <code>false</code>. “Truthy” means “considered …\n"],["assert_nothing_raised","ActiveSupport::TestCase","ActiveSupport/TestCase.html#method-i-assert_nothing_raised","(*args)","<p>Fails if the block raises an exception.\n\n<pre>assert_nothing_raised do\n  ...\nend</pre>\n"],["assert_valid_keys","Hash","Hash.html#method-i-assert_valid_keys","(*valid_keys)","<p>Validate all keys in a hash match <code>*valid_keys</code>, raising\nArgumentError on a mismatch.\n<p>Note that keys are …\n"],["at","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-at","(secs)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from number of seconds …\n"],["at","String","String.html#method-i-at","(position)","<p>If you pass a single Fixnum, returns a substring of one character at that\nposition. The first character …\n"],["at_beginning_of_day","Date","Date.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_day","DateTime","DateTime.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_day","Time","Time.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_hour","DateTime","DateTime.html#method-i-at_beginning_of_hour","()",""],["at_beginning_of_hour","Time","Time.html#method-i-at_beginning_of_hour","()",""],["at_beginning_of_minute","DateTime","DateTime.html#method-i-at_beginning_of_minute","()",""],["at_beginning_of_minute","Time","Time.html#method-i-at_beginning_of_minute","()",""],["at_beginning_of_month","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-at_beginning_of_month","()",""],["at_beginning_of_quarter","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-at_beginning_of_quarter","()",""],["at_beginning_of_week","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-at_beginning_of_week","(start_day = Date.beginning_of_week)",""],["at_beginning_of_year","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-at_beginning_of_year","()",""],["at_end_of_day","Date","Date.html#method-i-at_end_of_day","()",""],["at_end_of_day","DateTime","DateTime.html#method-i-at_end_of_day","()",""],["at_end_of_day","Time","Time.html#method-i-at_end_of_day","()",""],["at_end_of_hour","DateTime","DateTime.html#method-i-at_end_of_hour","()",""],["at_end_of_hour","Time","Time.html#method-i-at_end_of_hour","()",""],["at_end_of_minute","DateTime","DateTime.html#method-i-at_end_of_minute","()",""],["at_end_of_minute","Time","Time.html#method-i-at_end_of_minute","()",""],["at_end_of_month","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-at_end_of_month","()",""],["at_end_of_quarter","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-at_end_of_quarter","()",""],["at_end_of_week","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-at_end_of_week","(start_day = Date.beginning_of_week)",""],["at_end_of_year","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-at_end_of_year","()",""],["at_midday","Date","Date.html#method-i-at_midday","()",""],["at_midday","DateTime","DateTime.html#method-i-at_midday","()",""],["at_midday","Time","Time.html#method-i-at_midday","()",""],["at_middle_of_day","Date","Date.html#method-i-at_middle_of_day","()",""],["at_middle_of_day","DateTime","DateTime.html#method-i-at_middle_of_day","()",""],["at_middle_of_day","Time","Time.html#method-i-at_middle_of_day","()",""],["at_midnight","Date","Date.html#method-i-at_midnight","()",""],["at_midnight","DateTime","DateTime.html#method-i-at_midnight","()",""],["at_midnight","Time","Time.html#method-i-at_midnight","()",""],["at_noon","Date","Date.html#method-i-at_noon","()",""],["at_noon","DateTime","DateTime.html#method-i-at_noon","()",""],["at_noon","Time","Time.html#method-i-at_noon","()",""],["at_with_coercion","Time","Time.html#method-i-at_with_coercion","(*args)","<p>Layers additional behavior on Time.at so that ActiveSupport::TimeWithZone\nand DateTime instances can …\n"],["atomic_write","File","File.html#method-c-atomic_write","(file_name, temp_dir = Dir.tmpdir)","<p>Write to a file atomically. Useful for situations where you don&#39;t want\nother processes or threads …\n"],["attach_to","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-i-attach_to","(namespace, subscriber=new, notifier=ActiveSupport::Notifications)","<p>Attach the subscriber to a namespace.\n"],["attr_internal","Module","Module.html#method-i-attr_internal","(*attrs)",""],["attr_internal_accessor","Module","Module.html#method-i-attr_internal_accessor","(*attrs)","<p>Declares an attribute reader and writer backed by an internally-named\ninstance variable.\n"],["attr_internal_define","Module","Module.html#method-i-attr_internal_define","(attr_name, type)",""],["attr_internal_ivar_name","Module","Module.html#method-i-attr_internal_ivar_name","(attr)",""],["attr_internal_reader","Module","Module.html#method-i-attr_internal_reader","(*attrs)","<p>Declares an attribute reader backed by an internally-named instance\nvariable.\n"],["attr_internal_writer","Module","Module.html#method-i-attr_internal_writer","(*attrs)","<p>Declares an attribute writer backed by an internally-named instance\nvariable.\n"],["autoload","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-autoload","(const_name, path = @_at_path)",""],["autoload_at","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-autoload_at","(path)",""],["autoload_under","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-autoload_under","(path)",""],["autoloads","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-autoloads","()",""],["await","ActiveSupport::Concurrency::Latch","ActiveSupport/Concurrency/Latch.html#method-i-await","()",""],["backend","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-backend","()",""],["backend=","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-backend-3D","(name)",""],["before","ActiveSupport::Callbacks::CallbackSequence","ActiveSupport/Callbacks/CallbackSequence.html#method-i-before","(&before)",""],["beginning_of_day","Date","Date.html#method-i-beginning_of_day","()","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],["beginning_of_day","DateTime","DateTime.html#method-i-beginning_of_day","()","<p>Returns a new DateTime representing the start of the day (0:00).\n"],["beginning_of_day","Time","Time.html#method-i-beginning_of_day","()","<p>Returns a new Time representing the start of the day (0:00)\n"],["beginning_of_hour","DateTime","DateTime.html#method-i-beginning_of_hour","()","<p>Returns a new DateTime representing the start of the hour (hh:00:00).\n"],["beginning_of_hour","Time","Time.html#method-i-beginning_of_hour","()","<p>Returns a new Time representing the start of the hour (x:00)\n"],["beginning_of_minute","DateTime","DateTime.html#method-i-beginning_of_minute","()","<p>Returns a new DateTime representing the start of the minute (hh:mm:00).\n"],["beginning_of_minute","Time","Time.html#method-i-beginning_of_minute","()","<p>Returns a new Time representing the start of the minute (x:xx:00)\n"],["beginning_of_month","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-beginning_of_month","()","<p>Returns a new date/time at the start of the month. DateTime objects will\nhave a time set to 0:00.\n"],["beginning_of_quarter","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-beginning_of_quarter","()","<p>Returns a new date/time at the start of the quarter. Example: 1st January,\n1st July, 1st October. DateTime …\n"],["beginning_of_week","Date","Date.html#method-i-beginning_of_week","()","<p>Returns the week start (e.g. :monday) for the current request, if this has\nbeen set (via Date.beginning_of_week= …\n"],["beginning_of_week","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-beginning_of_week","(start_day = Date.beginning_of_week)","<p>Returns a new date/time representing the start of this week on the given\nday. Week is assumed to start …\n"],["beginning_of_week=","Date","Date.html#method-i-beginning_of_week-3D","(week_start)","<p>Sets <code>Date.beginning_of_week</code> to a week start (e.g. :monday) for\ncurrent request/thread.\n<p>This method accepts …\n"],["beginning_of_year","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-beginning_of_year","()","<p>Return a new date/time at the beginning of the year. Example: 1st January.\nDateTime objects will have …\n"],["behavior","ActiveSupport::Deprecation::Behavior","ActiveSupport/Deprecation/Behavior.html#method-i-behavior","()","<p>Returns the current behavior or if one isn&#39;t set, defaults to\n<code>:stderr</code>.\n"],["behavior=","ActiveSupport::Deprecation::Behavior","ActiveSupport/Deprecation/Behavior.html#method-i-behavior-3D","(behavior)","<p>Sets the behavior to the specified value. Can be a single value, array, or\nan object that responds to …\n"],["benchmark","ActiveSupport::Benchmarkable","ActiveSupport/Benchmarkable.html#method-i-benchmark","(message = \"Benchmarking\", options = {})","<p>Allows you to measure the execution time of a block in a template and\nrecords the result to the log. …\n"],["between?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-between-3F","(min, max)","<p>Returns true if the current object&#39;s time is within the specified\n<code>min</code> and <code>max</code> time.\n"],["blank?","FalseClass","FalseClass.html#method-i-blank-3F","()","<p><code>false</code> is blank:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">false</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-comment\"># =&gt; true</span>\n</pre>\n<p>@return [true]\n"],["blank?","NilClass","NilClass.html#method-i-blank-3F","()","<p><code>nil</code> is blank:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-comment\"># =&gt; true</span>\n</pre>\n<p>@return [true]\n"],["blank?","Object","Object.html#method-i-blank-3F","()","<p>An object is blank if it&#39;s false, empty, or a whitespace string. For\nexample, <code>false</code>, &#39;&#39;, …\n"],["blank?","String","String.html#method-i-blank-3F","()","<p>A string is blank if it&#39;s empty or contains whitespaces only:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;&#39;</span>.<span class=\"ruby-identifier\">blank?</span>       <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-string\">&#39;   &#39;</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["blank?","TrueClass","TrueClass.html#method-i-blank-3F","()","<p><code>true</code> is not blank:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">true</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n</pre>\n<p>@return [false]\n"],["breakpoint","Kernel","Kernel.html#method-i-breakpoint","()",""],["build","ActiveSupport::Callbacks::Filters::After","ActiveSupport/Callbacks/Filters/After.html#method-c-build","(callback_sequence, user_callback, user_conditions, chain_config)",""],["build","ActiveSupport::Callbacks::Filters::Around","ActiveSupport/Callbacks/Filters/Around.html#method-c-build","(callback_sequence, user_callback, user_conditions, chain_config)",""],["build","ActiveSupport::Callbacks::Filters::Before","ActiveSupport/Callbacks/Filters/Before.html#method-c-build","(callback_sequence, user_callback, user_conditions, chain_config, filter)",""],["build_mem_cache","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-c-build_mem_cache","(*addresses)",""],["bypass_local_cache","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-bypass_local_cache","()",""],["byte","Numeric","Numeric.html#method-i-byte","()",""],["bytes","Numeric","Numeric.html#method-i-bytes","()","<p>Enables the use of byte calculations and declarations, like 45.bytes +\n2.6.megabytes\n"],["cached_size","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-cached_size","(key, entry)",""],["call","ActiveSupport::Callbacks::CallbackSequence","ActiveSupport/Callbacks/CallbackSequence.html#method-i-call","(*args)",""],["call","ActiveSupport::Callbacks::Conditionals::Value","ActiveSupport/Callbacks/Conditionals/Value.html#method-i-call","(target, value)",""],["call","ActiveSupport::Callbacks::Filters::End","ActiveSupport/Callbacks/Filters/End.html#method-i-call","(env)",""],["call","ActiveSupport::Logger::SimpleFormatter","ActiveSupport/Logger/SimpleFormatter.html#method-i-call","(severity, timestamp, progname, msg)","<p>This method is invoked when a log event occurs\n"],["camelcase","String","String.html#method-i-camelcase","(first_letter = :upper)",""],["camelize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-camelize","(term, uppercase_first_letter = true)","<p>By default, <code>camelize</code> converts strings to UpperCamelCase. If\nthe argument to <code>camelize</code> is set to <code>:lower</code> …\n"],["camelize","String","String.html#method-i-camelize","(first_letter = :upper)","<p>By default, <code>camelize</code> converts strings to UpperCamelCase. If\nthe argument to camelize is set to <code>:lower</code> …\n"],["capitalize","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-capitalize","()","<p>Converts the first character to uppercase and the remainder to lowercase.\n\n<pre>&#39;über&#39;.mb_chars.capitalize.to_s ...</pre>\n"],["capture","Kernel","Kernel.html#method-i-capture","(stream)","<p>Captures the given stream and returns it:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">stream</span> = <span class=\"ruby-identifier\">capture</span>(:<span class=\"ruby-identifier\">stdout</span>) { <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-string\">&#39;notice&#39;</span> }\n<span class=\"ruby-identifier\">stream</span> <span class=\"ruby-comment\"># =&gt; &quot;notice\\n&quot; ...</span>\n</pre>\n"],["cast_backend_name_to_module","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-cast_backend_name_to_module","(name)",""],["cattr_accessor","Module","Module.html#method-i-cattr_accessor","(*syms, &blk)",""],["cattr_reader","Module","Module.html#method-i-cattr_reader","(*syms)",""],["cattr_writer","Module","Module.html#method-i-cattr_writer","(*syms)",""],["cdata_block","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-cdata_block","(string)",""],["change","Date","Date.html#method-i-change","(options)","<p>Returns a new Date where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],["change","DateTime","DateTime.html#method-i-change","(options)","<p>Returns a new DateTime where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],["change","Time","Time.html#method-i-change","(options)","<p>Returns a new Time where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],["characters","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-characters","(string)",""],["civil_from_format","DateTime","DateTime.html#method-c-civil_from_format","(utc_or_local, year, month=1, day=1, hour=0, min=0, sec=0)","<p>Returns DateTime with local offset for given year if format is local else\noffset is zero.\n\n<pre>DateTime.civil_from_format ...</pre>\n"],["class","ActiveSupport::Deprecation::DeprecatedConstantProxy","ActiveSupport/Deprecation/DeprecatedConstantProxy.html#method-i-class","()",""],["class_attribute","Class","Class.html#method-i-class_attribute","(*attrs)","<p>Declare a class-level attribute whose value is inheritable by subclasses.\nSubclasses can change their …\n"],["class_eval","Kernel","Kernel.html#method-i-class_eval","(*args, &block)","<p>class_eval on an object acts like singleton_class.class_eval.\n"],["class_methods","ActiveSupport::Concern","ActiveSupport/Concern.html#method-i-class_methods","(&class_methods_module_definition)",""],["classify","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-classify","(table_name)","<p>Create a class name from a plural table name like Rails does for table\nnames to models. Note that this …\n"],["classify","String","String.html#method-i-classify","()","<p>Create a class name from a plural table name like Rails does for table\nnames to models. Note that this …\n"],["clean","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-clean","(backtrace, kind = :silent)","<p>Returns the backtrace after all filters and silencers have been run against\nit. Filters run first, then …\n"],["cleanup","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-cleanup","(options = nil)","<p>Preemptively iterates through all stored keys and removes the ones which\nhave expired.\n"],["cleanup","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-cleanup","(options = nil)","<p>Preemptively iterates through all stored keys and removes the ones which\nhave expired.\n"],["cleanup","ActiveSupport::Cache::NullStore","ActiveSupport/Cache/NullStore.html#method-i-cleanup","(options = nil)",""],["cleanup","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-cleanup","(options = nil)","<p>Cleanup the cache by removing expired entries.\n<p>Options are passed to the underlying cache implementation. …\n"],["clear","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-clear","(options = nil)","<p>Deletes all items from the cache. In this case it deletes all the entries\nin the specified file store …\n"],["clear","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-clear","(options = nil)","<p>Clear the entire cache on all memcached servers. This method should be used\nwith care when shared cache …\n"],["clear","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::Cache::NullStore","ActiveSupport/Cache/NullStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-clear","(options = nil)","<p>Clear the entire cache. Be careful with this method since it could affect\nother processes if shared cache …\n"],["clear","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-i-clear","()",""],["clear","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-clear","(scope = :all)","<p>Clears the loaded inflections within a given scope (default is\n<code>:all</code>). Give the scope as a symbol of the …\n"],["clear!","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-clear-21","()",""],["clone_empty","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-clone_empty","()",""],["close","ActiveSupport::Gzip::Stream","ActiveSupport/Gzip/Stream.html#method-i-close","()",""],["color","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-i-color","(text, color, bold=false)","<p>Set color by using a string or one of the defined constants. If a third\noption is set to <code>true</code>, it also …\n"],["compact","Hash","Hash.html#method-i-compact","()","<p>Returns a hash with non <code>nil</code> values.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash</span> = { <span class=\"ruby-identifier\">a</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-keyword\">true</span>, <span class=\"ruby-identifier\">b</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-keyword\">false</span>, <span class=\"ruby-identifier\">c</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-keyword\">nil</span>}\n<span class=\"ruby-identifier\">hash</span>.<span class=\"ruby-identifier\">compact</span> <span class=\"ruby-comment\"># =&gt; { a: true, b: ...</span>\n</pre>\n"],["compact!","Hash","Hash.html#method-i-compact-21","()","<p>Replaces current hash with non <code>nil</code> values.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash</span> = { <span class=\"ruby-identifier\">a</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-keyword\">true</span>, <span class=\"ruby-identifier\">b</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-keyword\">false</span>, <span class=\"ruby-identifier\">c</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-keyword\">nil</span>}\n<span class=\"ruby-identifier\">hash</span>.<span class=\"ruby-identifier\">compact!</span> <span class=\"ruby-comment\"># =&gt; { a: ...</span>\n</pre>\n"],["comparable_time","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-comparable_time","()",""],["compare_with_coercion","Date","Date.html#method-i-compare_with_coercion","(other)","<p>Allow Date to be compared with Time by converting to DateTime and relying\non the &lt;=&gt; from there. …\n"],["compare_with_coercion","Time","Time.html#method-i-compare_with_coercion","(other)","<p>Layers additional behavior on Time#&lt;=&gt; so that DateTime and\nActiveSupport::TimeWithZone instances …\n"],["compare_without_coercion","Date","Date.html#method-i-compare_without_coercion","(other)",""],["compare_without_coercion","Time","Time.html#method-i-compare_without_coercion","(other)",""],["compile_ext","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-compile_ext","(array)",""],["compile_glob","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-compile_glob","(hash)",""],["compile_methods!","ActiveSupport::Configurable::Configuration","ActiveSupport/Configurable/Configuration.html#method-i-compile_methods-21","()",""],["compile_methods!","ActiveSupport::Configurable::Configuration","ActiveSupport/Configurable/Configuration.html#method-c-compile_methods-21","(keys)","<p>Compiles reader methods so we don&#39;t have to go through method_missing.\n"],["compose","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-compose","()","<p>Performs composition on all the characters.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;é&#39;</span>.<span class=\"ruby-identifier\">length</span>                       <span class=\"ruby-comment\"># =&gt; 3</span>\n<span class=\"ruby-string\">&#39;é&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">compose</span>.<span class=\"ruby-identifier\">to_s</span>.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["compose","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-compose","(codepoints)","<p>Compose decomposed characters to the composed form.\n"],["compress","ActiveSupport::Gzip","ActiveSupport/Gzip.html#method-c-compress","(source, level=Zlib::DEFAULT_COMPRESSION, strategy=Zlib::DEFAULT_STRATEGY)","<p>Compresses a string using gzip.\n"],["concat","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-concat","(value)",""],["concern","Kernel","Kernel.html#method-i-concern","(topic, &module_definition)","<p>A shortcut to define a toplevel concern, not within a module.\n<p>See Module::Concerning for more.\n"],["concern","Module::Concerning","Module/Concerning.html#method-i-concern","(topic, &module_definition)","<p>A low-cruft shortcut to define a concern.\n\n<pre>concern :EventTracking do\n  ...\nend</pre>\n<p>is equivalent to\n"],["concerning","Module::Concerning","Module/Concerning.html#method-i-concerning","(topic, &block)","<p>Define a new concern and mix it in.\n"],["conditional","ActiveSupport::Callbacks::Filters::After","ActiveSupport/Callbacks/Filters/After.html#method-c-conditional","(callback_sequence, user_callback, user_conditions)",""],["conditional","ActiveSupport::Callbacks::Filters::Around","ActiveSupport/Callbacks/Filters/Around.html#method-c-conditional","(callback_sequence, user_callback, user_conditions)",""],["conditional","ActiveSupport::Callbacks::Filters::Before","ActiveSupport/Callbacks/Filters/Before.html#method-c-conditional","(callback_sequence, user_callback, user_conditions)",""],["config","ActiveSupport::Configurable","ActiveSupport/Configurable.html#method-i-config","()","<p>Reads and writes attributes from a configuration <code>OrderedHash</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;active_support/configurable&#39;</span>\n\n<span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["config","ActiveSupport::Configurable::ClassMethods","ActiveSupport/Configurable/ClassMethods.html#method-i-config","()",""],["config_accessor","ActiveSupport::Configurable::ClassMethods","ActiveSupport/Configurable/ClassMethods.html#method-i-config_accessor","(*names)","<p>Allows you to add shortcut so that you don&#39;t have to refer to attribute\nthrough config. Also look …\n"],["configure","ActiveSupport::Configurable::ClassMethods","ActiveSupport/Configurable/ClassMethods.html#method-i-configure","()",""],["constantize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-constantize","(camel_cased_word)","<p>Tries to find a constant with the name specified in the argument string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;Module&#39;</span>.<span class=\"ruby-identifier\">constantize</span>     <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["constantize","String","String.html#method-i-constantize","()","<p><code>constantize</code> tries to find a declared constant with the name\nspecified in the string. It raises a NameError …\n"],["consumes?","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-c-consumes-3F","(string)","<p>Returns <code>true</code> when the proxy class can handle the string.\nReturns <code>false</code> otherwise.\n"],["convert_dates_from","ActiveSupport::JSON","ActiveSupport/JSON.html#method-i-convert_dates_from","(data)",""],["convert_key","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_key","(key)",""],["convert_key","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_key","(key)",""],["convert_value","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_value","(value, options = {})",""],["convert_value","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_value","(value, options = {})",""],["current","Date","Date.html#method-i-current","()","<p>Returns Time.zone.today when <code>Time.zone</code> or\n<code>config.time_zone</code> are set, otherwise just returns Date.today …\n"],["current","DateTime","DateTime.html#method-i-current","()","<p>Returns <code>Time.zone.now.to_datetime</code> when <code>Time.zone</code>\nor <code>config.time_zone</code> are set, otherwise returns\n<code>Time.now.to_datetime</code> …\n"],["current","Time","Time.html#method-i-current","()","<p>Returns <code>Time.zone.now</code> when <code>Time.zone</code> or\n<code>config.time_zone</code> are set, otherwise just returns\n<code>Time.now</code>.\n"],["current_hash","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-current_hash","()",""],["current_hash","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-current_hash","()",""],["current_thread_backend","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-current_thread_backend","()",""],["current_thread_backend=","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-current_thread_backend-3D","(name)",""],["dasherize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-dasherize","(underscored_word)","<p>Replaces underscores with dashes in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;puni_puni&#39;</span>.<span class=\"ruby-identifier\">dasherize</span> <span class=\"ruby-comment\"># =&gt; &quot;puni-puni&quot;</span>\n</pre>\n"],["dasherize","String","String.html#method-i-dasherize","()","<p>Replaces underscores with dashes in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;puni_puni&#39;</span>.<span class=\"ruby-identifier\">dasherize</span> <span class=\"ruby-comment\"># =&gt; &quot;puni-puni&quot;</span>\n</pre>\n"],["database","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-database","()",""],["day","Numeric","Numeric.html#method-i-day","()",""],["days","Numeric","Numeric.html#method-i-days","()",""],["days_ago","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-days_ago","(days)","<p>Returns a new date/time the specified number of days ago.\n"],["days_in_month","Time","Time.html#method-i-days_in_month","(month, year = now.year)","<p>Return the number of days in the given month. If no year is specified, it\nwill use the current year. …\n"],["days_since","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-days_since","(days)","<p>Returns a new date/time the specified number of days in the future.\n"],["days_span","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-days_span","(day)",""],["days_to_week_start","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-days_to_week_start","(start_day = Date.beginning_of_week)","<p>Returns the number of days to the start of the week on the given day. Week\nis assumed to start on <code>start_day</code> …\n"],["debugger","Kernel","Kernel.html#method-i-debugger","()","<p>Starts a debugging session if the <code>debugger</code> gem has been loaded\n(call rails server –debugger to do load …\n"],["decode","ActiveSupport::JSON","ActiveSupport/JSON.html#method-i-decode","(json, options = {})","<p>Parses a JSON string (JavaScript Object Notation) into a hash. See\nwww.json.org for more info.\n\n<pre>ActiveSupport::JSON.decode(&quot;{\\&quot;team\\&quot;:\\&quot;rails\\&quot;,\\&quot;players\\&quot;:\\&quot;36\\&quot;}&quot;) ...</pre>\n"],["decode","ActiveSupport::MessageVerifier","ActiveSupport/MessageVerifier.html#method-i-decode","(data)",""],["decompose","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-decompose","()","<p>Performs canonical decomposition on all the characters.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;é&#39;</span>.<span class=\"ruby-identifier\">length</span>                         <span class=\"ruby-comment\"># =&gt; 2</span>\n<span class=\"ruby-string\">&#39;é&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">decompose</span>.<span class=\"ruby-identifier\">to_s</span>.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["decompose","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-decompose","(type, codepoints)","<p>Decompose composed characters to the decomposed form.\n"],["decompress","ActiveSupport::Gzip","ActiveSupport/Gzip.html#method-c-decompress","(source)","<p>Decompresses a gzipped string.\n"],["deconstantize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-deconstantize","(path)","<p>Removes the rightmost segment from the constant expression in the string.\n\n<pre>&#39;Net::HTTP&#39;.deconstantize   ...</pre>\n"],["deconstantize","String","String.html#method-i-deconstantize","()","<p>Removes the rightmost segment from the constant expression in the string.\n\n<pre>&#39;Net::HTTP&#39;.deconstantize   ...</pre>\n"],["decrement","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Decrements an already existing integer value that is stored in the cache.\nIf the key is not found nothing …\n"],["decrement","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Decrement an integer value in the cache.\n"],["decrement","ActiveSupport::Cache::NullStore","ActiveSupport/Cache/NullStore.html#method-i-decrement","(name, amount = 1, options = nil)",""],["decrement","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Decrement an integer value in the cache.\n<p>Options are passed to the underlying cache implementation.\n<p>All …\n"],["decrypt_and_verify","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-i-decrypt_and_verify","(value)","<p>Decrypt and verify a message. We need to verify the message in order to\navoid padding attacks. Reference: …\n"],["deep_dup","Array","Array.html#method-i-deep_dup","()","<p>Returns a deep copy of array.\n\n<pre>array = [1, [2, 3]]\ndup   = array.deep_dup\ndup[1][2] = 4\n\narray[1][2] # ...</pre>\n"],["deep_dup","Hash","Hash.html#method-i-deep_dup","()","<p>Returns a deep copy of hash.\n\n<pre>hash = { a: { b: &#39;b&#39; } }\ndup  = hash.deep_dup\ndup[:a][:c] = &#39;c&#39;\n\nhash[:a][:c] ...</pre>\n"],["deep_dup","Object","Object.html#method-i-deep_dup","()","<p>Returns a deep copy of object if it&#39;s duplicable. If it&#39;s not\nduplicable, returns <code>self</code>.\n\n<pre>object ...</pre>\n"],["deep_merge","Hash","Hash.html#method-i-deep_merge","(other_hash, &block)","<p>Returns a new hash with <code>self</code> and <code>other_hash</code>\nmerged recursively.\n\n<pre>h1 = { a: true, b: { c: [1, 2, 3] } } ...</pre>\n"],["deep_merge!","Hash","Hash.html#method-i-deep_merge-21","(other_hash, &block)","<p>Same as <code>deep_merge</code>, but modifies <code>self</code>.\n"],["deep_stringify_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_stringify_keys","()",""],["deep_stringify_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_stringify_keys","()",""],["deep_stringify_keys","Hash","Hash.html#method-i-deep_stringify_keys","()","<p>Returns a new hash with all keys converted to strings. This includes the\nkeys from the root hash and …\n"],["deep_stringify_keys!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_stringify_keys-21","()",""],["deep_stringify_keys!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_stringify_keys-21","()",""],["deep_stringify_keys!","Hash","Hash.html#method-i-deep_stringify_keys-21","()","<p>Destructively convert all keys to strings. This includes the keys from the\nroot hash and from all nested …\n"],["deep_symbolize_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_symbolize_keys","()",""],["deep_symbolize_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_symbolize_keys","()",""],["deep_symbolize_keys","Hash","Hash.html#method-i-deep_symbolize_keys","()","<p>Returns a new hash with all keys converted to symbols, as long as they\nrespond to <code>to_sym</code>. This includes …\n"],["deep_symbolize_keys!","Hash","Hash.html#method-i-deep_symbolize_keys-21","()","<p>Destructively convert all keys to symbols, as long as they respond to\n<code>to_sym</code>. This includes the keys …\n"],["deep_transform_keys","Hash","Hash.html#method-i-deep_transform_keys","(&block)","<p>Returns a new hash with all keys converted by the block operation. This\nincludes the keys from the root …\n"],["deep_transform_keys!","Hash","Hash.html#method-i-deep_transform_keys-21","(&block)","<p>Destructively convert all keys by using the block operation. This includes\nthe keys from the root hash …\n"],["default","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-default","(key = nil)",""],["default","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-default","(key = nil)",""],["default_inspect","Date","Date.html#method-i-default_inspect","()",""],["default_inspect","DateTime","DateTime.html#method-i-default_inspect","()",""],["define_callbacks","ActiveSupport::Callbacks::ClassMethods","ActiveSupport/Callbacks/ClassMethods.html#method-i-define_callbacks","(*names)","<p>Define sets of events in the object life cycle that support callbacks.\n\n<pre>define_callbacks :validate\ndefine_callbacks ...</pre>\n"],["delegate","Module","Module.html#method-i-delegate","(*methods)","<p>Provides a <code>delegate</code> class method to easily expose contained\nobjects&#39; public methods as your own. …\n"],["delete","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-delete","(name, options = nil)","<p>Deletes an entry in the cache. Returns <code>true</code> if an entry is\ndeleted.\n<p>Options are passed to the underlying …\n"],["delete","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-delete","(key)","<p>Removes the specified key from the hash.\n"],["delete","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-delete","(key)","<p>Removes the specified key from the hash.\n"],["delete_empty_directories","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-delete_empty_directories","(dir)","<p>Delete empty directories in the cache.\n"],["delete_entry","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-delete_entry","(key, options)",""],["delete_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-delete_entry","(key, options)",""],["delete_matched","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::NullStore","ActiveSupport/Cache/NullStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-delete_matched","(matcher, options = nil)","<p>Delete all entries with keys matching the pattern.\n<p>Options are passed to the underlying cache implementation. …\n"],["demodulize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-demodulize","(path)","<p>Removes the module part from the expression in the string.\n\n<pre>&#39;ActiveRecord::CoreExtensions::String::Inflections&#39;.demodulize ...</pre>\n"],["demodulize","String","String.html#method-i-demodulize","()","<p>Removes the module part from the constant expression in the string.\n\n<pre>&#39;ActiveRecord::CoreExtensions::String::Inflections&#39;.demodulize ...</pre>\n"],["deprecate","Module","Module.html#method-i-deprecate","(*method_names)","\n<pre>deprecate :foo\ndeprecate bar: &#39;message&#39;\ndeprecate :foo, :bar, baz: &#39;warning!&#39;, qux: &#39;gone!&#39;</pre>\n<p>You can also …\n"],["deprecate_methods","ActiveSupport::Deprecation::MethodWrapper","ActiveSupport/Deprecation/MethodWrapper.html#method-i-deprecate_methods","(target_module, *method_names)","<p>Declare that a method has been deprecated.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">Fred</span>\n  <span class=\"ruby-identifier\">extend</span> <span class=\"ruby-keyword\">self</span>\n\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">foo</span>; <span class=\"ruby-keyword\">end</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">bar</span>; <span class=\"ruby-keyword\">end</span>\n  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["deprecated_method_warning","ActiveSupport::Deprecation::Reporting","ActiveSupport/Deprecation/Reporting.html#method-i-deprecated_method_warning","(method_name, message = nil)","<p>Outputs a deprecation warning message\n\n<pre>ActiveSupport::Deprecation.deprecated_method_warning(:method_name) ...</pre>\n"],["deprecation_caller_message","ActiveSupport::Deprecation::Reporting","ActiveSupport/Deprecation/Reporting.html#method-i-deprecation_caller_message","(callstack)",""],["deprecation_message","ActiveSupport::Deprecation::Reporting","ActiveSupport/Deprecation/Reporting.html#method-i-deprecation_message","(callstack, message = nil)",""],["deprecation_warning","ActiveSupport::Deprecation::Reporting","ActiveSupport/Deprecation/Reporting.html#method-i-deprecation_warning","(deprecated_method_name, message = nil, caller_backtrace = nil)",""],["descendants","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-i-descendants","(klass)",""],["deserialize_entry","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-deserialize_entry","(raw_value)",""],["direct_descendants","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-i-direct_descendants","(klass)",""],["dirname","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-c-dirname","()","<p>Returns the directory in which the data files are stored.\n"],["downcase","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-downcase","()","<p>Converts characters in the string to lowercase.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;VĚDA A VÝZKUM&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">downcase</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; &quot;věda a výzkum&quot;</span>\n</pre>\n"],["downcase","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-downcase","(string)",""],["dst?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-dst-3F","()","<p>Returns true if the current time is within Daylight Savings Time for the\nspecified time zone.\n\n<pre>Time.zone ...</pre>\n"],["dup","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-dup","()","<p>Returns a shallow copy of the hash.\n\n<pre>hash = ActiveSupport::HashWithIndifferentAccess.new({ a: { b: &#39;b&#39; ...</pre>\n"],["dup","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-dup","()","<p>Returns a shallow copy of the hash.\n\n<pre>hash = ActiveSupport::HashWithIndifferentAccess.new({ a: { b: &#39;b&#39; ...</pre>\n"],["duplicable?","BigDecimal","BigDecimal.html#method-i-duplicable-3F","()",""],["duplicable?","FalseClass","FalseClass.html#method-i-duplicable-3F","()","<p><code>false</code> is not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">false</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-keyword\">false</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can&#39;t dup FalseClass</span>\n</pre>\n"],["duplicable?","Method","Method.html#method-i-duplicable-3F","()","<p>Methods are not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">method</span>(:<span class=\"ruby-identifier\">puts</span>).<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-identifier\">method</span>(:<span class=\"ruby-identifier\">puts</span>).<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: ...</span>\n</pre>\n"],["duplicable?","NilClass","NilClass.html#method-i-duplicable-3F","()","<p><code>nil</code> is not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can&#39;t dup NilClass</span>\n</pre>\n"],["duplicable?","Numeric","Numeric.html#method-i-duplicable-3F","()","<p>Numbers are not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">3</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-value\">3</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can&#39;t dup Fixnum</span>\n</pre>\n"],["duplicable?","Object","Object.html#method-i-duplicable-3F","()","<p>Can you safely dup this object?\n<p>False for <code>nil</code>, <code>false</code>, <code>true</code>, symbol,\nnumber and BigDecimal(in 1.9.x) objects; …\n"],["duplicable?","Symbol","Symbol.html#method-i-duplicable-3F","()","<p>Symbols are not duplicable:\n\n<pre class=\"ruby\">:<span class=\"ruby-identifier\">my_symbol</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n:<span class=\"ruby-identifier\">my_symbol</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can&#39;t ...</span>\n</pre>\n"],["duplicable?","TrueClass","TrueClass.html#method-i-duplicable-3F","()","<p><code>true</code> is not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">true</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-keyword\">true</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can&#39;t dup TrueClass</span>\n</pre>\n"],["duration","ActiveSupport::Notifications::Event","ActiveSupport/Notifications/Event.html#method-i-duration","()",""],["duration_of_variable_length?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-duration_of_variable_length-3F","(obj)",""],["each","ActiveSupport::Dependencies::WatchStack","ActiveSupport/Dependencies/WatchStack.html#method-i-each","(&block)",""],["eager_autoload","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-eager_autoload","()",""],["eager_load!","ActiveSupport","ActiveSupport.html#method-c-eager_load-21","()",""],["eager_load!","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-eager_load-21","()",""],["empty?","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-empty-3F","()",""],["enable_warnings","Kernel","Kernel.html#method-i-enable_warnings","()","<p>Sets $VERBOSE to <code>true</code> for the duration of the block and back\nto its original value afterwards.\n"],["encode","ActiveSupport::JSON","ActiveSupport/JSON.html#method-c-encode","(value, options = nil)","<p>Dumps objects in JSON (JavaScript Object Notation). See www.json.org for\nmore info.\n\n<pre>ActiveSupport::JSON.encode({ ...</pre>\n"],["encode","ActiveSupport::MessageVerifier","ActiveSupport/MessageVerifier.html#method-i-encode","(data)",""],["encode_with","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-encode_with","(coder)",""],["encode_with","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-encode_with","(coder)",""],["encode_with","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-encode_with","(coder)",""],["encode_with","BigDecimal","BigDecimal.html#method-i-encode_with","(coder)",""],["encrypt_and_sign","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-i-encrypt_and_sign","(value)","<p>Encrypt and sign a message. We need to sign the message in order to avoid\npadding attacks. Reference: …\n"],["end_document","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-end_document","()",""],["end_element","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-end_element","(name)",""],["end_of_day","Date","Date.html#method-i-end_of_day","()","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the end of the day (23:59:59) …\n"],["end_of_day","DateTime","DateTime.html#method-i-end_of_day","()","<p>Returns a new DateTime representing the end of the day (23:59:59).\n"],["end_of_day","Time","Time.html#method-i-end_of_day","()","<p>Returns a new Time representing the end of the day, 23:59:59.999999\n(.999999999 in ruby1.9)\n"],["end_of_hour","DateTime","DateTime.html#method-i-end_of_hour","()","<p>Returns a new DateTime representing the end of the hour (hh:59:59).\n"],["end_of_hour","Time","Time.html#method-i-end_of_hour","()","<p>Returns a new Time representing the end of the hour, x:59:59.999999\n(.999999999 in ruby1.9)\n"],["end_of_minute","DateTime","DateTime.html#method-i-end_of_minute","()","<p>Returns a new DateTime representing the end of the minute (hh:mm:59).\n"],["end_of_minute","Time","Time.html#method-i-end_of_minute","()","<p>Returns a new Time representing the end of the minute, x:xx:59.999999\n(.999999999 in ruby1.9)\n"],["end_of_month","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-end_of_month","()","<p>Returns a new date/time representing the end of the month. DateTime objects\nwill have a time set to 23:59:59. …\n"],["end_of_quarter","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-end_of_quarter","()","<p>Returns a new date/time at the end of the quarter. Example: 31st March,\n30th June, 30th September. DateTime …\n"],["end_of_week","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-end_of_week","(start_day = Date.beginning_of_week)","<p>Returns a new date/time representing the end of this week on the given day.\nWeek is assumed to start …\n"],["end_of_year","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-end_of_year","()","<p>Returns a new date/time representing the end of the year. DateTime objects\nwill have a time set to 23:59:59. …\n"],["ensure_cache_path","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-ensure_cache_path","(path)","<p>Make sure a file path&#39;s directories exist.\n"],["eql?","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-eql-3F","(other)","<p>Returns <code>true</code> if <code>other</code> is also a Duration\ninstance, which has the same parts as this one.\n"],["eql?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-eql-3F","(other)",""],["eql?","Time","Time.html#method-i-eql-3F","(other)",""],["eql_with_coercion","Time","Time.html#method-i-eql_with_coercion","(other)","<p>Layers additional behavior on Time#eql? so that ActiveSupport::TimeWithZone\ninstances can be eql? to …\n"],["eql_without_coercion","Time","Time.html#method-i-eql_without_coercion","(other)",""],["error","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-error","(error_message)",""],["escape","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-escape","(key)",""],["escape_key","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-escape_key","(key)","<p>Memcache keys are binaries. So we need to force their encoding to binary\nbefore applying the regular …\n"],["event_stack","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-i-event_stack","()",""],["exabyte","Numeric","Numeric.html#method-i-exabyte","()",""],["exabytes","Numeric","Numeric.html#method-i-exabytes","()",""],["except","Hash","Hash.html#method-i-except","(*keys)","<p>Returns a hash that includes everything but the given keys.\n\n<pre>hash = { a: true, b: false, c: nil}\nhash.except(:c) ...</pre>\n"],["except!","Hash","Hash.html#method-i-except-21","(*keys)","<p>Replaces the hash without the given keys.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash</span> = { <span class=\"ruby-identifier\">a</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-keyword\">true</span>, <span class=\"ruby-identifier\">b</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-keyword\">false</span>, <span class=\"ruby-identifier\">c</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-keyword\">nil</span>}\n<span class=\"ruby-identifier\">hash</span>.<span class=\"ruby-identifier\">except!</span>(:<span class=\"ruby-identifier\">c</span>) <span class=\"ruby-comment\"># =&gt; { ...</span>\n</pre>\n"],["exclude?","Enumerable","Enumerable.html#method-i-exclude-3F","(object)","<p>The negative of the <code>Enumerable#include?</code>. Returns\n<code>true</code> if the collection does not include the object. …\n"],["exclude?","String","String.html#method-i-exclude-3F","(string)","<p>The inverse of <code>String#include?</code>. Returns true if the string\ndoes not include the other string.\n\n<pre>&quot;hello&quot;.exclude? ...</pre>\n"],["execute","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-execute","()","<p>Executes the given block and updates the latest watched files and\ntimestamp.\n"],["execute_hook","ActiveSupport","ActiveSupport.html#method-c-execute_hook","(base, options, block)",""],["execute_if_updated","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-execute_if_updated","()","<p>Execute the block given if updated.\n"],["exist?","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-exist-3F","(name, options = nil)","<p>Returns <code>true</code> if the cache contains an entry for the given key.\n<p>Options are passed to the underlying cache …\n"],["expand_cache_key","ActiveSupport::Cache","ActiveSupport/Cache.html#method-i-expand_cache_key","(key, namespace = nil)","<p>Expands out the <code>key</code> argument into a key that can be used for\nthe cache store. Optionally accepts a namespace, …\n"],["extended","ActiveSupport::PerThreadRegistry","ActiveSupport/PerThreadRegistry.html#method-c-extended","(object)",""],["extract!","Hash","Hash.html#method-i-extract-21","(*keys)","<p>Removes and returns the key/value pairs matching the given keys.\n\n<pre>{ a: 1, b: 2, c: 3, d: 4 }.extract!(:a, ...</pre>\n"],["extract_callstack","ActiveSupport::Deprecation::Reporting","ActiveSupport/Deprecation/Reporting.html#method-i-extract_callstack","(callstack)",""],["extract_options!","Array","Array.html#method-i-extract_options-21","()","<p>Extracts options from a set of arguments. Removes and returns the last\nelement in the array if it&#39;s …\n"],["extractable_options?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-extractable_options-3F","()","<p>Returns <code>true</code> so that <code>Array#extract_options!</code> finds\nmembers of this class.\n"],["extractable_options?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-extractable_options-3F","()","<p>Returns <code>true</code> so that <code>Array#extract_options!</code> finds\nmembers of this class.\n"],["extractable_options?","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-extractable_options-3F","()","<p>Returns true to make sure that this hash is extractable via\n<code>Array#extract_options!</code>\n"],["extractable_options?","Hash","Hash.html#method-i-extractable_options-3F","()","<p>By default, only instances of Hash itself are extractable. Subclasses of\nHash may implement this method …\n"],["fetch","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-fetch","(name, options = nil)","<p>Fetches data from the cache, using the given key. If there is data in the\ncache with the given key, then …\n"],["fetch","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch","(key, *extras)","<p>Same as <code>Hash#fetch</code> where the key passed as argument can be\neither a string or a symbol:\n\n<pre>counters = ActiveSupport::HashWithIndifferentAccess.new ...</pre>\n"],["fetch","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch","(key, *extras)","<p>Same as <code>Hash#fetch</code> where the key passed as argument can be\neither a string or a symbol:\n\n<pre>counters = ActiveSupport::HashWithIndifferentAccess.new ...</pre>\n"],["fetch_multi","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-fetch_multi","(*names)","<p>Fetches data from the cache, using the given keys. If there is data in the\ncache with the given keys, …\n"],["fifth","Array","Array.html#method-i-fifth","()","<p>Equal to <code>self[4]</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d e )</span>.<span class=\"ruby-identifier\">fifth</span> <span class=\"ruby-comment\"># =&gt; &quot;e&quot;</span>\n</pre>\n"],["file_path_key","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-file_path_key","(path)","<p>Translate a file path into a key.\n"],["filename","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-c-filename","()","<p>Returns the filename for the data file for this version.\n"],["filter","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-filter","(backtrace, kind = :silent)",""],["filter_backtrace","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-filter_backtrace","(backtrace)",""],["find_beginning_of_week!","Date","Date.html#method-i-find_beginning_of_week-21","(week_start)","<p>Returns week start day symbol (e.g. :monday), or raises an ArgumentError\nfor invalid day symbol.\n"],["find_cached_entry","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-find_cached_entry","(key, name, options)",""],["find_tzinfo","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-find_tzinfo","(name)",""],["find_zone","Time","Time.html#method-i-find_zone","(time_zone)",""],["find_zone!","Time","Time.html#method-i-find_zone-21","(time_zone)","<p>Returns a TimeZone instance or nil, or raises an ArgumentError for invalid\ntimezones.\n"],["finish","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-i-finish","(name, id, payload)",""],["finish","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-finish","(name, id, payload)",""],["finish","ActiveSupport::Notifications::Instrumenter","ActiveSupport/Notifications/Instrumenter.html#method-i-finish","(name, payload)","<p>Send a finish notification with <code>name</code> and <code>payload</code>.\n"],["finish","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-i-finish","(name, id, payload)",""],["first","String","String.html#method-i-first","(limit = 1)","<p>Returns the first character. If a limit is supplied, returns a substring\nfrom the beginning of the string …\n"],["first_hour","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-first_hour","(date_or_time)",""],["flush","ActiveSupport::LogSubscriber::TestHelper::MockLogger","ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-flush","()",""],["flush","ActiveSupport::TaggedLogging","ActiveSupport/TaggedLogging.html#method-i-flush","()",""],["flush_all!","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-i-flush_all-21","()","<p>Flush all log_subscribers&#39; logger.\n"],["foreign_key","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-foreign_key","(class_name, separate_class_name_and_id_with_underscore = true)","<p>Creates a foreign key name from a class name.\n<code>separate_class_name_and_id_with_underscore</code> sets whether …\n"],["foreign_key","String","String.html#method-i-foreign_key","(separate_class_name_and_id_with_underscore = true)","<p>Creates a foreign key name from a class name.\n<code>separate_class_name_and_id_with_underscore</code> sets whether …\n"],["forking_env?","ActiveSupport::Testing::Isolation","ActiveSupport/Testing/Isolation.html#method-c-forking_env-3F","()",""],["formatted_offset","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns a formatted string of the offset from UTC, or an alternative string\nif the time zone is already …\n"],["formatted_offset","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-formatted_offset","(colon=true, alternate_utc_string = nil)","<p>Returns the offset of this time zone as a formatted string, of the format\n“+HH:MM”.\n"],["formatted_offset","DateTime","DateTime.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>datetime = DateTime.civil(2000, 1, 1, 0, 0, 0, Rational(-6, 24))\ndatetime.formatted_offset         # …\n"],["formatted_offset","Time","Time.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns the UTC offset as an +HH:MM formatted string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2000</span>).<span class=\"ruby-identifier\">formatted_offset</span>        <span class=\"ruby-comment\"># =&gt; &quot;-06:00&quot; ...</span>\n</pre>\n"],["fortnight","Numeric","Numeric.html#method-i-fortnight","()",""],["fortnights","Numeric","Numeric.html#method-i-fortnights","()",""],["forty_two","Array","Array.html#method-i-forty_two","()","<p>Equal to <code>self[41]</code>. Also known as accessing “the reddit”.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">42</span>).<span class=\"ruby-identifier\">to_a</span>.<span class=\"ruby-identifier\">forty_two</span> <span class=\"ruby-comment\"># =&gt; 42</span>\n</pre>\n"],["fourth","Array","Array.html#method-i-fourth","()","<p>Equal to <code>self[3]</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d e )</span>.<span class=\"ruby-identifier\">fourth</span> <span class=\"ruby-comment\"># =&gt; &quot;d&quot;</span>\n</pre>\n"],["freeze","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-freeze","()",""],["freeze","Thread","Thread.html#method-i-freeze","()","<p>Freezes the thread so that thread local variables cannot be set via\nThread#thread_variable_set, nor can …\n"],["from","Array","Array.html#method-i-from","(position)","<p>Returns the tail of the array from <code>position</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">from</span>(<span class=\"ruby-value\">0</span>)  <span class=\"ruby-comment\"># =&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span>\n<span class=\"ruby-node\">%w( a b ...\n</span></pre>\n"],["from","String","String.html#method-i-from","(position)","<p>Returns a substring from the given position to the end of the string. If\nthe position is negative, it …\n"],["from_now","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-from_now","(time = ::Time.current)",""],["from_trusted_xml","Hash","Hash.html#method-i-from_trusted_xml","(xml)","<p>Builds a Hash from XML just like <code>Hash.from_xml</code>, but also\nallows Symbol and YAML.\n"],["from_xml","Hash","Hash.html#method-i-from_xml","(xml, disallowed_types = nil)","<p>Returns a Hash containing a collection of pairs when the key is the node\nname and the value is its content …\n"],["future?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-future-3F","()","<p>Returns true if the current object&#39;s time is in the future.\n"],["future?","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-future-3F","()","<p>Returns true if the date/time is in the future.\n"],["gem_version","ActiveSupport","ActiveSupport.html#method-c-gem_version","()","<p>Returns the version of the currently loaded Active Support as a\n<code>Gem::Version</code>\n"],["generate","ActiveSupport::MessageVerifier","ActiveSupport/MessageVerifier.html#method-i-generate","(value)",""],["generate_digest","ActiveSupport::MessageVerifier","ActiveSupport/MessageVerifier.html#method-i-generate_digest","(data)",""],["generate_key","ActiveSupport::CachingKeyGenerator","ActiveSupport/CachingKeyGenerator.html#method-i-generate_key","(salt, key_size=64)","<p>Returns a derived key suitable for use.  The default key_size is chosen to\nbe compatible with the default …\n"],["generate_key","ActiveSupport::KeyGenerator","ActiveSupport/KeyGenerator.html#method-i-generate_key","(salt, key_size=64)","<p>Returns a derived key suitable for use.  The default key_size is chosen to\nbe compatible with the default …\n"],["get","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-get","(key)",""],["get_callbacks","ActiveSupport::Callbacks::ClassMethods","ActiveSupport/Callbacks/ClassMethods.html#method-i-get_callbacks","(name)",""],["get_entry_value","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-get_entry_value","(entry, name, options)",""],["get_period_and_ensure_valid_local_time","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-get_period_and_ensure_valid_local_time","(period)",""],["getgm","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-getgm","()",""],["getlocal","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-getlocal","(utc_offset = nil)",""],["getutc","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-getutc","()",""],["getutc","DateTime","DateTime.html#method-i-getutc","()",""],["gigabyte","Numeric","Numeric.html#method-i-gigabyte","()",""],["gigabytes","Numeric","Numeric.html#method-i-gigabytes","()",""],["gmt?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-gmt-3F","()",""],["gmt_offset","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-gmt_offset","()",""],["gmtime","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-gmtime","()",""],["gmtoff","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-gmtoff","()",""],["grapheme_length","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-grapheme_length","()","<p>Returns the number of grapheme clusters in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;क्षि&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">length</span>   <span class=\"ruby-comment\"># =&gt; 4</span>\n<span class=\"ruby-string\">&#39;क्षि&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">grapheme_length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["h","ERB::Util","ERB/Util.html#method-i-h","(s)",""],["h","ERB::Util","ERB/Util.html#method-c-h","(s)",""],["halted_callback_hook","ActiveSupport::Callbacks","ActiveSupport/Callbacks.html#method-i-halted_callback_hook","(filter)","<p>A hook invoked every time a before callback is halted. This can be\noverridden in AS::Callback implementors …\n"],["halting","ActiveSupport::Callbacks::Filters::After","ActiveSupport/Callbacks/Filters/After.html#method-c-halting","(callback_sequence, user_callback)",""],["halting","ActiveSupport::Callbacks::Filters::Around","ActiveSupport/Callbacks/Filters/Around.html#method-c-halting","(callback_sequence, user_callback)",""],["halting","ActiveSupport::Callbacks::Filters::Before","ActiveSupport/Callbacks/Filters/Before.html#method-c-halting","(callback_sequence, user_callback, halted_lambda, filter)",""],["halting_and_conditional","ActiveSupport::Callbacks::Filters::After","ActiveSupport/Callbacks/Filters/After.html#method-c-halting_and_conditional","(callback_sequence, user_callback, user_conditions)",""],["halting_and_conditional","ActiveSupport::Callbacks::Filters::Around","ActiveSupport/Callbacks/Filters/Around.html#method-c-halting_and_conditional","(callback_sequence, user_callback, user_conditions)",""],["halting_and_conditional","ActiveSupport::Callbacks::Filters::Before","ActiveSupport/Callbacks/Filters/Before.html#method-c-halting_and_conditional","(callback_sequence, user_callback, user_conditions, halted_lambda, filter)",""],["handle_expired_entry","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-handle_expired_entry","(entry, key, options)",""],["handler_for_rescue","ActiveSupport::Rescuable","ActiveSupport/Rescuable.html#method-i-handler_for_rescue","(exception)",""],["has_key?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-has_key-3F","(key)",""],["has_key?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-has_key-3F","(key)",""],["hash","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-hash","()",""],["hash","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-hash","()",""],["hour","Numeric","Numeric.html#method-i-hour","()",""],["hours","Numeric","Numeric.html#method-i-hours","()",""],["html_escape","ERB::Util","ERB/Util.html#method-c-html_escape","(s)","<p>A utility method for escaping HTML tag characters. This method is also\naliased as <code>h</code>.\n<p>In your ERB templates, …\n"],["html_escape","ERB::Util","ERB/Util.html#method-i-html_escape","(s)","<p>A utility method for escaping HTML tag characters. This method is also\naliased as <code>h</code>.\n<p>In your ERB templates, …\n"],["html_escape_interpolated_argument","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-html_escape_interpolated_argument","(arg)",""],["html_escape_once","ERB::Util","ERB/Util.html#method-i-html_escape_once","(s)","<p>A utility method for escaping HTML without affecting existing escaped\nentities.\n\n<pre>html_escape_once(&#39;1 &lt; ...</pre>\n"],["html_escape_once","ERB::Util","ERB/Util.html#method-c-html_escape_once","(s)","<p>A utility method for escaping HTML without affecting existing escaped\nentities.\n\n<pre>html_escape_once(&#39;1 &lt; ...</pre>\n"],["html_safe?","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-html_safe-3F","()",""],["html_safe?","Numeric","Numeric.html#method-i-html_safe-3F","()",""],["html_safe?","Object","Object.html#method-i-html_safe-3F","()",""],["httpdate","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-httpdate","()","<p>Returns a string of the object&#39;s date and time in the format used by\nHTTP requests.\n\n<pre>Time.zone.now.httpdate ...</pre>\n"],["human","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-human","(rule, replacement)","<p>Specifies a humanized form of a string by a regular expression rule or by a\nstring mapping. When using …\n"],["humanize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-humanize","(lower_case_and_underscored_word, options = {})","<p>Tweaks an attribute name for display to end users.\n<p>Specifically, <code>humanize</code> performs these transformations: …\n"],["humanize","String","String.html#method-i-humanize","(options = {})","<p>Capitalizes the first word, turns underscores into spaces, and strips a\ntrailing &#39;_id&#39; if present. …\n"],["in","Date","Date.html#method-i-in","(seconds)",""],["in","DateTime","DateTime.html#method-i-in","(seconds)",""],["in","Time","Time.html#method-i-in","(seconds)",""],["in?","Object","Object.html#method-i-in-3F","(another_object)","<p>Returns true if this object is included in the argument. Argument must be\nany object which responds to …\n"],["in_char_class?","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-in_char_class-3F","(codepoint, classes)","<p>Detect whether the codepoint is in a certain character class. Returns\n<code>true</code> when it&#39;s in the specified …\n"],["in_groups","Array","Array.html#method-i-in_groups","(number, fill_with = nil)","<p>Splits or iterates over the array in <code>number</code> of groups, padding\nany remaining slots with <code>fill_with</code> unless …\n"],["in_groups_of","Array","Array.html#method-i-in_groups_of","(number, fill_with = nil)","<p>Splits or iterates over the array in groups of size <code>number</code>,\npadding any remaining slots with <code>fill_with</code> …\n"],["in_milliseconds","Numeric","Numeric.html#method-i-in_milliseconds","()","<p>Used with the standard time durations, like 1.hour.in_milliseconds – so we\ncan feed them to JavaScript …\n"],["in_time_zone","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-in_time_zone","(new_zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code>, or the specified\nzone.\n"],["in_time_zone","DateAndTime::Zones","DateAndTime/Zones.html#method-i-in_time_zone","(zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code> if a zone is given\nor if Time.zone_default is set. Otherwise …\n"],["in_time_zone","String","String.html#method-i-in_time_zone","(zone = ::Time.zone)","<p>Converts String to a TimeWithZone in the current zone if Time.zone or\nTime.zone_default is set, otherwise …\n"],["include?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-include-3F","(key)",""],["include?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-include-3F","(key)",""],["include_fallbacks_module","I18n::Railtie","I18n/Railtie.html#method-c-include_fallbacks_module","()",""],["include_with_range?","Range","Range.html#method-i-include_with_range-3F","(value)","<p>Extends the default Range#include? to support range comparisons.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>) <span class=\"ruby-comment\"># =&gt; true</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">2</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">3</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["included","ActiveSupport::Concern","ActiveSupport/Concern.html#method-i-included","(base = nil, &block)",""],["increment","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-increment","(name, amount = 1, options = nil)","<p>Increments an already existing integer value that is stored in the cache.\nIf the key is not found nothing …\n"],["increment","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-increment","(name, amount = 1, options = nil)","<p>Increment an integer value in the cache.\n"],["increment","ActiveSupport::Cache::NullStore","ActiveSupport/Cache/NullStore.html#method-i-increment","(name, amount = 1, options = nil)",""],["increment","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-increment","(name, amount = 1, options = nil)","<p>Increment an integer value in the cache.\n<p>Options are passed to the underlying cache implementation.\n<p>All …\n"],["indent","String","String.html#method-i-indent","(amount, indent_string=nil, indent_empty_lines=false)","<p>Indents the lines in the receiver:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;def some_method\n  some_code\nend\n&quot;</span>.<span class=\"ruby-identifier\">indent</span>(<span class=\"ruby-value\">2</span>)\n<span class=\"ruby-comment\"># =&gt;</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">some_method</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["indent!","String","String.html#method-i-indent-21","(amount, indent_string=nil, indent_empty_lines=false)","<p>Same as <code>indent</code>, except it indents the receiver in-place.\n<p>Returns the indented string, or <code>nil</code> if there …\n"],["index_by","Enumerable","Enumerable.html#method-i-index_by","()","<p>Convert an enumerable to a hash.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">people</span>.<span class=\"ruby-identifier\">index_by</span>(<span class=\"ruby-operator\">&amp;</span>:<span class=\"ruby-identifier\">login</span>)\n  =<span class=\"ruby-operator\">&gt;</span> { <span class=\"ruby-string\">&quot;nextangle&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">&lt;</span><span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">...</span><span class=\"ruby-operator\">&gt;</span>, <span class=\"ruby-string\">&quot;chade-&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inflections","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-inflections","(locale = :en)","<p>Yields a singleton instance of Inflector::Inflections so you can specify\nadditional inflector rules. …\n"],["inheritable_copy","ActiveSupport::InheritableOptions","ActiveSupport/InheritableOptions.html#method-i-inheritable_copy","()",""],["inherited","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-i-inherited","(base)",""],["init_fallbacks","I18n::Railtie","I18n/Railtie.html#method-c-init_fallbacks","(fallbacks)",""],["initialize_copy","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-initialize_copy","(other)",""],["initialize_i18n","I18n::Railtie","I18n/Railtie.html#method-c-initialize_i18n","(app)","<p>Setup i18n configuration.\n"],["inquiry","String","String.html#method-i-inquiry","()","<p>Wraps the current string in the <code>ActiveSupport::StringInquirer</code>\nclass, which gives you a prettier way to …\n"],["inspect","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-inspect","()",""],["inspect","Date","Date.html#method-i-inspect","()",""],["inspect","DateTime","DateTime.html#method-i-inspect","()",""],["instance","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-c-instance","(locale = :en)",""],["instance","ActiveSupport::PerThreadRegistry","ActiveSupport/PerThreadRegistry.html#method-i-instance","()",""],["instance_values","Object","Object.html#method-i-instance_values","()","<p>Returns a hash with string keys that maps instance variable names without\n“@” to their corresponding …\n"],["instance_variable_names","Object","Object.html#method-i-instance_variable_names","()","<p>Returns an array of instance variable names as strings including “@”.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">C</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">initialize</span>(<span class=\"ruby-identifier\">x</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["instrument","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-instrument","(operation, key, options = nil)",""],["instrument","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-c-instrument","()","<p>:deprecated:\n"],["instrument","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-i-instrument","(name, payload = {})",""],["instrument","ActiveSupport::Notifications::Instrumenter","ActiveSupport/Notifications/Instrumenter.html#method-i-instrument","(name, payload={})","<p>Instrument the given block by measuring the time taken to execute it and\npublish it. Notice that events …\n"],["instrument=","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-c-instrument-3D","(boolean)","<p>:deprecated:\n"],["instrumenter","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-i-instrumenter","()",""],["irregular","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-irregular","(singular, plural)","<p>Specifies a new irregular that applies to both pluralization and\nsingularization at the same time. This …\n"],["is_a?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-is_a-3F","(klass)","<p>Say we&#39;re a Time to thwart type checking.\n"],["is_missing?","LoadError","LoadError.html#method-i-is_missing-3F","(location)","<p>Returns true if the given path name (except perhaps for the “.rb”\nextension) is the missing …\n"],["is_missing?","LoadError","LoadError.html#method-i-is_missing-3F","(location)","<p>Returns true if the given path name (except perhaps for the “.rb”\nextension) is the missing …\n"],["is_utf8?","String","String.html#method-i-is_utf8-3F","()",""],["isdst","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-isdst","()",""],["iso8601","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-iso8601","(fraction_digits = 0)",""],["itself","Object","Object.html#method-i-itself","()","<p>Returns the object itself.\n<p>Useful for chaining methods, such as Active Record scopes:\n\n<pre>Event.public_send(state.presence_in([ ...</pre>\n"],["json_escape","ERB::Util","ERB/Util.html#method-i-json_escape","(s)","<p>A utility method for escaping HTML entities in JSON strings. Specifically,\nthe &amp;, &gt; and &lt; characters …\n"],["json_escape","ERB::Util","ERB/Util.html#method-c-json_escape","(s)","<p>A utility method for escaping HTML entities in JSON strings. Specifically,\nthe &amp;, &gt; and &lt; characters …\n"],["key?","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-key-3F","(key)",""],["key?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-key-3F","(key)","<p>Checks the hash for a key matching the argument passed in:\n\n<pre>hash = ActiveSupport::HashWithIndifferentAccess.new ...</pre>\n"],["key?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-key-3F","(key)","<p>Checks the hash for a key matching the argument passed in:\n\n<pre>hash = ActiveSupport::HashWithIndifferentAccess.new ...</pre>\n"],["key_file_path","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-key_file_path","(key)","<p>Translate a key into a file path.\n"],["key_matcher","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-key_matcher","(pattern, options)","<p>Add the namespace defined in the options to a pattern designed to match\nkeys. Implementations that support …\n"],["kilobyte","Numeric","Numeric.html#method-i-kilobyte","()",""],["kilobytes","Numeric","Numeric.html#method-i-kilobytes","()",""],["kind_of?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-kind_of-3F","(klass)",""],["last","String","String.html#method-i-last","(limit = 1)","<p>Returns the last character of the string. If a limit is supplied, returns a\nsubstring from the end of …\n"],["last_hour","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-last_hour","(date_or_time)",""],["last_month","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-last_month","()",""],["last_quarter","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-last_quarter","()",""],["last_week","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-last_week","(start_day = Date.beginning_of_week)",""],["last_year","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-last_year","()",""],["level","LoggerSilence","LoggerSilence.html#method-i-level","()",""],["limit","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-limit","(limit)","<p>Limits the byte size of the string to a number of bytes without breaking\ncharacters. Usable when the …\n"],["listeners_for","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-listeners_for","(name)",""],["listening?","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-listening-3F","(name)",""],["load","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-i-load","()","<p>Loads the Unicode database and returns all the internal objects of\nUnicodeDatabase.\n"],["load_with_autoloading","Marshal","Marshal.html#method-i-load_with_autoloading","(source)",""],["local","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-local","(*args)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from given values. …\n"],["local_cache","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-local_cache","()",""],["local_cache_key","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-local_cache_key","()",""],["local_log_id","LoggerSilence","LoggerSilence.html#method-i-local_log_id","()",""],["local_to_utc","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-local_to_utc","(time, dst=true)","<p>Adjust the given time to the simultaneous time in UTC. Returns a Time.utc()\ninstance.\n"],["localtime","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-localtime","(utc_offset = nil)","<p>Returns a <code>Time.local()</code> instance of the simultaneous time in\nyour system&#39;s <code>ENV['TZ']</code> zone.\n"],["log","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-log","(operation, key, options = nil)",""],["log_subscribers","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-i-log_subscribers","()",""],["logged","ActiveSupport::LogSubscriber::TestHelper::MockLogger","ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-logged","(level)",""],["logger","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-i-logger","()",""],["lookup_store","ActiveSupport::Cache","ActiveSupport/Cache.html#method-i-lookup_store","(*store_option)","<p>Creates a new Store object according to the given options.\n<p>If no arguments are passed to this method, …\n"],["many?","Enumerable","Enumerable.html#method-i-many-3F","()","<p>Returns <code>true</code> if the enumerable has more than 1 element.\nFunctionally equivalent to <code>enum.to_a.size &gt;</code> …\n"],["marshal_dump","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-marshal_dump","()",""],["marshal_load","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-marshal_load","(variables)",""],["mattr_accessor","Module","Module.html#method-i-mattr_accessor","(*syms, &blk)","<p>Defines both class and instance accessors for class attributes.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">HairColors</span>\n  <span class=\"ruby-identifier\">mattr_accessor</span> :<span class=\"ruby-identifier\">hair_colors</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["mattr_reader","Module","Module.html#method-i-mattr_reader","(*syms)","<p>Defines a class attribute and creates a class and instance reader methods.\nThe underlying the class variable …\n"],["mattr_writer","Module","Module.html#method-i-mattr_writer","(*syms)","<p>Defines a class attribute and creates a class and instance writer methods\nto allow assignment to the …\n"],["max_mtime","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-max_mtime","(paths)","<p>This method returns the maximum mtime of the files in <code>paths</code>,\nor <code>nil</code> if the array is empty.\n<p>Files with …\n"],["mb_chars","String","String.html#method-i-mb_chars","()","<p>Multibyte proxy\n<p><code>mb_chars</code> is a multibyte safe proxy for string methods.\n<p>It creates and returns an instance …\n"],["megabyte","Numeric","Numeric.html#method-i-megabyte","()",""],["megabytes","Numeric","Numeric.html#method-i-megabytes","()",""],["member?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-member-3F","(key)",""],["member?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-member-3F","(key)",""],["merge","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-merge","(hash, &block)","<p>This method has the same semantics of <code>update</code>, except it does\nnot modify the receiver but rather returns …\n"],["merge","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-merge","(hash, &block)","<p>This method has the same semantics of <code>update</code>, except it does\nnot modify the receiver but rather returns …\n"],["merge!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-merge-21","(other_hash)",""],["merge!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-merge-21","(other_hash)",""],["method_added","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-i-method_added","(event)","<p>Adds event subscribers for all new methods added to the class.\n"],["method_missing","ActiveSupport::LogSubscriber::TestHelper::MockLogger","ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-method_missing","(level, message = nil)",""],["method_missing","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-method_missing","(method, *args, &block)","<p>Forward all undefined methods to the wrapped string.\n"],["method_missing","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-method_missing","(name, *args)",""],["method_missing","ActiveSupport::StringInquirer","ActiveSupport/StringInquirer.html#method-i-method_missing","(method_name, *arguments)",""],["method_missing","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-method_missing","(sym, *args, &block)","<p>Send the missing method to <code>time</code> instance, and wrap result in a\nnew TimeWithZone with the existing <code>time_zone</code> …\n"],["midday","Date","Date.html#method-i-midday","()",""],["midday","DateTime","DateTime.html#method-i-midday","()",""],["midday","Time","Time.html#method-i-midday","()",""],["middle_of_day","Date","Date.html#method-i-middle_of_day","()","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the middle of the day …\n"],["middle_of_day","DateTime","DateTime.html#method-i-middle_of_day","()","<p>Returns a new DateTime representing the middle of the day (12:00)\n"],["middle_of_day","Time","Time.html#method-i-middle_of_day","()","<p>Returns a new Time representing the middle of the day (12:00)\n"],["middleware","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-middleware","()","<p>Middleware class can be inserted as a Rack handler to be local cache for\nthe duration of request.\n"],["midnight","Date","Date.html#method-i-midnight","()",""],["midnight","DateTime","DateTime.html#method-i-midnight","()",""],["midnight","Time","Time.html#method-i-midnight","()",""],["minus_with_coercion","Time","Time.html#method-i-minus_with_coercion","(other)","<p>Time#- can also be used to determine the number of seconds between two Time\ninstances. We&#39;re layering …\n"],["minus_without_coercion","Time","Time.html#method-i-minus_without_coercion","(other)",""],["minus_without_duration","Time","Time.html#method-i-minus_without_duration","(other)",""],["minute","Numeric","Numeric.html#method-i-minute","()",""],["minutes","Numeric","Numeric.html#method-i-minutes","()",""],["missing_name","NameError","NameError.html#method-i-missing_name","()","<p>Extract the name of the missing constant from the exception message.\n"],["missing_name?","NameError","NameError.html#method-i-missing_name-3F","(name)","<p>Was this exception raised because the given name was missing?\n"],["modify_value","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-modify_value","(name, amount, options)","<p>Modifies the amount of an already existing integer value that is stored in\nthe cache. If the key is not …\n"],["monday","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-monday","()","<p>Returns Monday of this week assuming that week starts on Monday.\n<code>DateTime</code> objects have their time set …\n"],["month","Integer","Integer.html#method-i-month","()",""],["months","Integer","Integer.html#method-i-months","()","<p>Enables the use of time calculations and declarations, like\n<code>45.minutes + 2.hours + 4.years</code>.\n<p>These methods …\n"],["months_ago","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-months_ago","(months)","<p>Returns a new date/time the specified number of months ago.\n"],["months_since","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-months_since","(months)","<p>Returns a new date/time the specified number of months in the future.\n"],["ms","Benchmark","Benchmark.html#method-i-ms","()","<p>Benchmark realtime in milliseconds.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Benchmark</span>.<span class=\"ruby-identifier\">realtime</span> { <span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">all</span> }\n<span class=\"ruby-comment\"># =&gt; 8.0e-05</span>\n\n<span class=\"ruby-constant\">Benchmark</span>.<span class=\"ruby-identifier\">ms</span> { <span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">all</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["multiple_of?","Integer","Integer.html#method-i-multiple_of-3F","(number)","<p>Check whether the integer is evenly divisible by the argument.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">0</span>.<span class=\"ruby-identifier\">multiple_of?</span>(<span class=\"ruby-value\">0</span>)  <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-value\">6</span>.<span class=\"ruby-identifier\">multiple_of?</span>(<span class=\"ruby-value\">5</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["mute","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-mute","()","<p>Silence the logger within a block.\n"],["name","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-c-name","()","<p>Report class name as &#39;Time&#39; to thwart type checking.\n"],["names","QualifiedConstUtils","QualifiedConstUtils.html#method-c-names","(path)",""],["namespaced_key","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-namespaced_key","(key, options)","<p>Prefix a key with the namespace. Namespace and key will be delimited with a\ncolon.\n"],["nested_under_indifferent_access","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-nested_under_indifferent_access","()",""],["nested_under_indifferent_access","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-nested_under_indifferent_access","()",""],["nested_under_indifferent_access","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-nested_under_indifferent_access","()",""],["nested_under_indifferent_access","Hash","Hash.html#method-i-nested_under_indifferent_access","()","<p>Called when object is nested under an object that receives\n#with_indifferent_access. This method will …\n"],["new","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-c-new","()",""],["new","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-c-new","(cache_path, options = nil)",""],["new","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-c-new","(*addresses)","<p>Creates a new MemCacheStore object, with the given memcached server\naddresses. Each address is either …\n"],["new","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-c-new","(options = nil)",""],["new","ActiveSupport::Cache::NullStore","ActiveSupport/Cache/NullStore.html#method-c-new","(options = nil)",""],["new","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-c-new","(options = nil)","<p>Create a new cache. The options will be passed to any write method calls\nexcept for <code>:namespace</code> which …\n"],["new","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-c-new","()",""],["new","ActiveSupport::CachingKeyGenerator","ActiveSupport/CachingKeyGenerator.html#method-c-new","(key_generator)",""],["new","ActiveSupport::Callbacks::CallbackSequence","ActiveSupport/Callbacks/CallbackSequence.html#method-c-new","(&call)",""],["new","ActiveSupport::Callbacks::Conditionals::Value","ActiveSupport/Callbacks/Conditionals/Value.html#method-c-new","(&block)",""],["new","ActiveSupport::Concurrency::Latch","ActiveSupport/Concurrency/Latch.html#method-c-new","(count = 1)",""],["new","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-c-new","()",""],["new","ActiveSupport::Dependencies::WatchStack","ActiveSupport/Dependencies/WatchStack.html#method-c-new","()","<p>@watching is a stack of lists of constants being watched. For instance, if\nparent.rb is autoloaded, the …\n"],["new","ActiveSupport::Deprecation","ActiveSupport/Deprecation.html#method-c-new","(deprecation_horizon = '5.0', gem_name = 'Rails')","<p>It accepts two parameters on initialization. The first is a version of\nlibrary and the second is a library …\n"],["new","ActiveSupport::Deprecation::DeprecatedConstantProxy","ActiveSupport/Deprecation/DeprecatedConstantProxy.html#method-c-new","(old_const, new_const, deprecator = ActiveSupport::Deprecation.instance)",""],["new","ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy","ActiveSupport/Deprecation/DeprecatedInstanceVariableProxy.html#method-c-new","(instance, method, var = \"@#{method}\", deprecator = ActiveSupport::Deprecation.instance)",""],["new","ActiveSupport::Deprecation::DeprecatedObjectProxy","ActiveSupport/Deprecation/DeprecatedObjectProxy.html#method-c-new","(object, message, deprecator = ActiveSupport::Deprecation.instance)",""],["new","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-c-new","(files, dirs={}, &block)","<p>It accepts two parameters on initialization. The first is an array of files\nand the second is an optional …\n"],["new","ActiveSupport::Gzip::Stream","ActiveSupport/Gzip/Stream.html#method-c-new","(*)",""],["new","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-c-new","(constructor = {})",""],["new","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-c-new","(constructor = {})",""],["new","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-c-new","()",""],["new","ActiveSupport::InheritableOptions","ActiveSupport/InheritableOptions.html#method-c-new","(parent = nil)",""],["new","ActiveSupport::KeyGenerator","ActiveSupport/KeyGenerator.html#method-c-new","(secret, options = {})",""],["new","ActiveSupport::LogSubscriber::TestHelper::MockLogger","ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-c-new","(level = DEBUG)",""],["new","ActiveSupport::Logger","ActiveSupport/Logger.html#method-c-new","(*args)",""],["new","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-c-new","(secret, *signature_key_or_options)","<p>Initialize a new MessageEncryptor. <code>secret</code> must be at least as\nlong as the cipher key size. For the default …\n"],["new","ActiveSupport::MessageVerifier","ActiveSupport/MessageVerifier.html#method-c-new","(secret, options = {})",""],["new","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-c-new","(string)","<p>Creates a new Chars instance by wrapping <em>string</em>.\n"],["new","ActiveSupport::Multibyte::Unicode::Codepoint","ActiveSupport/Multibyte/Unicode/Codepoint.html#method-c-new","()","<p>Initializing Codepoint object with default values\n"],["new","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-c-new","()",""],["new","ActiveSupport::Notifications::Event","ActiveSupport/Notifications/Event.html#method-c-new","(name, start, ending, transaction_id, payload)",""],["new","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-c-new","()",""],["new","ActiveSupport::Notifications::Instrumenter","ActiveSupport/Notifications/Instrumenter.html#method-c-new","(notifier)",""],["new","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-c-new","(*)",""],["new","ActiveSupport::SafeBuffer::SafeConcatError","ActiveSupport/SafeBuffer/SafeConcatError.html#method-c-new","()",""],["new","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-c-new","()",""],["new","ActiveSupport::TaggedLogging","ActiveSupport/TaggedLogging.html#method-c-new","(logger)",""],["new","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-c-new","(utc_time, time_zone, local_time = nil, period = nil)",""],["new","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-new","(name)","<p>Returns a TimeZone instance with the given name, or <code>nil</code> if no\nsuch TimeZone instance exists. (This exists …\n"],["new","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-new","(name, utc_offset = nil, tzinfo = nil)","<p>Create a new TimeZone object with the given name and offset. The offset is\nthe number of seconds that …\n"],["new","ActiveSupport::XMLConverter::DisallowedType","ActiveSupport/XMLConverter/DisallowedType.html#method-c-new","(type)",""],["new_cipher","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-i-new_cipher","()",""],["new_constants","ActiveSupport::Dependencies::WatchStack","ActiveSupport/Dependencies/WatchStack.html#method-i-new_constants","()","<p>Returns a list of new constants found since the last call to\n<code>watch_namespaces</code>.\n"],["new_from_hash_copying_default","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-c-new_from_hash_copying_default","(hash)",""],["new_from_hash_copying_default","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-c-new_from_hash_copying_default","(hash)",""],["next_month","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-next_month","()","<p>Short-hand for months_since(1).\n"],["next_quarter","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-next_quarter","()","<p>Short-hand for months_since(3)\n"],["next_week","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-next_week","(given_day_in_next_week = Date.beginning_of_week)","<p>Returns a new date/time representing the given day in the next week.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">today</span> = <span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">today</span> <span class=\"ruby-comment\"># =&gt; Thu, 07 May ...</span>\n</pre>\n"],["next_year","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-next_year","()","<p>Short-hand for years_since(1).\n"],["noise","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-noise","(backtrace)",""],["noon","Date","Date.html#method-i-noon","()",""],["noon","DateTime","DateTime.html#method-i-noon","()",""],["noon","Time","Time.html#method-i-noon","()",""],["normalize","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-normalize","(form = nil)","<p>Returns the KC normalization of the string by default. NFKC is considered\nthe best normalization form …\n"],["normalize","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-normalize","(string, form=nil)","<p>Returns the KC normalization of the string by default. NFKC is considered\nthe best normalization form …\n"],["now","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-now","()","<p>Returns an ActiveSupport::TimeWithZone instance representing the current\ntime in the time zone represented …\n"],["nsec","DateTime","DateTime.html#method-i-nsec","()","<p>Returns the fraction of a second as nanoseconds\n"],["number_to_currency","ActiveSupport::NumberHelper","ActiveSupport/NumberHelper.html#method-i-number_to_currency","(number, options = {})","<p>Formats a <code>number</code> into a currency string (e.g., $13.65). You\ncan customize the format in the <code>options</code> hash. …\n"],["number_to_delimited","ActiveSupport::NumberHelper","ActiveSupport/NumberHelper.html#method-i-number_to_delimited","(number, options = {})","<p>Formats a <code>number</code> with grouped thousands using\n<code>delimiter</code> (e.g., 12,324). You can customize the format …\n"],["number_to_human","ActiveSupport::NumberHelper","ActiveSupport/NumberHelper.html#method-i-number_to_human","(number, options = {})","<p>Pretty prints (formats and approximates) a number in a way it is more\nreadable by humans (eg.: 1200000000 …\n"],["number_to_human_size","ActiveSupport::NumberHelper","ActiveSupport/NumberHelper.html#method-i-number_to_human_size","(number, options = {})","<p>Formats the bytes in <code>number</code> into a more understandable\nrepresentation (e.g., giving it 1500 yields 1.5 …\n"],["number_to_percentage","ActiveSupport::NumberHelper","ActiveSupport/NumberHelper.html#method-i-number_to_percentage","(number, options = {})","<p>Formats a <code>number</code> as a percentage string (e.g., 65%). You can\ncustomize the format in the <code>options</code> hash. …\n"],["number_to_phone","ActiveSupport::NumberHelper","ActiveSupport/NumberHelper.html#method-i-number_to_phone","(number, options = {})","<p>Formats a <code>number</code> into a US phone number (e.g., (555)\n123-9876). You can customize the format in the  …\n"],["number_to_rounded","ActiveSupport::NumberHelper","ActiveSupport/NumberHelper.html#method-i-number_to_rounded","(number, options = {})","<p>Formats a <code>number</code> with the specified level of\n<code>:precision</code> (e.g., 112.32 has a precision of 2 if\n<code>:significant</code> …\n"],["offset_in_seconds","DateTime","DateTime.html#method-i-offset_in_seconds","()",""],["on_cdata_block","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_cdata_block","(string)",""],["on_characters","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_characters","(string)",""],["on_end_document","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_end_document","()",""],["on_end_element","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_end_element","(name)",""],["on_load","ActiveSupport","ActiveSupport.html#method-c-on_load","(name, options = {}, &block)",""],["on_start_document","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_start_document","()",""],["on_start_element","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_start_element","(name, attrs = {})",""],["ordinal","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-ordinal","(number)","<p>Returns the suffix that should be added to a number to denote the position\nin an ordered sequence such …\n"],["ordinal","Integer","Integer.html#method-i-ordinal","()","<p>Ordinal returns the suffix used to denote the position in an ordered\nsequence such as 1st, 2nd, 3rd, …\n"],["ordinalize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-ordinalize","(number)","<p>Turns a number into an ordinal string used to denote the position in an\nordered sequence such as 1st, …\n"],["ordinalize","Integer","Integer.html#method-i-ordinalize","()","<p>Ordinalize turns a number into an ordinal string used to denote the\nposition in an ordered sequence such …\n"],["original_concat","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-original_concat","(value)",""],["overlaps?","Range","Range.html#method-i-overlaps-3F","(other)","<p>Compare two ranges and see if they overlap each other\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">overlaps?</span>(<span class=\"ruby-value\">4</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">6</span>) <span class=\"ruby-comment\"># =&gt; true</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">overlaps?</span>(<span class=\"ruby-value\">7</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">9</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["pack_graphemes","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-pack_graphemes","(unpacked)","<p>Reverse operation of unpack_graphemes.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Unicode</span>.<span class=\"ruby-identifier\">pack_graphemes</span>(<span class=\"ruby-constant\">Unicode</span>.<span class=\"ruby-identifier\">unpack_graphemes</span>(<span class=\"ruby-string\">&#39;क्षि&#39;</span>)) <span class=\"ruby-comment\"># =&gt; &#39;क्षि&#39;</span>\n</pre>\n"],["parameterize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-parameterize","(string, sep = '-')","<p>Replaces special characters in a string so that it may be used as part of a\n&#39;pretty&#39; URL.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parameterize","String","String.html#method-i-parameterize","(sep = '-')","<p>Replaces special characters in a string so that it may be used as part of a\n&#39;pretty&#39; URL.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parent","Module","Module.html#method-i-parent","()","<p>Returns the module which contains this one according to its name.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">M</span>\n  <span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">N</span>\n  <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-constant\">X</span> = <span class=\"ruby-constant\">M</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">N</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parent_name","Module","Module.html#method-i-parent_name","()","<p>Returns the name of the module containing this one.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">M</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">N</span>.<span class=\"ruby-identifier\">parent_name</span> <span class=\"ruby-comment\"># =&gt; &quot;M&quot;</span>\n</pre>\n"],["parent_of?","ActiveSupport::Notifications::Event","ActiveSupport/Notifications/Event.html#method-i-parent_of-3F","(event)",""],["parents","Module","Module.html#method-i-parents","()","<p>Returns all the parents of this module according to its name, ordered from\nnested outwards. The receiver …\n"],["parse","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-parse","(str, now=now())","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from parsed string. …\n"],["parse_error","ActiveSupport::JSON","ActiveSupport/JSON.html#method-i-parse_error","()","<p>Returns the class of the error that will be raised when there is an error\nin decoding JSON. Using this …\n"],["past?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-past-3F","()","<p>Returns true if the current object&#39;s time is in the past.\n"],["past?","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-past-3F","()","<p>Returns true if the date/time is in the past.\n"],["path","LoadError","LoadError.html#method-i-path","()","<p>Returns the path which was unable to be loaded.\n"],["path","LoadError","LoadError.html#method-i-path","()","<p>Returns the path which was unable to be loaded.\n"],["period","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-period","()","<p>Returns the underlying TZInfo::TimezonePeriod.\n"],["period_for_local","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-period_for_local","(time, dst=true)","<p>Available so that TimeZone instances respond like TZInfo::Timezone\ninstances.\n"],["period_for_utc","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-period_for_utc","(time)","<p>Available so that TimeZone instances respond like TZInfo::Timezone\ninstances.\n"],["petabyte","Numeric","Numeric.html#method-i-petabyte","()",""],["petabytes","Numeric","Numeric.html#method-i-petabytes","()",""],["plural","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-plural","(rule, replacement)","<p>Specifies a new pluralization rule and its replacement. The rule can either\nbe a string or a regular …\n"],["pluralize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-pluralize","(word, locale = :en)","<p>Returns the plural form of the word in the string.\n<p>If passed an optional <code>locale</code> parameter, the word will …\n"],["pluralize","String","String.html#method-i-pluralize","(count = nil, locale = :en)","<p>Returns the plural form of the word in the string.\n<p>If the optional parameter <code>count</code> is specified, the singular …\n"],["pop_modules","ActiveSupport::Dependencies::WatchStack","ActiveSupport/Dependencies/WatchStack.html#method-i-pop_modules","(modules)",""],["prepend","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-prepend","(value)",""],["prepend!","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-prepend-21","(value)",""],["presence","Object","Object.html#method-i-presence","()","<p>Returns the receiver if it&#39;s present otherwise returns\n<code>nil</code>. <code>object.presence</code> is equivalent to\n\n<pre>object.present? ...</pre>\n"],["presence_in","Object","Object.html#method-i-presence_in","(another_object)","<p>Returns the receiver if it&#39;s included in the argument otherwise returns\n<code>nil</code>. Argument must be any …\n"],["present?","Object","Object.html#method-i-present-3F","()","<p>An object is present if it&#39;s not blank.\n<p>@return [true, false]\n"],["prev_month","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-prev_month","()","<p>Short-hand for months_ago(1).\n"],["prev_quarter","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-prev_quarter","()","<p>Short-hand for months_ago(3).\n"],["prev_week","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-prev_week","(start_day = Date.beginning_of_week)","<p>Returns a new date/time representing the given day in the previous week.\nWeek is assumed to start on …\n"],["prev_year","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-prev_year","()","<p>Short-hand for years_ago(1).\n"],["proxy_class","ActiveSupport::Multibyte","ActiveSupport/Multibyte.html#method-c-proxy_class","()","<p>Returns the current proxy class.\n"],["proxy_class=","ActiveSupport::Multibyte","ActiveSupport/Multibyte.html#method-c-proxy_class-3D","(klass)","<p>The proxy class returned when calling mb_chars. You can use this accessor\nto configure your own proxy …\n"],["prune","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-prune","(target_size, max_time = nil)","<p>To ensure entries fit within the specified memory prune the cache by\nremoving the least recently accessed …\n"],["pruning?","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-pruning-3F","()","<p>Returns true if the cache is currently being pruned.\n"],["publish","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-i-publish","(name, *args)",""],["publish","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-publish","(name, *args)",""],["qualified_const_defined?","Module","Module.html#method-i-qualified_const_defined-3F","(path, search_parents=true)",""],["qualified_const_get","Module","Module.html#method-i-qualified_const_get","(path)",""],["qualified_const_set","Module","Module.html#method-i-qualified_const_set","(path, value)",""],["quietly","Kernel","Kernel.html#method-i-quietly","()","<p>Silences both STDOUT and STDERR, even for subprocesses.\n\n<pre>quietly { system &#39;bundle install&#39; }</pre>\n<p>This method …\n"],["raise","ActiveSupport::ProxyObject","ActiveSupport/ProxyObject.html#method-i-raise","(*args)","<p>Let ActiveSupport::ProxyObject at least raise exceptions.\n"],["raise_if_absolute","QualifiedConstUtils","QualifiedConstUtils.html#method-c-raise_if_absolute","(path)",""],["read","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-read","(name, options = nil)","<p>Fetches data from the cache, using the given key. If there is data in the\ncache with the given key, then …\n"],["read_entry","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-read_entry","(key, options)",""],["read_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-read_entry","(key, options)",""],["read_multi","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-read_multi","(*names)","<p>Reads multiple values from the cache using a single call to the servers for\nall keys. Options can be …\n"],["read_multi","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-read_multi","(*names)","<p>Read multiple values at once from the cache. Options can be passed in the\nlast argument.\n<p>Some cache implementation …\n"],["readable_inspect","Date","Date.html#method-i-readable_inspect","()","<p>Overrides the default inspect method with a human readable one, e.g., “Mon,\n21 Feb 2005”\n"],["readable_inspect","DateTime","DateTime.html#method-i-readable_inspect","()","<p>Overrides the default inspect method with a human readable one, e.g., “Mon,\n21 Feb 2005 14:30:00 …\n"],["recode_windows1252_chars","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-recode_windows1252_chars","(string)",""],["redefine_method","Module","Module.html#method-i-redefine_method","(method, &block)",""],["regular_update","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_update","(other_hash)",""],["regular_update","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_update","(other_hash)",""],["regular_writer","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_writer","(key, value)",""],["regular_writer","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_writer","(key, value)",""],["reject","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-reject","(*args, &block)",""],["reject","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-reject","(*args, &block)",""],["reject","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-reject","(*args, &block)",""],["release","ActiveSupport::Concurrency::Latch","ActiveSupport/Concurrency/Latch.html#method-i-release","()",""],["remove","String","String.html#method-i-remove","(*patterns)","<p>Returns a new string with all occurrences of the patterns removed.\n\n<pre>str = &quot;foo bar test&quot;\nstr.remove(&quot; test&quot;) ...</pre>\n"],["remove!","String","String.html#method-i-remove-21","(*patterns)","<p>Alters the string by removing all occurrences of the patterns.\n\n<pre>str = &quot;foo bar test&quot;\nstr.remove!(&quot; test&quot;, ...</pre>\n"],["remove_filters!","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-remove_filters-21","()","<p>Removes all filters, but leaves in the silencers. Useful if you suddenly\nneed to see entire filepaths …\n"],["remove_possible_method","Module","Module.html#method-i-remove_possible_method","(method)",""],["remove_silencers!","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-remove_silencers-21","()","<p>Removes all silencers, but leaves in the filters. Useful if your context of\ndebugging suddenly expands …\n"],["rename_key","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-rename_key","(key, options = {})",""],["reorder_characters","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-reorder_characters","(codepoints)","<p>Re-order codepoints so the string becomes canonical.\n"],["replace","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-replace","(other_hash)","<p>Replaces the contents of this hash with other_hash.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">replace</span>({ <span class=\"ruby-string\">&quot;c&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["replace","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-replace","(other_hash)","<p>Replaces the contents of this hash with other_hash.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">replace</span>({ <span class=\"ruby-string\">&quot;c&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["rescue_from","ActiveSupport::Rescuable::ClassMethods","ActiveSupport/Rescuable/ClassMethods.html#method-i-rescue_from","(*klasses, &block)","<p>Rescue exceptions raised in controller actions.\n<p><code>rescue_from</code> receives a series of exception classes or …\n"],["rescue_with_handler","ActiveSupport::Rescuable","ActiveSupport/Rescuable.html#method-i-rescue_with_handler","(exception)","<p>Tries to rescue the exception by looking up and calling a registered\nhandler.\n"],["reset_callbacks","ActiveSupport::Callbacks::ClassMethods","ActiveSupport/Callbacks/ClassMethods.html#method-i-reset_callbacks","(name)","<p>Remove all set callbacks for the given event.\n"],["respond_to?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-respond_to-3F","(sym, include_priv = false)","<p>respond_to_missing? is not called in some cases, such as when type\nconversion is performed with Kernel#String …\n"],["respond_to_missing?","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-respond_to_missing-3F","(method, include_private=false)",""],["respond_to_missing?","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-respond_to_missing-3F","(method, include_private)","<p>Returns <code>true</code> if <em>obj</em> responds to the given method.\nPrivate methods are included in the search only if …\n"],["respond_to_missing?","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-respond_to_missing-3F","(name, include_private)",""],["respond_to_missing?","ActiveSupport::StringInquirer","ActiveSupport/StringInquirer.html#method-i-respond_to_missing-3F","(method_name, include_private = false)",""],["respond_to_missing?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-respond_to_missing-3F","(sym, include_priv)","<p>Ensure proxy class responds to all methods that underlying time instance\nresponds to.\n"],["retrieve_cache_key","ActiveSupport::Cache","ActiveSupport/Cache.html#method-i-retrieve_cache_key","(key)",""],["retrieve_store_class","ActiveSupport::Cache","ActiveSupport/Cache.html#method-i-retrieve_store_class","(store)","<p>Obtains the specified cache store class, given the name of the\n<code>store</code>. Raises an error when the store …\n"],["reverse","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-reverse","()","<p>Reverses all characters in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;Café&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">reverse</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; &#39;éfaC&#39;</span>\n</pre>\n"],["reverse_merge","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge","(other_hash)","<p>Like <code>merge</code> but the other way around: Merges the receiver into\nthe argument and returns a new hash with …\n"],["reverse_merge","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge","(other_hash)","<p>Like <code>merge</code> but the other way around: Merges the receiver into\nthe argument and returns a new hash with …\n"],["reverse_merge","Hash","Hash.html#method-i-reverse_merge","(other_hash)","<p>Merges the caller into <code>other_hash</code>. For example,\n\n<pre>options = options.reverse_merge(size: 25, velocity: 10)</pre>\n"],["reverse_merge!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge-21","(other_hash)","<p>Same semantics as <code>reverse_merge</code> but modifies the receiver\nin-place.\n"],["reverse_merge!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge-21","(other_hash)","<p>Same semantics as <code>reverse_merge</code> but modifies the receiver\nin-place.\n"],["reverse_merge!","Hash","Hash.html#method-i-reverse_merge-21","(other_hash)","<p>Destructive <code>reverse_merge</code>.\n"],["reverse_update","Hash","Hash.html#method-i-reverse_update","(other_hash)",""],["rfc2822","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-rfc2822","()","<p>Returns a string of the object&#39;s date and time in the RFC 2822 standard\nformat.\n\n<pre>Time.zone.now.rfc2822 ...</pre>\n"],["rfc822","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-rfc822","()",""],["run","ActiveSupport::Testing::Isolation","ActiveSupport/Testing/Isolation.html#method-i-run","()",""],["run_callbacks","ActiveSupport::Callbacks","ActiveSupport/Callbacks.html#method-i-run_callbacks","(kind, &block)","<p>Runs the callbacks for the given event.\n<p>Calls the before and around callbacks in the order they were set, …\n"],["run_in_isolation","ActiveSupport::Testing::Isolation::Forking","ActiveSupport/Testing/Isolation/Forking.html#method-i-run_in_isolation","(&blk)",""],["run_in_isolation","ActiveSupport::Testing::Isolation::Subprocess","ActiveSupport/Testing/Isolation/Subprocess.html#method-i-run_in_isolation","(&blk)","<p>Crazy H4X to get this working in windows / jruby with no forking.\n"],["run_load_hooks","ActiveSupport","ActiveSupport.html#method-c-run_load_hooks","(name, base = Object)",""],["safe_concat","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-safe_concat","(value)",""],["safe_constantize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-safe_constantize","(camel_cased_word)","<p>Tries to find a constant with the name specified in the argument string.\n\n<pre>&#39;Module&#39;.safe_constantize    ...</pre>\n"],["safe_constantize","String","String.html#method-i-safe_constantize","()","<p><code>safe_constantize</code> tries to find a declared constant with the\nname specified in the string. It returns …\n"],["safe_get","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-safe_get","(key)",""],["save_block_result_to_cache","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-save_block_result_to_cache","(name, options)",""],["search_dir","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-search_dir","(dir, &callback)",""],["second","Array","Array.html#method-i-second","()","<p>Equal to <code>self[1]</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d e )</span>.<span class=\"ruby-identifier\">second</span> <span class=\"ruby-comment\"># =&gt; &quot;b&quot;</span>\n</pre>\n"],["second","Numeric","Numeric.html#method-i-second","()",""],["seconds","Numeric","Numeric.html#method-i-seconds","()","<p>Enables the use of time calculations and declarations, like 45.minutes +\n2.hours + 4.years.\n<p>These methods …\n"],["seconds_since_midnight","DateTime","DateTime.html#method-i-seconds_since_midnight","()","<p>Seconds since midnight: DateTime.now.seconds_since_midnight.\n"],["seconds_since_midnight","Time","Time.html#method-i-seconds_since_midnight","()","<p>Seconds since midnight: Time.now.seconds_since_midnight\n"],["seconds_since_unix_epoch","DateTime","DateTime.html#method-i-seconds_since_unix_epoch","()",""],["seconds_to_utc_offset","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-seconds_to_utc_offset","(seconds, colon = true)","<p>Assumes self represents an offset from UTC in seconds (as returned from\nTime#utc_offset) and turns this …\n"],["seconds_until_end_of_day","DateTime","DateTime.html#method-i-seconds_until_end_of_day","()","<p>Returns the number of seconds until 23:59:59.\n\n<pre>DateTime.new(2012, 8, 29,  0,  0,  0).seconds_until_end_of_day ...</pre>\n"],["seconds_until_end_of_day","Time","Time.html#method-i-seconds_until_end_of_day","()","<p>Returns the number of seconds until 23:59:59.\n\n<pre>Time.new(2012, 8, 29,  0,  0,  0).seconds_until_end_of_day ...</pre>\n"],["secure_compare","ActiveSupport::SecurityUtils","ActiveSupport/SecurityUtils.html#method-c-secure_compare","(a, b)","<p>Constant time string comparison.\n<p>The values compared should be of fixed length, such as strings that have …\n"],["secure_compare","ActiveSupport::SecurityUtils","ActiveSupport/SecurityUtils.html#method-i-secure_compare","(a, b)","<p>Constant time string comparison.\n<p>The values compared should be of fixed length, such as strings that have …\n"],["select","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-select","(*args, &block)",""],["select","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-select","(*args, &block)",""],["select","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-select","(*args, &block)",""],["set_cache_value","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-set_cache_value","(value, name, amount, options)",""],["set_callback","ActiveSupport::Callbacks::ClassMethods","ActiveSupport/Callbacks/ClassMethods.html#method-i-set_callback","(name, *filter_list, &block)","<p>Install a callback for the given event.\n\n<pre>set_callback :save, :before, :before_meth\nset_callback :save, ...</pre>\n"],["set_callbacks","ActiveSupport::Callbacks::ClassMethods","ActiveSupport/Callbacks/ClassMethods.html#method-i-set_callbacks","(name, callbacks)",""],["set_defaults","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-set_defaults","(target)",""],["set_defaults","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-set_defaults","(target)",""],["set_logger","ActiveSupport::LogSubscriber::TestHelper","ActiveSupport/LogSubscriber/TestHelper.html#method-i-set_logger","(logger)","<p>Overwrite if you use another logger in your log subscriber.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">logger</span>\n  <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>.<span class=\"ruby-identifier\">logger</span> = <span class=\"ruby-ivar\">@logger</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["setup","ActiveSupport::LogSubscriber::TestHelper","ActiveSupport/LogSubscriber/TestHelper.html#method-i-setup","()",""],["setup","ActiveSupport::Testing::SetupAndTeardown::ClassMethods","ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html#method-i-setup","(*args, &block)","<p>Add a callback, which runs before <code>TestCase#setup</code>.\n"],["silence","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-silence","(backtrace)",""],["silence","ActiveSupport::Deprecation::Reporting","ActiveSupport/Deprecation/Reporting.html#method-i-silence","()","<p>Silence deprecation warnings within the block.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Deprecation</span>.<span class=\"ruby-identifier\">warn</span>(<span class=\"ruby-string\">&#39;something broke!&#39;</span>)\n<span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["silence","Kernel","Kernel.html#method-i-silence","(stream)",""],["silence","LoggerSilence","LoggerSilence.html#method-i-silence","(temporary_level = Logger::ERROR)","<p>Silences the logger for the duration of the block.\n"],["silence!","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-silence-21","()","<p>Silence the logger.\n"],["silence_stream","Kernel","Kernel.html#method-i-silence_stream","(stream)","<p>Deprecated : this method is not thread safe Silences any stream for the\nduration of the block.\n\n<pre>silence_stream(STDOUT) ...</pre>\n"],["silence_warnings","Kernel","Kernel.html#method-i-silence_warnings","()","<p>Sets $VERBOSE to nil for the duration of the block and back to its original\nvalue afterwards.\n\n<pre>silence_warnings ...</pre>\n"],["simple","ActiveSupport::Callbacks::Filters::After","ActiveSupport/Callbacks/Filters/After.html#method-c-simple","(callback_sequence, user_callback)",""],["simple","ActiveSupport::Callbacks::Filters::Around","ActiveSupport/Callbacks/Filters/Around.html#method-c-simple","(callback_sequence, user_callback)",""],["simple","ActiveSupport::Callbacks::Filters::Before","ActiveSupport/Callbacks/Filters/Before.html#method-c-simple","(callback_sequence, user_callback)",""],["simple_stubs","ActiveSupport::Testing::TimeHelpers","ActiveSupport/Testing/TimeHelpers.html#method-i-simple_stubs","()",""],["since","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-since","(time = ::Time.current)","<p>Calculates a new Time or Date that is as far in the future as this Duration\nrepresents.\n"],["since","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-since","(other)",""],["since","Date","Date.html#method-i-since","(seconds)","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],["since","DateTime","DateTime.html#method-i-since","(seconds)","<p>Returns a new DateTime representing the time a number of seconds since the\ninstance time. Do not use …\n"],["since","Time","Time.html#method-i-since","(seconds)","<p>Returns a new Time representing the time a number of seconds since the\ninstance time\n"],["singleton_class?","Class","Class.html#method-i-singleton_class-3F","()",""],["singular","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-singular","(rule, replacement)","<p>Specifies a new singularization rule and its replacement. The rule can\neither be a string or a regular …\n"],["singularize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-singularize","(word, locale = :en)","<p>The reverse of <code>pluralize</code>, returns the singular form of a word\nin a string.\n<p>If passed an optional <code>locale</code> …\n"],["singularize","String","String.html#method-i-singularize","(locale = :en)","<p>The reverse of <code>pluralize</code>, returns the singular form of a word\nin a string.\n<p>If the optional parameter  …\n"],["skip_callback","ActiveSupport::Callbacks::ClassMethods","ActiveSupport/Callbacks/ClassMethods.html#method-i-skip_callback","(name, *filter_list, &block)","<p>Skip a previously set callback. Like <code>set_callback</code>,\n<code>:if</code> or <code>:unless</code> options may be passed in order to\ncontrol …\n"],["slice","Hash","Hash.html#method-i-slice","(*keys)","<p>Slice a hash to include only the given keys. Returns a hash containing  the\ngiven keys.\n\n<pre>{ a: 1, b: 2, ...</pre>\n"],["slice!","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-slice-21","(*args)","<p>Works like <code>String#slice!</code>, but returns an instance of Chars, or\nnil if the string was not modified.\n"],["slice!","Hash","Hash.html#method-i-slice-21","(*keys)","<p>Replaces the hash with only the given keys. Returns a hash containing the\nremoved key/value pairs.\n\n<pre>{ a: ...</pre>\n"],["split","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-split","(*args)","<p>Works just like <code>String#split</code>, with the exception that the\nitems in the resulting list are Chars instances …\n"],["split","Array","Array.html#method-i-split","(value = nil)","<p>Divides the array into one or more subarrays based on a delimiting\n<code>value</code> or the result of an optional …\n"],["squish","String","String.html#method-i-squish","()","<p>Returns the string, first removing all whitespace on both ends of the\nstring, and then changing remaining …\n"],["squish!","String","String.html#method-i-squish-21","()","<p>Performs a destructive squish. See String#squish.\n\n<pre>str = &quot; foo   bar    \\n   \\t   boo&quot;\nstr.squish!     ...</pre>\n"],["start","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-i-start","(name, id, payload)",""],["start","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-start","(name, id, payload)",""],["start","ActiveSupport::Notifications::Instrumenter","ActiveSupport/Notifications/Instrumenter.html#method-i-start","(name, payload)","<p>Send a start notification with <code>name</code> and <code>payload</code>.\n"],["start","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-i-start","(name, id, payload)",""],["start_document","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-start_document","()",""],["start_element","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-start_element","(name, attrs = [])",""],["stats","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-stats","()","<p>Get the statistics from the memcached servers.\n"],["store","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-store","(klass)",""],["store","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-store","(key, value)",""],["store","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-store","(key, value)",""],["store_inherited","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-i-store_inherited","(klass, descendant)","<p>This is the only method that is not thread safe, but is only ever called\nduring the eager loading phase. …\n"],["strftime","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-strftime","(format)","<p>Replaces <code>%Z</code> directive with +zone before passing to\nTime#strftime, so that zone information is correct. …\n"],["stringify_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys","()",""],["stringify_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys","()",""],["stringify_keys","Hash","Hash.html#method-i-stringify_keys","()","<p>Returns a new hash with all keys converted to strings.\n\n<pre>hash = { name: &#39;Rob&#39;, age: &#39;28&#39; }\n\nhash.stringify_keys ...</pre>\n"],["stringify_keys!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys-21","()",""],["stringify_keys!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys-21","()",""],["stringify_keys!","Hash","Hash.html#method-i-stringify_keys-21","()","<p>Destructively convert all keys to strings. Same as\n<code>stringify_keys</code>, but modifies <code>self</code>.\n"],["strip_heredoc","String","String.html#method-i-strip_heredoc","()","<p>Strips indentation in heredocs.\n<p>For example in\n\n<pre>if options[:usage]\n  puts &lt;&lt;-USAGE.strip_heredoc\n    This ...</pre>\n"],["subclasses","Class","Class.html#method-i-subclasses","()","<p>Returns an array with the direct children of <code>self</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Integer</span>.<span class=\"ruby-identifier\">subclasses</span> <span class=\"ruby-comment\"># =&gt; [Fixnum, Bignum]</span>\n\n<span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Foo</span>; <span class=\"ruby-operator\">...</span>\n</pre>\n"],["subscribe","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-i-subscribe","(*args, &block)",""],["subscribe","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-subscribe","(pattern = nil, block = Proc.new)",""],["subscribed","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-i-subscribed","(callback, *args, &block)",""],["subscribers","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-i-subscribers","()",""],["sum","Enumerable","Enumerable.html#method-i-sum","(identity = 0, &block)","<p>Calculates a sum from the elements.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">payments</span>.<span class=\"ruby-identifier\">sum</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">p</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">price</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">tax_rate</span> }\n<span class=\"ruby-identifier\">payments</span>.<span class=\"ruby-identifier\">sum</span>(<span class=\"ruby-operator\">&amp;</span>:<span class=\"ruby-identifier\">price</span>)\n</pre>\n<p>The …\n"],["sunday","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-sunday","()","<p>Returns Sunday of this week assuming that week starts on Monday.\n<code>DateTime</code> objects have their time set …\n"],["superclass_delegating_accessor","Class","Class.html#method-i-superclass_delegating_accessor","(name, options = {})",""],["suppress","Kernel","Kernel.html#method-i-suppress","(*exception_classes)","<p>Blocks and ignores any exception passed as argument if raised within the\nblock.\n\n<pre>suppress(ZeroDivisionError) ...</pre>\n"],["swapcase","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-swapcase","()","<p>Converts characters in the string to the opposite case.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;El Cañón&quot;.mb_chars.swapcase.to_s # =&gt; &quot;eL cAÑÓN&quot;\n</span></pre>\n"],["swapcase","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-swapcase","(string)",""],["swapcase_mapping","ActiveSupport::Multibyte::Unicode::Codepoint","ActiveSupport/Multibyte/Unicode/Codepoint.html#method-i-swapcase_mapping","()",""],["symbolize_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-symbolize_keys","()",""],["symbolize_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-symbolize_keys","()",""],["symbolize_keys","Hash","Hash.html#method-i-symbolize_keys","()","<p>Returns a new hash with all keys converted to symbols, as long as they\nrespond to <code>to_sym</code>.\n\n<pre>hash = { &#39;name&#39; ...</pre>\n"],["symbolize_keys!","Hash","Hash.html#method-i-symbolize_keys-21","()","<p>Destructively convert all keys to symbols, as long as they respond to\n<code>to_sym</code>. Same as <code>symbolize_keys</code> …\n"],["tableize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-tableize","(class_name)","<p>Create the name of a table like Rails does for models to table names. This\nmethod uses the <code>pluralize</code> …\n"],["tableize","String","String.html#method-i-tableize","()","<p>Creates the name of a table like Rails does for models to table names. This\nmethod uses the <code>pluralize</code> …\n"],["tagged","ActiveSupport::TaggedLogging","ActiveSupport/TaggedLogging.html#method-i-tagged","(*tags)",""],["target","ActiveSupport::Deprecation::DeprecatedConstantProxy","ActiveSupport/Deprecation/DeprecatedConstantProxy.html#method-i-target","()",""],["target","ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy","ActiveSupport/Deprecation/DeprecatedInstanceVariableProxy.html#method-i-target","()",""],["target","ActiveSupport::Deprecation::DeprecatedObjectProxy","ActiveSupport/Deprecation/DeprecatedObjectProxy.html#method-i-target","()",""],["teardown","ActiveSupport::LogSubscriber::TestHelper","ActiveSupport/LogSubscriber/TestHelper.html#method-i-teardown","()",""],["teardown","ActiveSupport::Testing::SetupAndTeardown::ClassMethods","ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html#method-i-teardown","(*args, &block)","<p>Add a callback, which runs after <code>TestCase#teardown</code>.\n"],["terabyte","Numeric","Numeric.html#method-i-terabyte","()",""],["terabytes","Numeric","Numeric.html#method-i-terabytes","()",""],["test","ActiveSupport::Testing::Declarative","ActiveSupport/Testing/Declarative.html#method-i-test","(name, &block)","<p>Helper to define a test method using a String. Under the hood, it replaces\nspaces with underscores and …\n"],["test_order","ActiveSupport::TestCase","ActiveSupport/TestCase.html#method-i-test_order","()","<p>Returns the order in which test cases are run.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">TestCase</span>.<span class=\"ruby-identifier\">test_order</span> <span class=\"ruby-comment\"># =&gt; :sorted</span>\n</pre>\n<p>Possible …\n"],["test_order=","ActiveSupport::TestCase","ActiveSupport/TestCase.html#method-i-test_order-3D","(new_order)","<p>Sets the order in which test cases are run.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">TestCase</span>.<span class=\"ruby-identifier\">test_order</span> = :<span class=\"ruby-identifier\">random</span> <span class=\"ruby-comment\"># =&gt; :random</span>\n</pre>\n"],["third","Array","Array.html#method-i-third","()","<p>Equal to <code>self[2]</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d e )</span>.<span class=\"ruby-identifier\">third</span> <span class=\"ruby-comment\"># =&gt; &quot;c&quot;</span>\n</pre>\n"],["thread_variable?","Thread","Thread.html#method-i-thread_variable-3F","(key)","<p>Returns <code>true</code> if the given string (or symbol) exists as a\nthread-local variable.\n\n<pre>me = Thread.current\nme.thread_variable_set(:oliver, ...</pre>\n"],["thread_variable_get","Thread","Thread.html#method-i-thread_variable_get","(key)","<p>Returns the value of a thread local variable that has been set. Note that\nthese are different than fiber …\n"],["thread_variable_set","Thread","Thread.html#method-i-thread_variable_set","(key, value)","<p>Sets a thread local with <code>key</code> to <code>value</code>. Note that\nthese are local to threads, and not to fibers. Please …\n"],["thread_variables","Thread","Thread.html#method-i-thread_variables","()","<p>Returns an array of the names of the thread-local variables (as Symbols).\n\n<pre>thr = Thread.new do\n  Thread.current.thread_variable_set(:cat, ...</pre>\n"],["tidy_bytes","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-tidy_bytes","(force = false)","<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent\nresulting in a valid UTF-8 string. …\n"],["tidy_bytes","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-tidy_bytes","(string, force = false)","<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent\nresulting in a valid UTF-8 string. …\n"],["time","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-time","()","<p>Returns a Time or DateTime instance that represents the time in\n<code>time_zone</code>.\n"],["time_now","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-time_now","()",""],["time_with_zone","DateAndTime::Zones","DateAndTime/Zones.html#method-i-time_with_zone","(time, zone)",""],["titlecase","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-titlecase","()",""],["titlecase","String","String.html#method-i-titlecase","()",""],["titleize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-titleize","(word)","<p>Capitalizes all the words and replaces some characters in the string to\ncreate a nicer looking title. …\n"],["titleize","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-titleize","()","<p>Capitalizes the first letter of every word, when possible.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;ÉL QUE SE ENTERÓ&quot;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">titleize</span>    <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["titleize","String","String.html#method-i-titleize","()","<p>Capitalizes all the words and replaces some characters in the string to\ncreate a nicer looking title. …\n"],["to","Array","Array.html#method-i-to","(position)","<p>Returns the beginning of the array up to <code>position</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">to</span>(<span class=\"ruby-value\">0</span>)  <span class=\"ruby-comment\"># =&gt; [&quot;a&quot;]</span>\n<span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">to</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to","String","String.html#method-i-to","(position)","<p>Returns a substring from the beginning of the string to the given position.\nIf the position is negative, …\n"],["to_a","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_a","()",""],["to_date","String","String.html#method-i-to_date","()","<p>Converts a string to a Date value.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;1-1-2012&quot;</span>.<span class=\"ruby-identifier\">to_date</span>   <span class=\"ruby-comment\"># =&gt; Sun, 01 Jan 2012</span>\n<span class=\"ruby-string\">&quot;01/01/2012&quot;</span>.<span class=\"ruby-identifier\">to_date</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["to_datetime","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_datetime","()",""],["to_datetime","String","String.html#method-i-to_datetime","()","<p>Converts a string to a DateTime value.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;1-1-2012&quot;</span>.<span class=\"ruby-identifier\">to_datetime</span>            <span class=\"ruby-comment\"># =&gt; Sun, 01 Jan 2012 00:00:00 ...</span>\n</pre>\n"],["to_default_s","Array","Array.html#method-i-to_default_s","(format = :default)",""],["to_default_s","Date","Date.html#method-i-to_default_s","(format = :default)",""],["to_default_s","DateTime","DateTime.html#method-i-to_default_s","(format = :default)",""],["to_default_s","Range","Range.html#method-i-to_default_s","(format = :default)",""],["to_default_s","Time","Time.html#method-i-to_default_s","(format = :default)",""],["to_f","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_f","()",""],["to_f","DateTime","DateTime.html#method-i-to_f","()","<p>Converts <code>self</code> to a floating-point number of seconds, including\nfractional microseconds, since the Unix …\n"],["to_formatted_s","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_formatted_s","(format = :default)",""],["to_formatted_s","Array","Array.html#method-i-to_formatted_s","(format = :default)","<p>Extends <code>Array#to_s</code> to convert a collection of elements into a\ncomma separated id list if <code>:db</code> argument …\n"],["to_formatted_s","BigDecimal","BigDecimal.html#method-i-to_formatted_s","(*args)",""],["to_formatted_s","Date","Date.html#method-i-to_formatted_s","(format = :default)","<p>Convert to a formatted string. See DATE_FORMATS for predefined formats.\n<p>This method is aliased to <code>to_s</code> …\n"],["to_formatted_s","DateTime","DateTime.html#method-i-to_formatted_s","(format = :default)","<p>Convert to a formatted string. See Time::DATE_FORMATS for predefined\nformats.\n<p>This method is aliased to …\n"],["to_formatted_s","Numeric","Numeric.html#method-i-to_formatted_s","(format = :default, options = {})","<p>Provides options for converting numbers into formatted strings. Options are\nprovided for phone numbers, …\n"],["to_formatted_s","Range","Range.html#method-i-to_formatted_s","(format = :default)","<p>Gives a human readable format of the range.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">100</span>).<span class=\"ruby-identifier\">to_formatted_s</span> <span class=\"ruby-comment\"># =&gt; &quot;1..100&quot;</span>\n</pre>\n"],["to_formatted_s","Time","Time.html#method-i-to_formatted_s","(format = :default)","<p>Converts to a formatted string. See DATE_FORMATS for built-in formats.\n<p>This method is aliased to <code>to_s</code> …\n"],["to_hash","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-to_hash","()","<p>Convert to a regular hash with string keys.\n"],["to_hash","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-to_hash","()","<p>Convert to a regular hash with string keys.\n"],["to_i","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-to_i","()","<p>Returns the number of seconds that this Duration represents.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">minute</span>.<span class=\"ruby-identifier\">to_i</span>   <span class=\"ruby-comment\"># =&gt; 60</span>\n<span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">hour</span>.<span class=\"ruby-identifier\">to_i</span>     <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["to_i","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_i","()",""],["to_i","DateTime","DateTime.html#method-i-to_i","()","<p>Converts <code>self</code> to an integer number of seconds since the Unix\nepoch.\n"],["to_options","Hash","Hash.html#method-i-to_options","()",""],["to_options!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options-21","()",""],["to_options!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options-21","()",""],["to_options!","Hash","Hash.html#method-i-to_options-21","()",""],["to_param","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-to_param","()",""],["to_param","Array","Array.html#method-i-to_param","()","<p>Calls <code>to_param</code> on all its elements and joins the result with\nslashes. This is used by <code>url_for</code> in Action …\n"],["to_param","FalseClass","FalseClass.html#method-i-to_param","()","<p>Returns <code>self</code>.\n"],["to_param","Hash","Hash.html#method-i-to_param","(namespace = nil)",""],["to_param","NilClass","NilClass.html#method-i-to_param","()","<p>Returns <code>self</code>.\n"],["to_param","Object","Object.html#method-i-to_param","()","<p>Alias of <code>to_s</code>.\n"],["to_param","TrueClass","TrueClass.html#method-i-to_param","()","<p>Returns <code>self</code>.\n"],["to_query","Array","Array.html#method-i-to_query","(key)","<p>Converts an array into a string suitable for use as a URL query string,\nusing the given <code>key</code> as the param …\n"],["to_query","Hash","Hash.html#method-i-to_query","(namespace = nil)","<p>Returns a string representation of the receiver suitable for use as a URL\nquery string:\n\n<pre>{name: &#39;David&#39;, ...</pre>\n"],["to_query","Object","Object.html#method-i-to_query","(key)","<p>Converts an object into a string suitable for use as a URL query string,\nusing the given <code>key</code> as the param …\n"],["to_r","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_r","()",""],["to_s","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-to_s","()",""],["to_s","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-to_s","()",""],["to_s","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_s","(format = :default)","<p>Returns a string of the object&#39;s date and time. Accepts an optional\n<code>format</code>:\n<p><code>:default</code> - default value, …\n"],["to_s","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-to_s","()","<p>Returns a textual representation of this time zone.\n"],["to_s","Array","Array.html#method-i-to_s","(format = :default)",""],["to_s","BigDecimal","BigDecimal.html#method-i-to_s","(*args)",""],["to_s","Date","Date.html#method-i-to_s","(format = :default)",""],["to_s","DateTime","DateTime.html#method-i-to_s","(format = :default)",""],["to_s","Range","Range.html#method-i-to_s","(format = :default)",""],["to_s","Time","Time.html#method-i-to_s","(format = :default)",""],["to_sentence","Array","Array.html#method-i-to_sentence","(options = {})","<p>Converts the array to a comma-separated sentence where the last element is\njoined by the connector word. …\n"],["to_tag","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-to_tag","(key, value, options)",""],["to_time","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_time","()","<p>Return an instance of Time in the system timezone.\n"],["to_time","Date","Date.html#method-i-to_time","(form = :local)","<p>Converts a Date instance to a Time, where the time is set to the beginning\nof the day. The timezone can …\n"],["to_time","String","String.html#method-i-to_time","(form = :local)","<p>Converts a string to a Time value. The <code>form</code> can be either :utc\nor :local (default :local).\n<p>The time is …\n"],["to_xml","Array","Array.html#method-i-to_xml","(options = {})","<p>Returns a string that represents the array in XML by invoking\n<code>to_xml</code> on each element. Active Record collections …\n"],["to_xml","Hash","Hash.html#method-i-to_xml","(options = {})","<p>Returns a string containing an XML representation of its receiver:\n\n<pre class=\"ruby\">{ <span class=\"ruby-identifier\">foo</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-identifier\">bar</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-value\">2</span> }.<span class=\"ruby-identifier\">to_xml</span>\n<span class=\"ruby-comment\"># =&gt;</span>\n<span class=\"ruby-comment\"># &lt;?xml ...</span>\n</pre>\n"],["to_yaml_type","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-to_yaml_type","()",""],["today","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-today","()","<p>Return the current date in this time zone.\n"],["today?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-today-3F","()","<p>Returns true if the current object&#39;s time falls within the current day.\n"],["today?","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-today-3F","()","<p>Returns true if the date/time is today.\n"],["tomorrow","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-tomorrow","()","<p>Returns the next date in this time zone.\n"],["tomorrow","Date","Date.html#method-i-tomorrow","()","<p>Returns a new Date representing the date 1 day after today (i.e.\ntomorrow&#39;s date).\n"],["tomorrow","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-tomorrow","()","<p>Returns a new date/time representing tomorrow.\n"],["transfer_time_values_to_utc_constructor","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-transfer_time_values_to_utc_constructor","(time)",""],["transform_keys","Hash","Hash.html#method-i-transform_keys","()","<p>Returns a new hash with all keys converted using the block operation.\n\n<pre>hash = { name: &#39;Rob&#39;, age: &#39;28&#39; ...</pre>\n"],["transform_keys!","Hash","Hash.html#method-i-transform_keys-21","()","<p>Destructively convert all keys using the block operations. Same as\ntransform_keys but modifies <code>self</code>. …\n"],["transform_values","Hash","Hash.html#method-i-transform_values","()","<p>Returns a new hash with the results of running <code>block</code> once for\nevery value. The keys are unchanged.\n\n<pre>{ a: ...</pre>\n"],["transform_values!","Hash","Hash.html#method-i-transform_values-21","()","<p>Destructive <code>transform_values</code>\n"],["transliterate","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-transliterate","(string, replacement = \"?\")","<p>Replaces non-ASCII characters with an ASCII approximation, or if none\nexists, a replacement character …\n"],["travel","ActiveSupport::Testing::TimeHelpers","ActiveSupport/Testing/TimeHelpers.html#method-i-travel","(duration, &block)","<p>Changes current time to the time in the future or in the past by a given\ntime difference by stubbing …\n"],["travel_back","ActiveSupport::Testing::TimeHelpers","ActiveSupport/Testing/TimeHelpers.html#method-i-travel_back","()","<p>Returns the current time back to its original state, by removing the stubs\nadded by `travel` and `travel_to`. …\n"],["travel_to","ActiveSupport::Testing::TimeHelpers","ActiveSupport/Testing/TimeHelpers.html#method-i-travel_to","(date_or_time)","<p>Changes current time to the given time by stubbing <code>Time.now</code>\nand <code>Date.today</code> to return the time or date …\n"],["truncate","String","String.html#method-i-truncate","(truncate_at, options = {})","<p>Truncates a given <code>text</code> after a given <code>length</code> if\n<code>text</code> is longer than <code>length</code>:\n\n<pre>&#39;Once upon a time in a world ...</pre>\n"],["truncate_words","String","String.html#method-i-truncate_words","(words_count, options = {})","<p>Truncates a given <code>text</code> after a given number of words\n(<code>words_count</code>):\n\n<pre>&#39;Once upon a time in a world far far ...</pre>\n"],["try","NilClass","NilClass.html#method-i-try","(*args)","<p>Calling <code>try</code> on <code>nil</code> always returns\n<code>nil</code>. It becomes especially helpful when navigating through\nassociations …\n"],["try","Object","Object.html#method-i-try","(*a, &b)","<p>Invokes the public method whose name goes as first argument just like\n<code>public_send</code> does, except that if …\n"],["try!","NilClass","NilClass.html#method-i-try-21","(*args)",""],["try!","Object","Object.html#method-i-try-21","(*a, &b)","<p>Same as #try, but will raise a NoMethodError exception if the receiver is\nnot <code>nil</code> and does not implement …\n"],["tv_sec","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-tv_sec","()",""],["uncountable","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-uncountable","(*words)","<p>Specifies words that are uncountable and should not be inflected.\n\n<pre>uncountable &#39;money&#39;\nuncountable &#39;money&#39;, ...</pre>\n"],["underscore","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-underscore","(camel_cased_word)","<p>Makes an underscored, lowercase form from the expression in the string.\n<p>Changes &#39;::&#39; to &#39;/&#39; …\n"],["underscore","String","String.html#method-i-underscore","()","<p>The reverse of <code>camelize</code>. Makes an underscored, lowercase form\nfrom the expression in the string.\n<p><code>underscore</code> …\n"],["unescape","Object","Object.html#method-i-unescape","(str, escaped = /%[a-fA-F\\d]{2}/)",""],["unique_id","ActiveSupport::Notifications::Instrumenter","ActiveSupport/Notifications/Instrumenter.html#method-i-unique_id","()",""],["unpack_graphemes","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-unpack_graphemes","(string)","<p>Unpack the string at grapheme boundaries. Returns a list of character\nlists.\n\n<pre>Unicode.unpack_graphemes(&#39;क्षि&#39;) ...</pre>\n"],["unsubscribe","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-i-unsubscribe","(subscriber_or_name)",""],["unsubscribe","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-unsubscribe","(subscriber_or_name)",""],["until","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-until","(time = ::Time.current)",""],["upcase","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-upcase","()","<p>Converts characters in the string to uppercase.\n\n<pre>&#39;Laurent, où sont les tests ?&#39;.mb_chars.upcase.to_s # ...</pre>\n"],["upcase","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-upcase","(string)",""],["update","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-update","(other_hash)","<p>Updates the receiver in-place, merging in the hash passed as argument:\n\n<pre>hash_1 = ActiveSupport::HashWithIndifferentAccess.new ...</pre>\n"],["update","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-update","(other_hash)","<p>Updates the receiver in-place, merging in the hash passed as argument:\n\n<pre>hash_1 = ActiveSupport::HashWithIndifferentAccess.new ...</pre>\n"],["updated?","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-updated-3F","()","<p>Check if any of the entries were updated. If so, the watched and/or\nupdated_at values are cached until …\n"],["updated_at","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-updated_at","(paths)",""],["us_zones","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-us_zones","()","<p>A convenience method for returning a collection of TimeZone objects for\ntime zones in the USA.\n"],["use_temporary_local_cache","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-use_temporary_local_cache","(temporary_cache)",""],["use_zone","Time","Time.html#method-i-use_zone","(time_zone)","<p>Allows override of <code>Time.zone</code> locally inside supplied block;\nresets <code>Time.zone</code> to existing value when done. …\n"],["usec","DateTime","DateTime.html#method-i-usec","()","<p>Returns the fraction of a second as microseconds\n"],["utc","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-utc","()","<p>Returns a Time or DateTime instance that represents the time in UTC.\n"],["utc","DateTime","DateTime.html#method-i-utc","()","<p>Adjusts DateTime to UTC by adding its offset value; offset is set to 0.\n\n<pre>DateTime.civil(2005, 2, 21, 10, ...</pre>\n"],["utc?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-utc-3F","()","<p>Returns true if the current time zone is set to UTC.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">zone</span> = <span class=\"ruby-string\">&#39;UTC&#39;</span>                           <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["utc?","DateTime","DateTime.html#method-i-utc-3F","()","<p>Returns <code>true</code> if <code>offset == 0</code>.\n"],["utc_offset","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-utc_offset","()","<p>Returns the offset from current time to UTC time in seconds.\n"],["utc_offset","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-utc_offset","()","<p>Returns the offset of this time zone from UTC in seconds.\n"],["utc_offset","DateTime","DateTime.html#method-i-utc_offset","()","<p>Returns the offset value in seconds.\n"],["utc_to_local","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-utc_to_local","(time)","<p>Adjust the given time to the simultaneous time in the time zone represented\nby <code>self</code>. Returns a Time.utc() …\n"],["uuid_from_hash","Digest::UUID","Digest/UUID.html#method-c-uuid_from_hash","(hash_class, uuid_namespace, name)","<p>Generates a v5 non-random UUID (Universally Unique IDentifier).\n<p>Using Digest::MD5 generates version 3 …\n"],["uuid_v3","Digest::UUID","Digest/UUID.html#method-c-uuid_v3","(uuid_namespace, name)","<p>Convenience method for uuid_from_hash using Digest::MD5.\n"],["uuid_v4","Digest::UUID","Digest/UUID.html#method-c-uuid_v4","()","<p>Convenience method for SecureRandom.uuid.\n"],["uuid_v5","Digest::UUID","Digest/UUID.html#method-c-uuid_v5","(uuid_namespace, name)","<p>Convenience method for uuid_from_hash using Digest::SHA1.\n"],["validate_fallbacks","I18n::Railtie","I18n/Railtie.html#method-c-validate_fallbacks","(fallbacks)",""],["values_at","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-values_at","(*indices)","<p>Returns an array of the values at the specified indices:\n\n<pre>hash = ActiveSupport::HashWithIndifferentAccess.new ...</pre>\n"],["values_at","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-values_at","(*indices)","<p>Returns an array of the values at the specified indices:\n\n<pre>hash = ActiveSupport::HashWithIndifferentAccess.new ...</pre>\n"],["verifier","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-i-verifier","()",""],["verify","ActiveSupport::MessageVerifier","ActiveSupport/MessageVerifier.html#method-i-verify","(signed_message)",""],["version","ActiveSupport","ActiveSupport.html#method-c-version","()","<p>Returns the version of the currently loaded ActiveSupport as a\n<code>Gem::Version</code>\n"],["wait","ActiveSupport::LogSubscriber::TestHelper","ActiveSupport/LogSubscriber/TestHelper.html#method-i-wait","()","<p>Wait notifications to be published.\n"],["wait","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-wait","()","<p>This is a sync queue, so there is no waiting.\n"],["warn","ActiveSupport::Deprecation::DeprecatedConstantProxy","ActiveSupport/Deprecation/DeprecatedConstantProxy.html#method-i-warn","(callstack, called, args)",""],["warn","ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy","ActiveSupport/Deprecation/DeprecatedInstanceVariableProxy.html#method-i-warn","(callstack, called, args)",""],["warn","ActiveSupport::Deprecation::DeprecatedObjectProxy","ActiveSupport/Deprecation/DeprecatedObjectProxy.html#method-i-warn","(callstack, called, args)",""],["warn","ActiveSupport::Deprecation::Reporting","ActiveSupport/Deprecation/Reporting.html#method-i-warn","(message = nil, callstack = nil)","<p>Outputs a deprecation warning to the output configured by\n<code>ActiveSupport::Deprecation.behavior</code>.\n\n<pre>ActiveSupport::Deprecation.warn(&#39;something ...</pre>\n"],["watch_namespaces","ActiveSupport::Dependencies::WatchStack","ActiveSupport/Dependencies/WatchStack.html#method-i-watch_namespaces","(namespaces)","<p>Add a set of modules to the watch stack, remembering the initial constants.\n"],["watched","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-watched","()",""],["watching?","ActiveSupport::Dependencies::WatchStack","ActiveSupport/Dependencies/WatchStack.html#method-i-watching-3F","()",""],["week","Numeric","Numeric.html#method-i-week","()",""],["weeks","Numeric","Numeric.html#method-i-weeks","()",""],["weeks_ago","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-weeks_ago","(weeks)","<p>Returns a new date/time the specified number of weeks ago.\n"],["weeks_since","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-weeks_since","(weeks)","<p>Returns a new date/time the specified number of weeks in the future.\n"],["with_backend","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-with_backend","(name)",""],["with_indifferent_access","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-with_indifferent_access","()",""],["with_indifferent_access","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-with_indifferent_access","()",""],["with_indifferent_access","Hash","Hash.html#method-i-with_indifferent_access","()","<p>Returns an <code>ActiveSupport::HashWithIndifferentAccess</code> out of its\nreceiver:\n\n<pre>{ a: 1 }.with_indifferent_access[&#39;a&#39;] ...</pre>\n"],["with_local_cache","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-with_local_cache","()","<p>Use a local cache for the duration of block.\n"],["with_options","Object","Object.html#method-i-with_options","(options, &block)","<p>An elegant way to factor duplication out of options passed to a series of\nmethod calls. Each method called …\n"],["with_warnings","Kernel","Kernel.html#method-i-with_warnings","(flag)","<p>Sets $VERBOSE for the duration of the block and back to its original value\nafterwards.\n"],["wrap","Array","Array.html#method-c-wrap","(object)","<p>Wraps its argument in an array unless it is already an array (or\narray-like).\n<p>Specifically:\n<p>If the argument …\n"],["wrap_with_time_zone","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-wrap_with_time_zone","(time)",""],["write","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-write","(name, value, options = nil)","<p>Writes the value to the cache, with the key.\n<p>Options are passed to the underlying cache implementation. …\n"],["write_entry","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-write_entry","(key, entry, options)",""],["write_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-write_entry","(key, value, options)",""],["xmlschema","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-xmlschema","(fraction_digits = 0)",""],["xmlschema","Date","Date.html#method-i-xmlschema","()","<p>Returns a string which represents the time in used time zone as DateTime\ndefined by XML Schema:\n\n<pre>date = ...</pre>\n"],["year","Integer","Integer.html#method-i-year","()",""],["years","Integer","Integer.html#method-i-years","()",""],["years_ago","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-years_ago","(years)","<p>Returns a new date/time the specified number of years ago.\n"],["years_since","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-years_since","(years)","<p>Returns a new date/time the specified number of years in the future.\n"],["yesterday","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-yesterday","()","<p>Returns the previous date in this time zone.\n"],["yesterday","Date","Date.html#method-i-yesterday","()","<p>Returns a new Date representing the date 1 day ago (i.e. yesterday&#39;s\ndate).\n"],["yesterday","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-yesterday","()","<p>Returns a new date/time representing yesterday.\n"],["zone","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-zone","()","<p>Time uses <code>zone</code> to display the time zone abbreviation, so\nwe&#39;re duck-typing it.\n"],["zone","Time","Time.html#method-i-zone","()","<p>Returns the TimeZone for the current request, if this has been set (via\nTime.zone=). If <code>Time.zone</code> has …\n"],["zone=","Time","Time.html#method-i-zone-3D","(time_zone)","<p>Sets <code>Time.zone</code> to a TimeZone object for the current\nrequest/thread.\n<p>This method accepts any of the following: …\n"]]}}