var search_data = {"index":{"searchIndex":["ethon","curl","fdset","ffi","type","msg","msgdata","timeval","versioninfodata","curls","codes","formoptions","functions","infos","messages","options","easy","callbacks","debuginfo","message","features","form","header","http","actionable","custom","delete","get","head","options","patch","post","postable","put","putable","informations","mirror","operations","options","params","queryable","responsecallbacks","util","errors","ethonerror","globalinit","invalidoption","invalidvalue","multiadd","multifdset","multiremove","multitimeout","select","libc","loggable","multi","operations","options","stack","add()","add()","body()","check()","cleanup()","clear()","complete()","compose_header()","debug_info_types()","default_logger()","delete()","double_ptr()","dup()","easy_codes()","easy_handles()","escape()","escape=()","escape?()","escape_zero_byte()","fabricate()","first()","form()","form_add()","form_options()","from_easy()","get_info_double()","get_info_long()","get_info_string()","get_timeout()","handle()","handle()","handle=()","header_list()","headers()","headers()","headers=()","http_request()","info_types()","infos()","init_vars()","last()","log_informations()","log_inspect()","logger()","logger=()","long_ptr()","materialize()","max_total_connections=()","maxconnects=()","messages_for()","mirror()","msg_codes()","multi_codes()","multipart?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","on_body()","on_complete()","on_headers()","ongoing?()","option()","option_alias()","option_type()","options()","params()","params_encoding()","parse_options()","perform()","perform()","pipelining=()","prepare()","prepare()","query_options()","rails_logger()","reset()","reset_fds()","run()","running_count()","set_attributes()","set_attributes()","set_fds()","set_form()","set_form()","set_form()","set_option()","set_params()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup_garbage_collection()","socketdata=()","socketfunction=()","string_ptr()","supports_asynch_dns?()","supports_timeout_ms?()","supports_zlib?()","supports_zlib?()","timerdata=()","timerfunction=()","to_a()","to_h()","to_hash()","trigger()","url()","url=()","value_for()"],"longSearchIndex":["ethon","ethon::curl","ethon::curl::fdset","ethon::curl::fdset::ffi","ethon::curl::fdset::ffi::type","ethon::curl::msg","ethon::curl::msgdata","ethon::curl::timeval","ethon::curl::versioninfodata","ethon::curls","ethon::curls::codes","ethon::curls::formoptions","ethon::curls::functions","ethon::curls::infos","ethon::curls::messages","ethon::curls::options","ethon::easy","ethon::easy::callbacks","ethon::easy::debuginfo","ethon::easy::debuginfo::message","ethon::easy::features","ethon::easy::form","ethon::easy::header","ethon::easy::http","ethon::easy::http::actionable","ethon::easy::http::custom","ethon::easy::http::delete","ethon::easy::http::get","ethon::easy::http::head","ethon::easy::http::options","ethon::easy::http::patch","ethon::easy::http::post","ethon::easy::http::postable","ethon::easy::http::put","ethon::easy::http::putable","ethon::easy::informations","ethon::easy::mirror","ethon::easy::operations","ethon::easy::options","ethon::easy::params","ethon::easy::queryable","ethon::easy::responsecallbacks","ethon::easy::util","ethon::errors","ethon::errors::ethonerror","ethon::errors::globalinit","ethon::errors::invalidoption","ethon::errors::invalidvalue","ethon::errors::multiadd","ethon::errors::multifdset","ethon::errors::multiremove","ethon::errors::multitimeout","ethon::errors::select","ethon::libc","ethon::loggable","ethon::multi","ethon::multi::operations","ethon::multi::options","ethon::multi::stack","ethon::easy::debuginfo#add()","ethon::multi::stack#add()","ethon::easy::responsecallbacks#body()","ethon::multi::operations#check()","ethon::easy::operations#cleanup()","ethon::curl::fdset#clear()","ethon::easy::responsecallbacks#complete()","ethon::easy::header#compose_header()","ethon::curls::infos#debug_info_types()","ethon::loggable#default_logger()","ethon::multi::stack#delete()","ethon::curls::infos#double_ptr()","ethon::easy#dup()","ethon::curls::codes#easy_codes()","ethon::multi::stack#easy_handles()","ethon::easy#escape()","ethon::easy::options#escape=()","ethon::easy::options#escape?()","ethon::easy::util#escape_zero_byte()","ethon::easy::http#fabricate()","ethon::easy::form#first()","ethon::easy::http::actionable#form()","ethon::easy::form#form_add()","ethon::curls::formoptions#form_options()","ethon::easy::mirror::from_easy()","ethon::curls::infos#get_info_double()","ethon::curls::infos#get_info_long()","ethon::curls::infos#get_info_string()","ethon::multi::operations#get_timeout()","ethon::easy::operations#handle()","ethon::multi::operations#handle()","ethon::easy::operations#handle=()","ethon::easy::header#header_list()","ethon::easy::header#headers()","ethon::easy::responsecallbacks#headers()","ethon::easy::header#headers=()","ethon::easy::http#http_request()","ethon::curls::infos#info_types()","ethon::curls::infos#infos()","ethon::multi::operations#init_vars()","ethon::easy::form#last()","ethon::easy::mirror#log_informations()","ethon::easy#log_inspect()","ethon::loggable#logger()","ethon::loggable#logger=()","ethon::curls::infos#long_ptr()","ethon::easy::form#materialize()","ethon::multi::options#max_total_connections=()","ethon::multi::options#maxconnects=()","ethon::easy::debuginfo#messages_for()","ethon::easy#mirror()","ethon::curls::messages#msg_codes()","ethon::curls::codes#multi_codes()","ethon::easy::form#multipart?()","ethon::easy::new()","ethon::easy::debuginfo::new()","ethon::easy::debuginfo::message::new()","ethon::easy::form::new()","ethon::easy::http::actionable::new()","ethon::easy::http::custom::new()","ethon::easy::mirror::new()","ethon::easy::params::new()","ethon::errors::globalinit::new()","ethon::errors::invalidoption::new()","ethon::errors::invalidvalue::new()","ethon::errors::multiadd::new()","ethon::errors::multifdset::new()","ethon::errors::multiremove::new()","ethon::errors::multitimeout::new()","ethon::errors::select::new()","ethon::multi::new()","ethon::easy::responsecallbacks#on_body()","ethon::easy::responsecallbacks#on_complete()","ethon::easy::responsecallbacks#on_headers()","ethon::multi::operations#ongoing?()","ethon::curls::options::option()","ethon::curls::options::option_alias()","ethon::curls::options::option_type()","ethon::easy::http::actionable#options()","ethon::easy::http::actionable#params()","ethon::easy::http::actionable#params_encoding()","ethon::easy::http::actionable#parse_options()","ethon::easy::operations#perform()","ethon::multi::operations#perform()","ethon::multi::options#pipelining=()","ethon::easy::operations#prepare()","ethon::multi::operations#prepare()","ethon::easy::http::actionable#query_options()","ethon::loggable#rails_logger()","ethon::easy#reset()","ethon::multi::operations#reset_fds()","ethon::multi::operations#run()","ethon::multi::operations#running_count()","ethon::easy#set_attributes()","ethon::multi#set_attributes()","ethon::multi::operations#set_fds()","ethon::easy::http::actionable#set_form()","ethon::easy::http::postable#set_form()","ethon::easy::http::putable#set_form()","ethon::curls::options#set_option()","ethon::easy::http::actionable#set_params()","ethon::easy::http::actionable#setup()","ethon::easy::http::custom#setup()","ethon::easy::http::delete#setup()","ethon::easy::http::get#setup()","ethon::easy::http::head#setup()","ethon::easy::http::options#setup()","ethon::easy::http::patch#setup()","ethon::easy::http::post#setup()","ethon::easy::http::put#setup()","ethon::easy::form#setup_garbage_collection()","ethon::multi::options#socketdata=()","ethon::multi::options#socketfunction=()","ethon::curls::infos#string_ptr()","ethon::easy::features#supports_asynch_dns?()","ethon::easy::features#supports_timeout_ms?()","ethon::easy::features#supports_zlib?()","ethon::easy::informations#supports_zlib?()","ethon::multi::options#timerdata=()","ethon::multi::options#timerfunction=()","ethon::easy::debuginfo#to_a()","ethon::easy::debuginfo#to_h()","ethon::easy#to_hash()","ethon::multi::operations#trigger()","ethon::easy::http::actionable#url()","ethon::easy::options#url=()","ethon::multi::options#value_for()"],"info":[["Ethon","","Ethon.html","","<p>Ethon is a very simple libcurl. It provides direct access to libcurl\nfunctionality as well as some helpers â€¦\n"],["Ethon::Curl","","Ethon/Curl.html","","<p>FFI Wrapper module for Curl. Holds constants and required initializers.\n<p>@api private\n"],["Ethon::Curl::FDSet","","Ethon/Curl/FDSet.html","",""],["Ethon::Curl::FDSet::FFI","","Ethon/Curl/FDSet/FFI.html","",""],["Ethon::Curl::FDSet::FFI::Type","","Ethon/Curl/FDSet/FFI/Type.html","",""],["Ethon::Curl::Msg","","Ethon/Curl/Msg.html","",""],["Ethon::Curl::MsgData","","Ethon/Curl/MsgData.html","",""],["Ethon::Curl::Timeval","","Ethon/Curl/Timeval.html","",""],["Ethon::Curl::VersionInfoData","","Ethon/Curl/VersionInfoData.html","",""],["Ethon::Curls","","Ethon/Curls.html","",""],["Ethon::Curls::Codes","","Ethon/Curls/Codes.html","","<p>This module contains all easy and multi return codes.\n"],["Ethon::Curls::FormOptions","","Ethon/Curls/FormOptions.html","","<p>This module contains the available options for forms.\n"],["Ethon::Curls::Functions","","Ethon/Curls/Functions.html","","<p>This module contains the functions to be attached in order to work with\nlibcurl.\n"],["Ethon::Curls::Infos","","Ethon/Curls/Infos.html","","<p>This module contains logic for the available informations on an easy, eg.:\nconnect_time.\n"],["Ethon::Curls::Messages","","Ethon/Curls/Messages.html","","<p>This module contains available message codes.\n"],["Ethon::Curls::Options","","Ethon/Curls/Options.html","","<p>This module contains logic for setting options on easy or multi interface.\n"],["Ethon::Easy","","Ethon/Easy.html","","<p>This is the class representing the libcurl easy interface See\ncurl.haxx.se/libcurl/c/libcurl-easy.html â€¦\n"],["Ethon::Easy::Callbacks","","Ethon/Easy/Callbacks.html","","<p>This module contains all the logic around the callbacks, which are needed\nto interact with libcurl.\n<p>@api â€¦\n"],["Ethon::Easy::DebugInfo","","Ethon/Easy/DebugInfo.html","","<p>This class is used to store and retreive debug information, which is only\nsaved when verbose is set to â€¦\n"],["Ethon::Easy::DebugInfo::Message","","Ethon/Easy/DebugInfo/Message.html","",""],["Ethon::Easy::Features","","Ethon/Easy/Features.html","","<p>This module contains class methods for feature checks\n"],["Ethon::Easy::Form","","Ethon/Easy/Form.html","","<p>This class represents a form and is used to send a payload in the request\nbody via POST/PUT. It handles â€¦\n"],["Ethon::Easy::Header","","Ethon/Easy/Header.html","","<p>This module contains the logic around adding headers to libcurl.\n<p>@api private\n"],["Ethon::Easy::Http","","Ethon/Easy/Http.html","","<p>This module contains logic about making valid HTTP requests.\n"],["Ethon::Easy::Http::Actionable","","Ethon/Easy/Http/Actionable.html","","<p>This module represents a Http Action and is a factory for more real actions\nlike GET, HEAD, POST and â€¦\n"],["Ethon::Easy::Http::Custom","","Ethon/Easy/Http/Custom.html","","<p>This class knows everything about making requests for custom HTTP verbs.\n"],["Ethon::Easy::Http::Delete","","Ethon/Easy/Http/Delete.html","","<p>This class knows everything about making DELETE requests.\n"],["Ethon::Easy::Http::Get","","Ethon/Easy/Http/Get.html","","<p>This class knows everything about making GET requests.\n"],["Ethon::Easy::Http::Head","","Ethon/Easy/Http/Head.html","","<p>This class knows everything about making HEAD requests.\n"],["Ethon::Easy::Http::Options","","Ethon/Easy/Http/Options.html","","<p>This class knows everything about making OPTIONS requests.\n"],["Ethon::Easy::Http::Patch","","Ethon/Easy/Http/Patch.html","","<p>This class knows everything about making PATCH requests.\n"],["Ethon::Easy::Http::Post","","Ethon/Easy/Http/Post.html","","<p>This class knows everything about making POST requests.\n"],["Ethon::Easy::Http::Postable","","Ethon/Easy/Http/Postable.html","","<p>This module contains logic for setting up a [multipart] POST body.\n"],["Ethon::Easy::Http::Put","","Ethon/Easy/Http/Put.html","","<p>This class knows everything about making PUT requests.\n"],["Ethon::Easy::Http::Putable","","Ethon/Easy/Http/Putable.html","","<p>This module contains logic about setting up a PUT body.\n"],["Ethon::Easy::Informations","","Ethon/Easy/Informations.html","","<p>This module contains the methods to return informations from the easy\nhandle. See curl.haxx.se/libcurl/c/curl_easy_getinfo.html â€¦\n"],["Ethon::Easy::Mirror","","Ethon/Easy/Mirror.html","",""],["Ethon::Easy::Operations","","Ethon/Easy/Operations.html","","<p>This module contains the logic to prepare and perform an easy.\n"],["Ethon::Easy::Options","","Ethon/Easy/Options.html","","<p>This module contains the logic and knowledge about the available options on\neasy.\n"],["Ethon::Easy::Params","","Ethon/Easy/Params.html","","<p>This class represents HTTP request parameters.\n<p>@api private\n"],["Ethon::Easy::Queryable","","Ethon/Easy/Queryable.html","","<p>This module contains logic about building query parameters for url or form.\n"],["Ethon::Easy::ResponseCallbacks","","Ethon/Easy/ResponseCallbacks.html","","<p>This module contains the logic for the response callbacks. The on_complete\ncallback is the only one at â€¦\n"],["Ethon::Easy::Util","","Ethon/Easy/Util.html","","<p>This module contains small helpers.\n<p>@api private\n"],["Ethon::Errors","","Ethon/Errors.html","","<p>This namespace contains all errors raised by ethon.\n"],["Ethon::Errors::EthonError","","Ethon/Errors/EthonError.html","","<p>Default Ethon error class for all custom errors.\n"],["Ethon::Errors::GlobalInit","","Ethon/Errors/GlobalInit.html","","<p>Raises when global_init failed.\n"],["Ethon::Errors::InvalidOption","","Ethon/Errors/InvalidOption.html","","<p>Raises when option is invalid.\n"],["Ethon::Errors::InvalidValue","","Ethon/Errors/InvalidValue.html","","<p>Raises when option is invalid.\n"],["Ethon::Errors::MultiAdd","","Ethon/Errors/MultiAdd.html","","<p>Raises when multi_add_handle failed.\n"],["Ethon::Errors::MultiFdset","","Ethon/Errors/MultiFdset.html","","<p>Raises when multi_fdset failed.\n"],["Ethon::Errors::MultiRemove","","Ethon/Errors/MultiRemove.html","","<p>Raises when multi_remove_handle failed.\n"],["Ethon::Errors::MultiTimeout","","Ethon/Errors/MultiTimeout.html","","<p>Raised when multi_timeout failed.\n"],["Ethon::Errors::Select","","Ethon/Errors/Select.html","","<p>Raised when select failed.\n"],["Ethon::Libc","","Ethon/Libc.html","","<p>FFI Wrapper module for Libc.\n<p>@api private\n"],["Ethon::Loggable","","Ethon/Loggable.html","","<p>Contains logging behaviour.\n"],["Ethon::Multi","","Ethon/Multi.html","","<p>This class represents libcurl multi.\n"],["Ethon::Multi::Operations","","Ethon/Multi/Operations.html","","<p>This module contains logic to run a multi.\n"],["Ethon::Multi::Options","","Ethon/Multi/Options.html","","<p>This module contains the logic and knowledge about the available options on\nmulti.\n"],["Ethon::Multi::Stack","","Ethon/Multi/Stack.html","","<p>This module provides the multi stack behaviour.\n"],["add","Ethon::Easy::DebugInfo","Ethon/Easy/DebugInfo.html#method-i-add","(type, message)",""],["add","Ethon::Multi::Stack","Ethon/Multi/Stack.html#method-i-add","(easy)","<p>Add an easy to the stack.\n<p>@example Add easy.\n\n<pre>multi.add(easy)</pre>\n"],["body","Ethon::Easy::ResponseCallbacks","Ethon/Easy/ResponseCallbacks.html#method-i-body","(chunk)","<p>Execute on_body callbacks.\n<p>@example Execute on_body.\n\n<pre>request.body(&quot;This data came from HTTP.&quot;)</pre>\n"],["check","Ethon::Multi::Operations","Ethon/Multi/Operations.html#method-i-check","()","<p>Check.\n<p>@example Check.\n\n<pre>multi.check</pre>\n"],["cleanup","Ethon::Easy::Operations","Ethon/Easy/Operations.html#method-i-cleanup","()","<p>Clean up the easy.\n<p>@example Perform clean up.\n\n<pre>easy.cleanup</pre>\n"],["clear","Ethon::Curl::FDSet","Ethon/Curl/FDSet.html#method-i-clear","()",""],["complete","Ethon::Easy::ResponseCallbacks","Ethon/Easy/ResponseCallbacks.html#method-i-complete","()","<p>Execute on_complete callbacks.\n<p>@example Execute on_completes.\n\n<pre>request.complete</pre>\n"],["compose_header","Ethon::Easy::Header","Ethon/Easy/Header.html#method-i-compose_header","(key, value)","<p>Compose libcurl header string from key and value. Also replaces null bytes,\nbecause libcurl will complain â€¦\n"],["debug_info_types","Ethon::Curls::Infos","Ethon/Curls/Infos.html#method-i-debug_info_types","()","<p>curl.haxx.se/libcurl/c/curl_easy_setopt.html#CURLOPTDEBUGFUNCTION\ngithub.com/bagder/curl/blob/master/include/curl/curl.h#L378 â€¦\n"],["default_logger","Ethon::Loggable","Ethon/Loggable.html#method-i-default_logger","()","<p>Gets the default Ethon logger - stdout.\n<p>@example Get the default logger.\n\n<pre>Loggable.default_logger</pre>\n"],["delete","Ethon::Multi::Stack","Ethon/Multi/Stack.html#method-i-delete","(easy)","<p>Delete an easy from stack.\n<p>@example Delete easy from stack.\n<p>@param [ Easy ] easy The easy to delete.\n"],["double_ptr","Ethon::Curls::Infos","Ethon/Curls/Infos.html#method-i-double_ptr","()","<p>Return a double pointer.\n<p>@example Return a double pointer.\n\n<pre>Curl.double_ptr</pre>\n"],["dup","Ethon::Easy","Ethon/Easy.html#method-i-dup","()","<p>Clones libcurl session handle. This means that all options that is set in\n\n<pre>the current handle will be set ...</pre>\n"],["easy_codes","Ethon::Curls::Codes","Ethon/Curls/Codes.html#method-i-easy_codes","()","<p>Libcurl error codes, refer\ngithub.com/bagder/curl/blob/master/include/curl/curl.h for details\n"],["easy_handles","Ethon::Multi::Stack","Ethon/Multi/Stack.html#method-i-easy_handles","()","<p>Return easy handles.\n<p>@example Return easy handles.\n\n<pre>multi.easy_handles</pre>\n"],["escape","Ethon::Easy","Ethon/Easy.html#method-i-escape","(value)","<p>Url escapes the value.\n<p>@example Url escape.\n\n<pre>easy.escape(value)</pre>\n"],["escape=","Ethon::Easy::Options","Ethon/Easy/Options.html#method-i-escape-3D","( b )",""],["escape?","Ethon::Easy::Options","Ethon/Easy/Options.html#method-i-escape-3F","()",""],["escape_zero_byte","Ethon::Easy::Util","Ethon/Easy/Util.html#method-i-escape_zero_byte","(value)","<p>Escapes zero bytes in strings.\n<p>@example Escape zero bytes.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Util</span>.<span class=\"ruby-identifier\">escape_zero_byte</span>(<span class=\"ruby-string\">&quot;1\\0&quot;</span>)\n<span class=\"ruby-comment\">#=&gt; &quot;1\\\\0&quot;</span>\n</pre>\n"],["fabricate","Ethon::Easy::Http","Ethon/Easy/Http.html#method-i-fabricate","(url, action_name, options)","<p>Return the corresponding action class.\n<p>@example Return the action.\n\n<pre>Action.fabricate(:get)\nAction.fabricate(:smash)</pre>\n"],["first","Ethon::Easy::Form","Ethon/Easy/Form.html#method-i-first","()","<p>Return a pointer to the first form element in libcurl.\n<p>@example Return the first form element.\n\n<pre>form.first</pre>\n"],["form","Ethon::Easy::Http::Actionable","Ethon/Easy/Http/Actionable.html#method-i-form","()","<p>Return the form.\n<p>@example Return form.\n\n<pre>action.form</pre>\n"],["form_add","Ethon::Easy::Form","Ethon/Easy/Form.html#method-i-form_add","(name, content)",""],["form_options","Ethon::Curls::FormOptions","Ethon/Curls/FormOptions.html#method-i-form_options","()","<p>Form options, used by FormAdd for temporary storage, refer\ngithub.com/bagder/curl/blob/master/lib/formdata.h#L51 â€¦\n"],["from_easy","Ethon::Easy::Mirror","Ethon/Easy/Mirror.html#method-c-from_easy","(easy)",""],["get_info_double","Ethon::Curls::Infos","Ethon/Curls/Infos.html#method-i-get_info_double","(option, handle)","<p>Return info as float\n<p>@example Return info.\n\n<pre>Curl.get_info_double(:response_code, easy)</pre>\n"],["get_info_long","Ethon::Curls::Infos","Ethon/Curls/Infos.html#method-i-get_info_long","(option, handle)","<p>Return info as integer.\n<p>@example Return info.\n\n<pre>Curl.get_info_long(:response_code, easy)</pre>\n"],["get_info_string","Ethon::Curls::Infos","Ethon/Curls/Infos.html#method-i-get_info_string","(option, handle)","<p>Return info as string.\n<p>@example Return info.\n\n<pre>Curl.get_info_string(:primary_ip, easy)</pre>\n"],["get_timeout","Ethon::Multi::Operations","Ethon/Multi/Operations.html#method-i-get_timeout","()","<p>Get timeout.\n<p>@example Get timeout.\n\n<pre>multi.get_timeout</pre>\n"],["handle","Ethon::Easy::Operations","Ethon/Easy/Operations.html#method-i-handle","()","<p>Returns a pointer to the curl easy handle.\n<p>@example Return the handle.\n\n<pre>easy.handle</pre>\n"],["handle","Ethon::Multi::Operations","Ethon/Multi/Operations.html#method-i-handle","()","<p>Return the multi handle. Inititialize multi handle, in case it didn&#39;t\nhappened already.\n<p>@example  â€¦\n"],["handle=","Ethon::Easy::Operations","Ethon/Easy/Operations.html#method-i-handle-3D","(h)","<p>Sets a pointer to the curl easy handle. @param [ ::FFI::Pointer ] Easy\nhandle that will be assigned. â€¦\n"],["header_list","Ethon::Easy::Header","Ethon/Easy/Header.html#method-i-header_list","()","<p>Return header_list.\n<p>@example Return header_list.\n\n<pre>easy.header_list</pre>\n"],["headers","Ethon::Easy::Header","Ethon/Easy/Header.html#method-i-headers","()","<p>Return headers, return empty hash if none.\n<p>@example Return the headers.\n\n<pre>easy.headers</pre>\n"],["headers","Ethon::Easy::ResponseCallbacks","Ethon/Easy/ResponseCallbacks.html#method-i-headers","()","<p>Execute on_headers callbacks.\n<p>@example Execute on_headers.\n\n<pre>request.headers</pre>\n"],["headers=","Ethon::Easy::Header","Ethon/Easy/Header.html#method-i-headers-3D","(headers)","<p>Set the headers.\n<p>@example Set the headers.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">easy</span>.<span class=\"ruby-identifier\">headers</span> = {<span class=\"ruby-string\">&#39;User-Agent&#39;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&#39;ethon&#39;</span>}\n</pre>\n"],["http_request","Ethon::Easy::Http","Ethon/Easy/Http.html#method-i-http_request","(url, action_name, options = {})","<p>Set specified options in order to make a HTTP request. Look at\n{Ethon::Easy::Options Options} to see â€¦\n"],["info_types","Ethon::Curls::Infos","Ethon/Curls/Infos.html#method-i-info_types","()","<p>Return info types.\n<p>@example Return info types.\n\n<pre>Ethon::Curl.info_types</pre>\n"],["infos","Ethon::Curls::Infos","Ethon/Curls/Infos.html#method-i-infos","()","<p>Return Info details, refer\ngithub.com/bagder/curl/blob/master/src/tool_writeout.c#L66 for details\n<p>@example â€¦\n"],["init_vars","Ethon::Multi::Operations","Ethon/Multi/Operations.html#method-i-init_vars","()","<p>Initialize variables.\n<p>@example Initialize variables.\n\n<pre>multi.init_vars</pre>\n"],["last","Ethon::Easy::Form","Ethon/Easy/Form.html#method-i-last","()","<p>Return a pointer to the last form element in libcurl.\n<p>@example Return the last form element.\n\n<pre>form.last</pre>\n"],["log_informations","Ethon::Easy::Mirror","Ethon/Easy/Mirror.html#method-i-log_informations","()",""],["log_inspect","Ethon::Easy","Ethon/Easy.html#method-i-log_inspect","()","<p>Return pretty log out.\n<p>@example Return log out.\n\n<pre>easy.log_inspect</pre>\n"],["logger","Ethon::Loggable","Ethon/Loggable.html#method-i-logger","()","<p>Get the logger.\n<p>@note Will try to grab Rails&#39; logger first before creating a new logger\n\n<pre>with stdout.</pre>\n"],["logger=","Ethon::Loggable","Ethon/Loggable.html#method-i-logger-3D","(logger)","<p>Set the logger.\n<p>@example Set the logger.\n\n<pre>Loggable.logger = Logger.new($stdout)</pre>\n"],["long_ptr","Ethon::Curls::Infos","Ethon/Curls/Infos.html#method-i-long_ptr","()","<p>Return a long pointer.\n<p>@example Return a long pointer.\n\n<pre>Curl.long_ptr</pre>\n"],["materialize","Ethon::Easy::Form","Ethon/Easy/Form.html#method-i-materialize","()","<p>Add form elements to libcurl.\n<p>@example Add form to libcurl.\n\n<pre>form.materialize</pre>\n"],["max_total_connections=","Ethon::Multi::Options","Ethon/Multi/Options.html#method-i-max_total_connections-3D","(value)","<p>Sets max_total_connections option.\n<p>@example Set max_total_connections option.\n\n<pre>easy.max_total_conections ...</pre>\n"],["maxconnects=","Ethon::Multi::Options","Ethon/Multi/Options.html#method-i-maxconnects-3D","(value)","<p>Sets maxconnects option.\n<p>@example Set maxconnects option.\n\n<pre>easy.maxconnects = $value</pre>\n"],["messages_for","Ethon::Easy::DebugInfo","Ethon/Easy/DebugInfo.html#method-i-messages_for","(type)",""],["mirror","Ethon::Easy","Ethon/Easy.html#method-i-mirror","()",""],["msg_codes","Ethon::Curls::Messages","Ethon/Curls/Messages.html#method-i-msg_codes","()","<p>Return message codes.\n<p>@example Return message codes.\n\n<pre>Ethon::Curl.msg_codes</pre>\n"],["multi_codes","Ethon::Curls::Codes","Ethon/Curls/Codes.html#method-i-multi_codes","()","<p>Curl-Multi socket error codes, refer\ngithub.com/bagder/curl/blob/master/include/curl/multi.h for details â€¦\n"],["multipart?","Ethon::Easy::Form","Ethon/Easy/Form.html#method-i-multipart-3F","()","<p>Return if form is multipart. The form is multipart when it contains a file.\n<p>@example Return if form is â€¦\n"],["new","Ethon::Easy","Ethon/Easy.html#method-c-new","(options = {})","<p>Initialize a new Easy. It initializes curl, if not already done and applies\nthe provided options. Look â€¦\n"],["new","Ethon::Easy::DebugInfo","Ethon/Easy/DebugInfo.html#method-c-new","()",""],["new","Ethon::Easy::DebugInfo::Message","Ethon/Easy/DebugInfo/Message.html#method-c-new","(type, message)",""],["new","Ethon::Easy::Form","Ethon/Easy/Form.html#method-c-new","(easy, params)","<p>Return a new Form.\n<p>@example Return a new Form.\n\n<pre>Form.new({})</pre>\n"],["new","Ethon::Easy::Http::Actionable","Ethon/Easy/Http/Actionable.html#method-c-new","(url, options)","<p>Create a new action.\n<p>@example Create a new action.\n\n<pre>Action.new(&quot;www.example.com&quot;, {})</pre>\n"],["new","Ethon::Easy::Http::Custom","Ethon/Easy/Http/Custom.html#method-c-new","(verb, url, options)",""],["new","Ethon::Easy::Mirror","Ethon/Easy/Mirror.html#method-c-new","(options = {})",""],["new","Ethon::Easy::Params","Ethon/Easy/Params.html#method-c-new","(easy, params)","<p>Create a new Params.\n<p>@example Create a new Params.\n\n<pre>Params.new({})</pre>\n"],["new","Ethon::Errors::GlobalInit","Ethon/Errors/GlobalInit.html#method-c-new","()",""],["new","Ethon::Errors::InvalidOption","Ethon/Errors/InvalidOption.html#method-c-new","(option)",""],["new","Ethon::Errors::InvalidValue","Ethon/Errors/InvalidValue.html#method-c-new","(option, value)",""],["new","Ethon::Errors::MultiAdd","Ethon/Errors/MultiAdd.html#method-c-new","(code, easy)",""],["new","Ethon::Errors::MultiFdset","Ethon/Errors/MultiFdset.html#method-c-new","(code)",""],["new","Ethon::Errors::MultiRemove","Ethon/Errors/MultiRemove.html#method-c-new","(code, easy)",""],["new","Ethon::Errors::MultiTimeout","Ethon/Errors/MultiTimeout.html#method-c-new","(code)",""],["new","Ethon::Errors::Select","Ethon/Errors/Select.html#method-c-new","(errno)",""],["new","Ethon::Multi","Ethon/Multi.html#method-c-new","(options = {})","<p>Create a new multi. Initialize curl in case it didn&#39;t happen before.\n<p>@example Create a new Multi. â€¦\n"],["on_body","Ethon::Easy::ResponseCallbacks","Ethon/Easy/ResponseCallbacks.html#method-i-on_body","(&block)","<p>Set on_body callback.\n<p>@example Set on_body.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">request</span>.<span class=\"ruby-identifier\">on_body</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">chunk</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">p</span> <span class=\"ruby-string\">&quot;yay&quot;</span> }\n</pre>\n"],["on_complete","Ethon::Easy::ResponseCallbacks","Ethon/Easy/ResponseCallbacks.html#method-i-on_complete","(&block)","<p>Set on_complete callback.\n<p>@example Set on_complete.\n\n<pre>request.on_complete { p &quot;yay&quot; }</pre>\n"],["on_headers","Ethon::Easy::ResponseCallbacks","Ethon/Easy/ResponseCallbacks.html#method-i-on_headers","(&block)","<p>Set on_headers callback.\n<p>@example Set on_headers.\n\n<pre>request.on_headers { p &quot;yay&quot; }</pre>\n"],["ongoing?","Ethon::Multi::Operations","Ethon/Multi/Operations.html#method-i-ongoing-3F","()","<p>Return wether the multi still requests or not.\n<p>@example Return if ongoing.\n\n<pre>multi.ongoing?</pre>\n"],["option","Ethon::Curls::Options","Ethon/Curls/Options.html#method-c-option","(ftype,name,type,num,opts=nil)",""],["option_alias","Ethon::Curls::Options","Ethon/Curls/Options.html#method-c-option_alias","(ftype,name,*aliases)",""],["option_type","Ethon::Curls::Options","Ethon/Curls/Options.html#method-c-option_type","(type)",""],["options","Ethon::Easy::Http::Actionable","Ethon/Easy/Http/Actionable.html#method-i-options","()","<p>Return the options hash.\n<p>@example Return options.\n\n<pre>action.options</pre>\n"],["params","Ethon::Easy::Http::Actionable","Ethon/Easy/Http/Actionable.html#method-i-params","()","<p>Return the params.\n<p>@example Return params.\n\n<pre>action.params</pre>\n"],["params_encoding","Ethon::Easy::Http::Actionable","Ethon/Easy/Http/Actionable.html#method-i-params_encoding","()","<p>Get the requested array encoding. By default it&#39;s :typhoeus, but it can\nalso be set to :rack.\n<p>@example â€¦\n"],["parse_options","Ethon::Easy::Http::Actionable","Ethon/Easy/Http/Actionable.html#method-i-parse_options","(options)",""],["perform","Ethon::Easy::Operations","Ethon/Easy/Operations.html#method-i-perform","()","<p>Perform the easy request.\n<p>@example Perform the request.\n\n<pre>easy.perform</pre>\n"],["perform","Ethon::Multi::Operations","Ethon/Multi/Operations.html#method-i-perform","()","<p>Perform multi.\n<p>@return [ nil ]\n<p>@example Perform multi.\n"],["pipelining=","Ethon::Multi::Options","Ethon/Multi/Options.html#method-i-pipelining-3D","(value)","<p>Sets pipelining option.\n<p>@example Set pipelining option.\n\n<pre>easy.pipelining = $value</pre>\n"],["prepare","Ethon::Easy::Operations","Ethon/Easy/Operations.html#method-i-prepare","()","<p>Prepare the easy. Options, headers and callbacks were set.\n<p>@example Prepare easy.\n\n<pre>easy.prepare</pre>\n"],["prepare","Ethon::Multi::Operations","Ethon/Multi/Operations.html#method-i-prepare","()","<p>Prepare multi.\n<p>@return [ nil ]\n<p>@example Prepare multi.\n"],["query_options","Ethon::Easy::Http::Actionable","Ethon/Easy/Http/Actionable.html#method-i-query_options","()","<p>Returns the query options hash.\n<p>@example Return query options.\n\n<pre>action.query_options</pre>\n"],["rails_logger","Ethon::Loggable","Ethon/Loggable.html#method-i-rails_logger","()","<p>Get the Rails logger if it&#39;s defined.\n<p>@example Get Rails&#39; logger.\n\n<pre>Loggable.rails_logger</pre>\n"],["reset","Ethon::Easy","Ethon/Easy.html#method-i-reset","()","<p>Reset easy. This means resetting all options and instance variables. Also\nthe easy handle is resetted. â€¦\n"],["reset_fds","Ethon::Multi::Operations","Ethon/Multi/Operations.html#method-i-reset_fds","()","<p>Reset file describtors.\n<p>@example Reset fds.\n\n<pre>multi.reset_fds</pre>\n"],["run","Ethon::Multi::Operations","Ethon/Multi/Operations.html#method-i-run","()","<p>Run.\n<p>@example Run\n\n<pre>multi.run</pre>\n"],["running_count","Ethon::Multi::Operations","Ethon/Multi/Operations.html#method-i-running_count","()","<p>Return number of running requests.\n<p>@example Return count.\n\n<pre>multi.running_count</pre>\n"],["set_attributes","Ethon::Easy","Ethon/Easy.html#method-i-set_attributes","(options)","<p>Set given options.\n<p>@example Set options.\n\n<pre>easy.set_attributes(options)</pre>\n"],["set_attributes","Ethon::Multi","Ethon/Multi.html#method-i-set_attributes","(options)","<p>Set given options.\n<p>@example Set options.\n\n<pre>multi.set_attributes(options)</pre>\n"],["set_fds","Ethon::Multi::Operations","Ethon/Multi/Operations.html#method-i-set_fds","(timeout)","<p>Set fds.\n<p>@example Set fds.\n\n<pre>multi.set_fds</pre>\n"],["set_form","Ethon::Easy::Http::Actionable","Ethon/Easy/Http/Actionable.html#method-i-set_form","(easy)","<p>Setup request with form.\n<p>@example Setup nothing.\n\n<pre>action.set_form(easy)</pre>\n"],["set_form","Ethon::Easy::Http::Postable","Ethon/Easy/Http/Postable.html#method-i-set_form","(easy)","<p>Set things up when form is provided. Deals with multipart forms.\n<p>@example Setup.\n\n<pre>post.set_form(easy)</pre>\n"],["set_form","Ethon::Easy::Http::Putable","Ethon/Easy/Http/Putable.html#method-i-set_form","(easy)","<p>Set things up when form is provided. Deals with multipart forms.\n<p>@example Setup.\n\n<pre>put.set_form(easy)</pre>\n"],["set_option","Ethon::Curls::Options","Ethon/Curls/Options.html#method-i-set_option","(option, value, handle, type = :easy)","<p>Sets appropriate option for easy, depending on value type.\n"],["set_params","Ethon::Easy::Http::Actionable","Ethon/Easy/Http/Actionable.html#method-i-set_params","(easy)","<p>Setup request with params.\n<p>@example Setup nothing.\n\n<pre>action.set_params(easy)</pre>\n"],["setup","Ethon::Easy::Http::Actionable","Ethon/Easy/Http/Actionable.html#method-i-setup","(easy)","<p>Setup everything necessary for a proper request.\n<p>@example setup.\n\n<pre>action.setup(easy)</pre>\n"],["setup","Ethon::Easy::Http::Custom","Ethon/Easy/Http/Custom.html#method-i-setup","(easy)","<p>Setup easy to make a request.\n<p>@example Setup.\n\n<pre>custom.set_params(easy)</pre>\n"],["setup","Ethon::Easy::Http::Delete","Ethon/Easy/Http/Delete.html#method-i-setup","(easy)","<p>Setup easy to make a DELETE request.\n<p>@example Setup customrequest.\n\n<pre>delete.setup(easy)</pre>\n"],["setup","Ethon::Easy::Http::Get","Ethon/Easy/Http/Get.html#method-i-setup","(easy)","<p>Setup easy to make a GET request.\n<p>@example Setup.\n\n<pre>get.set_params(easy)</pre>\n"],["setup","Ethon::Easy::Http::Head","Ethon/Easy/Http/Head.html#method-i-setup","(easy)","<p>Setup easy to make a HEAD request.\n<p>@example Setup.\n\n<pre>get.set_params(easy)</pre>\n"],["setup","Ethon::Easy::Http::Options","Ethon/Easy/Http/Options.html#method-i-setup","(easy)","<p>Setup easy to make a OPTIONS request.\n<p>@example Setup.\n\n<pre>options.setup(easy)</pre>\n"],["setup","Ethon::Easy::Http::Patch","Ethon/Easy/Http/Patch.html#method-i-setup","(easy)","<p>Setup easy to make a PATCH request.\n<p>@example Setup.\n\n<pre>patch.setup(easy)</pre>\n"],["setup","Ethon::Easy::Http::Post","Ethon/Easy/Http/Post.html#method-i-setup","(easy)","<p>Setup easy to make a POST request.\n<p>@example Setup.\n\n<pre>post.setup(easy)</pre>\n"],["setup","Ethon::Easy::Http::Put","Ethon/Easy/Http/Put.html#method-i-setup","(easy)","<p>Setup easy to make a PUT request.\n<p>@example Setup.\n\n<pre>put.setup(easy)</pre>\n"],["setup_garbage_collection","Ethon::Easy::Form","Ethon/Easy/Form.html#method-i-setup_garbage_collection","()",""],["socketdata=","Ethon::Multi::Options","Ethon/Multi/Options.html#method-i-socketdata-3D","(value)","<p>Sets socketdata option.\n<p>@example Set socketdata option.\n\n<pre>easy.socketdata = $value</pre>\n"],["socketfunction=","Ethon::Multi::Options","Ethon/Multi/Options.html#method-i-socketfunction-3D","(value)","<p>Sets socketfunction option.\n<p>@example Set socketfunction option.\n\n<pre>easy.socketfunction = $value</pre>\n"],["string_ptr","Ethon::Curls::Infos","Ethon/Curls/Infos.html#method-i-string_ptr","()","<p>Return a string pointer.\n<p>@example Return a string pointer.\n\n<pre>Curl.string_ptr</pre>\n"],["supports_asynch_dns?","Ethon::Easy::Features","Ethon/Easy/Features.html#method-i-supports_asynch_dns-3F","()","<p>Returns true if this curl version supports AsynchDNS.\n<p>@example\n\n<pre>Ethon::Easy.supports_asynch_dns?</pre>\n"],["supports_timeout_ms?","Ethon::Easy::Features","Ethon/Easy/Features.html#method-i-supports_timeout_ms-3F","()",""],["supports_zlib?","Ethon::Easy::Features","Ethon/Easy/Features.html#method-i-supports_zlib-3F","()","<p>Returns true if this curl version supports zlib.\n<p>@example Return wether zlib is supported.\n\n<pre>Ethon::Easy.supports_zlib?</pre>\n"],["supports_zlib?","Ethon::Easy::Informations","Ethon/Easy/Informations.html#method-i-supports_zlib-3F","()","<p>Returns true if this curl version supports zlib.\n<p>@example Return wether zlib is supported.\n\n<pre>easy.supports_zlib?</pre>\n"],["timerdata=","Ethon::Multi::Options","Ethon/Multi/Options.html#method-i-timerdata-3D","(value)","<p>Sets timerdata option.\n<p>@example Set timerdata option.\n\n<pre>easy.timerdata = $value</pre>\n"],["timerfunction=","Ethon::Multi::Options","Ethon/Multi/Options.html#method-i-timerfunction-3D","(value)","<p>Sets timerfunction option.\n<p>@example Set timerfunction option.\n\n<pre>easy.timerfunction = $value</pre>\n"],["to_a","Ethon::Easy::DebugInfo","Ethon/Easy/DebugInfo.html#method-i-to_a","()",""],["to_h","Ethon::Easy::DebugInfo","Ethon/Easy/DebugInfo.html#method-i-to_h","()",""],["to_hash","Ethon::Easy","Ethon/Easy.html#method-i-to_hash","()","<p>Returns the informations available through libcurl as a hash.\n<p>@return [ Hash ] The informations hash. â€¦\n"],["trigger","Ethon::Multi::Operations","Ethon/Multi/Operations.html#method-i-trigger","(running_count_pointer)","<p>Trigger.\n<p>@example Trigger.\n\n<pre>multi.trigger</pre>\n"],["url","Ethon::Easy::Http::Actionable","Ethon/Easy/Http/Actionable.html#method-i-url","()","<p>Return the url.\n<p>@example Return url.\n\n<pre>action.url</pre>\n"],["url=","Ethon::Easy::Options","Ethon/Easy/Options.html#method-i-url-3D","(value)",""],["value_for","Ethon::Multi::Options","Ethon/Multi/Options.html#method-i-value_for","(value, type, option = nil)","<p>Return the value to set to multi handle. It is converted with the help of\nbool_options, enum_options â€¦\n"]]}}